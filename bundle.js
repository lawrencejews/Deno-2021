const matchCache = {
};
const FIELD_CONTENT_REGEXP = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
const KEY_REGEXP = /(?:^|;) *([^=]*)=[^;]*/g;
const SAME_SITE_REGEXP = /^(?:lax|none|strict)$/i;
function getPattern(name) {
    if (name in matchCache) {
        return matchCache[name];
    }
    return matchCache[name] = new RegExp(`(?:^|;) *${name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")}=([^;]*)`);
}
function pushCookie(headers, cookie) {
    if (cookie.overwrite) {
        for(let i = headers.length - 1; i >= 0; i--){
            if (headers[i].indexOf(`${cookie.name}=`) === 0) {
                headers.splice(i, 1);
            }
        }
    }
    headers.push(cookie.toHeader());
}
function validateCookieProperty(key, value) {
    if (value && !FIELD_CONTENT_REGEXP.test(value)) {
        throw new TypeError(`The ${key} of the cookie (${value}) is invalid.`);
    }
}
class Cookie {
    domain;
    expires;
    httpOnly = true;
    maxAge;
    name;
    overwrite = false;
    path = "/";
    sameSite = false;
    secure = false;
    signed;
    value;
    constructor(name1, value2, attributes){
        validateCookieProperty("name", name1);
        validateCookieProperty("value", value2);
        this.name = name1;
        this.value = value2 ?? "";
        Object.assign(this, attributes);
        if (!this.value) {
            this.expires = new Date(0);
            this.maxAge = undefined;
        }
        validateCookieProperty("path", this.path);
        validateCookieProperty("domain", this.domain);
        if (this.sameSite && typeof this.sameSite === "string" && !SAME_SITE_REGEXP.test(this.sameSite)) {
            throw new TypeError(`The sameSite of the cookie ("${this.sameSite}") is invalid.`);
        }
    }
    toHeader() {
        let header = this.toString();
        if (this.maxAge) {
            this.expires = new Date(Date.now() + this.maxAge * 1000);
        }
        if (this.path) {
            header += `; path=${this.path}`;
        }
        if (this.expires) {
            header += `; expires=${this.expires.toUTCString()}`;
        }
        if (this.domain) {
            header += `; domain=${this.domain}`;
        }
        if (this.sameSite) {
            header += `; samesite=${this.sameSite === true ? "strict" : this.sameSite.toLowerCase()}`;
        }
        if (this.secure) {
            header += "; secure";
        }
        if (this.httpOnly) {
            header += "; httponly";
        }
        return header;
    }
    toString() {
        return `${this.name}=${this.value}`;
    }
}
class Cookies {
    #cookieKeys;
    #keys;
    #request;
    #response;
    #secure;
     #requestKeys() {
        if (this.#cookieKeys) {
            return this.#cookieKeys;
        }
        const result = this.#cookieKeys = [];
        const header = this.#request.headers.get("cookie");
        if (!header) {
            return result;
        }
        let matches;
        while(matches = KEY_REGEXP.exec(header)){
            const [, key] = matches;
            result.push(key);
        }
        return result;
    }
    constructor(request3, response1, options1 = {
    }){
        const { keys: keys2 , secure: secure3  } = options1;
        this.#keys = keys2;
        this.#request = request3;
        this.#response = response1;
        this.#secure = secure3;
    }
    delete(name, options = {
    }) {
        this.set(name, null, options);
        return true;
    }
    async *entries() {
        const keys1 = this.#requestKeys();
        for (const key of keys1){
            const value1 = await this.get(key);
            if (value1) {
                yield [
                    key,
                    value1
                ];
            }
        }
    }
    async forEach(callback, thisArg = null) {
        const keys1 = this.#requestKeys();
        for (const key of keys1){
            const value1 = await this.get(key);
            if (value1) {
                callback.call(thisArg, key, value1, this);
            }
        }
    }
    async get(name, options = {
    }) {
        const signed = options.signed ?? !!this.#keys;
        const nameSig = `${name}.sig`;
        const header = this.#request.headers.get("cookie");
        if (!header) {
            return;
        }
        const match = header.match(getPattern(name));
        if (!match) {
            return;
        }
        const [, value1] = match;
        if (!signed) {
            return value1;
        }
        const digest = await this.get(nameSig, {
            signed: false
        });
        if (!digest) {
            return;
        }
        const data = `${name}=${value1}`;
        if (!this.#keys) {
            throw new TypeError("keys required for signed cookies");
        }
        const index = await this.#keys.indexOf(data, digest);
        if (index < 0) {
            this.delete(nameSig, {
                path: "/",
                signed: false
            });
        } else {
            if (index) {
                this.set(nameSig, await this.#keys.sign(data), {
                    signed: false
                });
            }
            return value1;
        }
    }
    async *keys() {
        const keys1 = this.#requestKeys();
        for (const key of keys1){
            const value1 = await this.get(key);
            if (value1) {
                yield key;
            }
        }
    }
    async set(name, value, options = {
    }) {
        const request1 = this.#request;
        const response1 = this.#response;
        const headers = [];
        for (const [key, value1] of response1.headers.entries()){
            if (key === "set-cookie") {
                headers.push(value1);
            }
        }
        const secure1 = this.#secure !== undefined ? this.#secure : request1.secure;
        const signed = options.signed ?? !!this.#keys;
        if (!secure1 && options.secure) {
            throw new TypeError("Cannot send secure cookie over unencrypted connection.");
        }
        const cookie = new Cookie(name, value, options);
        cookie.secure = options.secure ?? secure1;
        pushCookie(headers, cookie);
        if (signed) {
            if (!this.#keys) {
                throw new TypeError(".keys required for signed cookies.");
            }
            cookie.value = await this.#keys.sign(cookie.toString());
            cookie.name += ".sig";
            pushCookie(headers, cookie);
        }
        response1.headers.delete("Set-Cookie");
        for (const header of headers){
            response1.headers.append("Set-Cookie", header);
        }
        return this;
    }
    async *values() {
        const keys1 = this.#requestKeys();
        for (const key of keys1){
            const value1 = await this.get(key);
            if (value1) {
                yield value1;
            }
        }
    }
    async *[Symbol.asyncIterator]() {
        const keys1 = this.#requestKeys();
        for (const key of keys1){
            const value1 = await this.get(key);
            if (value1) {
                yield [
                    key,
                    value1
                ];
            }
        }
    }
    [Symbol.for("Deno.customInspect")]() {
        return `${this.constructor.name} []`;
    }
}
function equals(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0; i < b.length; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function concat(...buf) {
    let length = 0;
    for (const b of buf){
        length += b.length;
    }
    const output = new Uint8Array(length);
    let index = 0;
    for (const b1 of buf){
        output.set(b1, index);
        index += b1.length;
    }
    return output;
}
function copy(src, dst, off = 0) {
    off = Math.max(0, Math.min(off, dst.byteLength));
    const dstBytesAvailable = dst.byteLength - off;
    if (src.byteLength > dstBytesAvailable) {
        src = src.subarray(0, dstBytesAvailable);
    }
    dst.set(src, off);
    return src.byteLength;
}
const base64abc = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "+",
    "/"
];
function encode(data) {
    const uint8 = typeof data === "string" ? new TextEncoder().encode(data) : data instanceof Uint8Array ? data : new Uint8Array(data);
    let result = "", i;
    const l = uint8.length;
    for(i = 2; i < l; i += 3){
        result += base64abc[uint8[i - 2] >> 2];
        result += base64abc[(uint8[i - 2] & 3) << 4 | uint8[i - 1] >> 4];
        result += base64abc[(uint8[i - 1] & 15) << 2 | uint8[i] >> 6];
        result += base64abc[uint8[i] & 63];
    }
    if (i === l + 1) {
        result += base64abc[uint8[i - 2] >> 2];
        result += base64abc[(uint8[i - 2] & 3) << 4];
        result += "==";
    }
    if (i === l) {
        result += base64abc[uint8[i - 2] >> 2];
        result += base64abc[(uint8[i - 2] & 3) << 4 | uint8[i - 1] >> 4];
        result += base64abc[(uint8[i - 1] & 15) << 2];
        result += "=";
    }
    return result;
}
function decode(b64) {
    const binString = atob(b64);
    const size = binString.length;
    const bytes = new Uint8Array(size);
    for(let i = 0; i < size; i++){
        bytes[i] = binString.charCodeAt(i);
    }
    return bytes;
}
const mod = function() {
    return {
        encode: encode,
        decode: decode
    };
}();
class DenoStdInternalError extends Error {
    constructor(message2){
        super(message2);
        this.name = "DenoStdInternalError";
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError(msg);
    }
}
const MIN_READ = 32 * 1024;
const MAX_SIZE = 2 ** 32 - 2;
class Buffer {
    #buf;
    #off = 0;
    constructor(ab){
        this.#buf = ab === undefined ? new Uint8Array(0) : new Uint8Array(ab);
    }
    bytes(options = {
        copy: true
    }) {
        if (options.copy === false) return this.#buf.subarray(this.#off);
        return this.#buf.slice(this.#off);
    }
    empty() {
        return this.#buf.byteLength <= this.#off;
    }
    get length() {
        return this.#buf.byteLength - this.#off;
    }
    get capacity() {
        return this.#buf.buffer.byteLength;
    }
    truncate(n) {
        if (n === 0) {
            this.reset();
            return;
        }
        if (n < 0 || n > this.length) {
            throw Error("bytes.Buffer: truncation out of range");
        }
        this.#reslice(this.#off + n);
    }
    reset() {
        this.#reslice(0);
        this.#off = 0;
    }
     #tryGrowByReslice(n) {
        const l = this.#buf.byteLength;
        if (n <= this.capacity - l) {
            this.#reslice(l + n);
            return l;
        }
        return -1;
    }
     #reslice(len) {
        assert(len <= this.#buf.buffer.byteLength);
        this.#buf = new Uint8Array(this.#buf.buffer, 0, len);
    }
    readSync(p) {
        if (this.empty()) {
            this.reset();
            if (p.byteLength === 0) {
                return 0;
            }
            return null;
        }
        const nread = copy(this.#buf.subarray(this.#off), p);
        this.#off += nread;
        return nread;
    }
    read(p) {
        const rr = this.readSync(p);
        return Promise.resolve(rr);
    }
    writeSync(p) {
        const m = this.#grow(p.byteLength);
        return copy(p, this.#buf, m);
    }
    write(p) {
        const n = this.writeSync(p);
        return Promise.resolve(n);
    }
     #grow(n) {
        const m = this.length;
        if (m === 0 && this.#off !== 0) {
            this.reset();
        }
        const i = this.#tryGrowByReslice(n);
        if (i >= 0) {
            return i;
        }
        const c = this.capacity;
        if (n <= Math.floor(c / 2) - m) {
            copy(this.#buf.subarray(this.#off), this.#buf);
        } else if (c + n > MAX_SIZE) {
            throw new Error("The buffer cannot be grown beyond the maximum size.");
        } else {
            const buf = new Uint8Array(Math.min(2 * c + n, MAX_SIZE));
            copy(this.#buf.subarray(this.#off), buf);
            this.#buf = buf;
        }
        this.#off = 0;
        this.#reslice(Math.min(m + n, MAX_SIZE));
        return m;
    }
    grow(n) {
        if (n < 0) {
            throw Error("Buffer.grow: negative count");
        }
        const m = this.#grow(n);
        this.#reslice(m);
    }
    async readFrom(r) {
        let n = 0;
        const tmp = new Uint8Array(MIN_READ);
        while(true){
            const shouldGrow = this.capacity - this.length < MIN_READ;
            const buf = shouldGrow ? tmp : new Uint8Array(this.#buf.buffer, this.length);
            const nread = await r.read(buf);
            if (nread === null) {
                return n;
            }
            if (shouldGrow) this.writeSync(buf.subarray(0, nread));
            else this.#reslice(this.length + nread);
            n += nread;
        }
    }
    readFromSync(r) {
        let n = 0;
        const tmp = new Uint8Array(MIN_READ);
        while(true){
            const shouldGrow = this.capacity - this.length < MIN_READ;
            const buf = shouldGrow ? tmp : new Uint8Array(this.#buf.buffer, this.length);
            const nread = r.readSync(buf);
            if (nread === null) {
                return n;
            }
            if (shouldGrow) this.writeSync(buf.subarray(0, nread));
            else this.#reslice(this.length + nread);
            n += nread;
        }
    }
}
const ANSI_PATTERN = new RegExp([
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))", 
].join("|"), "g");
var DiffType;
(function(DiffType1) {
    DiffType1["removed"] = "removed";
    DiffType1["common"] = "common";
    DiffType1["added"] = "added";
})(DiffType || (DiffType = {
}));
class AssertionError extends Error {
    constructor(message1){
        super(message1);
        this.name = "AssertionError";
    }
}
function assert1(expr, msg = "") {
    if (!expr) {
        throw new AssertionError(msg);
    }
}
const DEFAULT_BUFFER_SIZE = 32 * 1024;
async function readAll(r) {
    const buf = new Buffer();
    await buf.readFrom(r);
    return buf.bytes();
}
async function writeAll(w, arr) {
    let nwritten = 0;
    while(nwritten < arr.length){
        nwritten += await w.write(arr.subarray(nwritten));
    }
}
function writeAllSync(w, arr) {
    let nwritten = 0;
    while(nwritten < arr.length){
        nwritten += w.writeSync(arr.subarray(nwritten));
    }
}
async function* iter(r, options2) {
    const bufSize = options2?.bufSize ?? DEFAULT_BUFFER_SIZE;
    const b = new Uint8Array(bufSize);
    while(true){
        const result = await r.read(b);
        if (result === null) {
            break;
        }
        yield b.subarray(0, result);
    }
}
async function copy1(src, dst, options2) {
    let n = 0;
    const bufSize = options2?.bufSize ?? DEFAULT_BUFFER_SIZE;
    const b = new Uint8Array(bufSize);
    let gotEOF = false;
    while(gotEOF === false){
        const result = await src.read(b);
        if (result === null) {
            gotEOF = true;
        } else {
            let nwritten = 0;
            while(nwritten < result){
                nwritten += await dst.write(b.subarray(nwritten, result));
            }
            n += nwritten;
        }
    }
    return n;
}
const DEFAULT_BUF_SIZE = 4096;
const MIN_BUF_SIZE = 16;
const CR = "\r".charCodeAt(0);
const LF = "\n".charCodeAt(0);
class BufferFullError extends Error {
    partial;
    name = "BufferFullError";
    constructor(partial1){
        super("Buffer full");
        this.partial = partial1;
    }
}
class PartialReadError extends Error {
    name = "PartialReadError";
    partial;
    constructor(){
        super("Encountered UnexpectedEof, data only partially read");
    }
}
class BufReader {
    buf;
    rd;
    r = 0;
    w = 0;
    eof = false;
    static create(r, size = 4096) {
        return r instanceof BufReader ? r : new BufReader(r, size);
    }
    constructor(rd1, size1 = 4096){
        if (size1 < 16) {
            size1 = MIN_BUF_SIZE;
        }
        this._reset(new Uint8Array(size1), rd1);
    }
    size() {
        return this.buf.byteLength;
    }
    buffered() {
        return this.w - this.r;
    }
    async _fill() {
        if (this.r > 0) {
            this.buf.copyWithin(0, this.r, this.w);
            this.w -= this.r;
            this.r = 0;
        }
        if (this.w >= this.buf.byteLength) {
            throw Error("bufio: tried to fill full buffer");
        }
        for(let i = 100; i > 0; i--){
            const rr = await this.rd.read(this.buf.subarray(this.w));
            if (rr === null) {
                this.eof = true;
                return;
            }
            assert(rr >= 0, "negative read");
            this.w += rr;
            if (rr > 0) {
                return;
            }
        }
        throw new Error(`No progress after ${100} read() calls`);
    }
    reset(r) {
        this._reset(this.buf, r);
    }
    _reset(buf, rd) {
        this.buf = buf;
        this.rd = rd;
        this.eof = false;
    }
    async read(p) {
        let rr = p.byteLength;
        if (p.byteLength === 0) return rr;
        if (this.r === this.w) {
            if (p.byteLength >= this.buf.byteLength) {
                const rr1 = await this.rd.read(p);
                const nread = rr1 ?? 0;
                assert(nread >= 0, "negative read");
                return rr1;
            }
            this.r = 0;
            this.w = 0;
            rr = await this.rd.read(this.buf);
            if (rr === 0 || rr === null) return rr;
            assert(rr >= 0, "negative read");
            this.w += rr;
        }
        const copied = copy(this.buf.subarray(this.r, this.w), p, 0);
        this.r += copied;
        return copied;
    }
    async readFull(p) {
        let bytesRead = 0;
        while(bytesRead < p.length){
            try {
                const rr = await this.read(p.subarray(bytesRead));
                if (rr === null) {
                    if (bytesRead === 0) {
                        return null;
                    } else {
                        throw new PartialReadError();
                    }
                }
                bytesRead += rr;
            } catch (err) {
                err.partial = p.subarray(0, bytesRead);
                throw err;
            }
        }
        return p;
    }
    async readByte() {
        while(this.r === this.w){
            if (this.eof) return null;
            await this._fill();
        }
        const c = this.buf[this.r];
        this.r++;
        return c;
    }
    async readString(delim) {
        if (delim.length !== 1) {
            throw new Error("Delimiter should be a single character");
        }
        const buffer = await this.readSlice(delim.charCodeAt(0));
        if (buffer === null) return null;
        return new TextDecoder().decode(buffer);
    }
    async readLine() {
        let line;
        try {
            line = await this.readSlice(LF);
        } catch (err) {
            if (err instanceof Deno.errors.BadResource) {
                throw err;
            }
            let { partial: partial2  } = err;
            assert(partial2 instanceof Uint8Array, "bufio: caught error from `readSlice()` without `partial` property");
            if (!(err instanceof BufferFullError)) {
                throw err;
            }
            if (!this.eof && partial2.byteLength > 0 && partial2[partial2.byteLength - 1] === CR) {
                assert(this.r > 0, "bufio: tried to rewind past start of buffer");
                this.r--;
                partial2 = partial2.subarray(0, partial2.byteLength - 1);
            }
            return {
                line: partial2,
                more: !this.eof
            };
        }
        if (line === null) {
            return null;
        }
        if (line.byteLength === 0) {
            return {
                line,
                more: false
            };
        }
        if (line[line.byteLength - 1] == LF) {
            let drop = 1;
            if (line.byteLength > 1 && line[line.byteLength - 2] === CR) {
                drop = 2;
            }
            line = line.subarray(0, line.byteLength - drop);
        }
        return {
            line,
            more: false
        };
    }
    async readSlice(delim) {
        let s = 0;
        let slice;
        while(true){
            let i = this.buf.subarray(this.r + s, this.w).indexOf(delim);
            if (i >= 0) {
                i += s;
                slice = this.buf.subarray(this.r, this.r + i + 1);
                this.r += i + 1;
                break;
            }
            if (this.eof) {
                if (this.r === this.w) {
                    return null;
                }
                slice = this.buf.subarray(this.r, this.w);
                this.r = this.w;
                break;
            }
            if (this.buffered() >= this.buf.byteLength) {
                this.r = this.w;
                const oldbuf = this.buf;
                const newbuf = this.buf.slice(0);
                this.buf = newbuf;
                throw new BufferFullError(oldbuf);
            }
            s = this.w - this.r;
            try {
                await this._fill();
            } catch (err) {
                err.partial = slice;
                throw err;
            }
        }
        return slice;
    }
    async peek(n) {
        if (n < 0) {
            throw Error("negative count");
        }
        let avail = this.w - this.r;
        while(avail < n && avail < this.buf.byteLength && !this.eof){
            try {
                await this._fill();
            } catch (err) {
                err.partial = this.buf.subarray(this.r, this.w);
                throw err;
            }
            avail = this.w - this.r;
        }
        if (avail === 0 && this.eof) {
            return null;
        } else if (avail < n && this.eof) {
            return this.buf.subarray(this.r, this.r + avail);
        } else if (avail < n) {
            throw new BufferFullError(this.buf.subarray(this.r, this.w));
        }
        return this.buf.subarray(this.r, this.r + n);
    }
}
class AbstractBufBase {
    buf;
    usedBufferBytes = 0;
    err = null;
    size() {
        return this.buf.byteLength;
    }
    available() {
        return this.buf.byteLength - this.usedBufferBytes;
    }
    buffered() {
        return this.usedBufferBytes;
    }
}
class BufWriter extends AbstractBufBase {
    writer;
    static create(writer, size = 4096) {
        return writer instanceof BufWriter ? writer : new BufWriter(writer, size);
    }
    constructor(writer1, size2 = 4096){
        super();
        this.writer = writer1;
        if (size2 <= 0) {
            size2 = DEFAULT_BUF_SIZE;
        }
        this.buf = new Uint8Array(size2);
    }
    reset(w) {
        this.err = null;
        this.usedBufferBytes = 0;
        this.writer = w;
    }
    async flush() {
        if (this.err !== null) throw this.err;
        if (this.usedBufferBytes === 0) return;
        try {
            await writeAll(this.writer, this.buf.subarray(0, this.usedBufferBytes));
        } catch (e) {
            this.err = e;
            throw e;
        }
        this.buf = new Uint8Array(this.buf.length);
        this.usedBufferBytes = 0;
    }
    async write(data) {
        if (this.err !== null) throw this.err;
        if (data.length === 0) return 0;
        let totalBytesWritten = 0;
        let numBytesWritten = 0;
        while(data.byteLength > this.available()){
            if (this.buffered() === 0) {
                try {
                    numBytesWritten = await this.writer.write(data);
                } catch (e) {
                    this.err = e;
                    throw e;
                }
            } else {
                numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
                this.usedBufferBytes += numBytesWritten;
                await this.flush();
            }
            totalBytesWritten += numBytesWritten;
            data = data.subarray(numBytesWritten);
        }
        numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
        this.usedBufferBytes += numBytesWritten;
        totalBytesWritten += numBytesWritten;
        return totalBytesWritten;
    }
}
class BufWriterSync extends AbstractBufBase {
    writer;
    static create(writer, size = 4096) {
        return writer instanceof BufWriterSync ? writer : new BufWriterSync(writer, size);
    }
    constructor(writer2, size3 = 4096){
        super();
        this.writer = writer2;
        if (size3 <= 0) {
            size3 = DEFAULT_BUF_SIZE;
        }
        this.buf = new Uint8Array(size3);
    }
    reset(w) {
        this.err = null;
        this.usedBufferBytes = 0;
        this.writer = w;
    }
    flush() {
        if (this.err !== null) throw this.err;
        if (this.usedBufferBytes === 0) return;
        try {
            writeAllSync(this.writer, this.buf.subarray(0, this.usedBufferBytes));
        } catch (e) {
            this.err = e;
            throw e;
        }
        this.buf = new Uint8Array(this.buf.length);
        this.usedBufferBytes = 0;
    }
    writeSync(data) {
        if (this.err !== null) throw this.err;
        if (data.length === 0) return 0;
        let totalBytesWritten = 0;
        let numBytesWritten = 0;
        while(data.byteLength > this.available()){
            if (this.buffered() === 0) {
                try {
                    numBytesWritten = this.writer.writeSync(data);
                } catch (e) {
                    this.err = e;
                    throw e;
                }
            } else {
                numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
                this.usedBufferBytes += numBytesWritten;
                this.flush();
            }
            totalBytesWritten += numBytesWritten;
            data = data.subarray(numBytesWritten);
        }
        numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
        this.usedBufferBytes += numBytesWritten;
        totalBytesWritten += numBytesWritten;
        return totalBytesWritten;
    }
}
const CHAR_SPACE = " ".charCodeAt(0);
const CHAR_TAB = "\t".charCodeAt(0);
const CHAR_COLON = ":".charCodeAt(0);
const WHITESPACES = [
    CHAR_SPACE,
    CHAR_TAB
];
const decoder = new TextDecoder();
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/g;
function str(buf) {
    return !buf ? "" : decoder.decode(buf);
}
class TextProtoReader {
    r;
    constructor(r1){
        this.r = r1;
    }
    async readLine() {
        const s = await this.readLineSlice();
        return s === null ? null : str(s);
    }
    async readMIMEHeader() {
        const m = new Headers();
        let line;
        let buf = await this.r.peek(1);
        if (buf === null) {
            return null;
        } else if (WHITESPACES.includes(buf[0])) {
            line = await this.readLineSlice();
        }
        buf = await this.r.peek(1);
        if (buf === null) {
            throw new Deno.errors.UnexpectedEof();
        } else if (WHITESPACES.includes(buf[0])) {
            throw new Deno.errors.InvalidData(`malformed MIME header initial line: ${str(line)}`);
        }
        while(true){
            const kv = await this.readLineSlice();
            if (kv === null) throw new Deno.errors.UnexpectedEof();
            if (kv.byteLength === 0) return m;
            let i = kv.indexOf(CHAR_COLON);
            if (i < 0) {
                throw new Deno.errors.InvalidData(`malformed MIME header line: ${str(kv)}`);
            }
            const key = str(kv.subarray(0, i));
            if (key == "") {
                continue;
            }
            i++;
            while(i < kv.byteLength && WHITESPACES.includes(kv[i])){
                i++;
            }
            const value1 = str(kv.subarray(i)).replace(invalidHeaderCharRegex, encodeURI);
            try {
                m.append(key, value1);
            } catch  {
            }
        }
    }
    async readLineSlice() {
        let line = new Uint8Array(0);
        let r1 = null;
        do {
            r1 = await this.r.readLine();
            if (r1 !== null && this.skipSpace(r1.line) !== 0) {
                line = concat(line, r1.line);
            }
        }while (r1 !== null && r1.more)
        return r1 === null ? null : line;
    }
    skipSpace(l) {
        let n = 0;
        for (const val of l){
            if (!WHITESPACES.includes(val)) {
                n++;
            }
        }
        return n;
    }
}
var Status;
(function(Status1) {
    Status1[Status1["Continue"] = 100] = "Continue";
    Status1[Status1["SwitchingProtocols"] = 101] = "SwitchingProtocols";
    Status1[Status1["Processing"] = 102] = "Processing";
    Status1[Status1["EarlyHints"] = 103] = "EarlyHints";
    Status1[Status1["OK"] = 200] = "OK";
    Status1[Status1["Created"] = 201] = "Created";
    Status1[Status1["Accepted"] = 202] = "Accepted";
    Status1[Status1["NonAuthoritativeInfo"] = 203] = "NonAuthoritativeInfo";
    Status1[Status1["NoContent"] = 204] = "NoContent";
    Status1[Status1["ResetContent"] = 205] = "ResetContent";
    Status1[Status1["PartialContent"] = 206] = "PartialContent";
    Status1[Status1["MultiStatus"] = 207] = "MultiStatus";
    Status1[Status1["AlreadyReported"] = 208] = "AlreadyReported";
    Status1[Status1["IMUsed"] = 226] = "IMUsed";
    Status1[Status1["MultipleChoices"] = 300] = "MultipleChoices";
    Status1[Status1["MovedPermanently"] = 301] = "MovedPermanently";
    Status1[Status1["Found"] = 302] = "Found";
    Status1[Status1["SeeOther"] = 303] = "SeeOther";
    Status1[Status1["NotModified"] = 304] = "NotModified";
    Status1[Status1["UseProxy"] = 305] = "UseProxy";
    Status1[Status1["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    Status1[Status1["PermanentRedirect"] = 308] = "PermanentRedirect";
    Status1[Status1["BadRequest"] = 400] = "BadRequest";
    Status1[Status1["Unauthorized"] = 401] = "Unauthorized";
    Status1[Status1["PaymentRequired"] = 402] = "PaymentRequired";
    Status1[Status1["Forbidden"] = 403] = "Forbidden";
    Status1[Status1["NotFound"] = 404] = "NotFound";
    Status1[Status1["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    Status1[Status1["NotAcceptable"] = 406] = "NotAcceptable";
    Status1[Status1["ProxyAuthRequired"] = 407] = "ProxyAuthRequired";
    Status1[Status1["RequestTimeout"] = 408] = "RequestTimeout";
    Status1[Status1["Conflict"] = 409] = "Conflict";
    Status1[Status1["Gone"] = 410] = "Gone";
    Status1[Status1["LengthRequired"] = 411] = "LengthRequired";
    Status1[Status1["PreconditionFailed"] = 412] = "PreconditionFailed";
    Status1[Status1["RequestEntityTooLarge"] = 413] = "RequestEntityTooLarge";
    Status1[Status1["RequestURITooLong"] = 414] = "RequestURITooLong";
    Status1[Status1["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    Status1[Status1["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
    Status1[Status1["ExpectationFailed"] = 417] = "ExpectationFailed";
    Status1[Status1["Teapot"] = 418] = "Teapot";
    Status1[Status1["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    Status1[Status1["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    Status1[Status1["Locked"] = 423] = "Locked";
    Status1[Status1["FailedDependency"] = 424] = "FailedDependency";
    Status1[Status1["TooEarly"] = 425] = "TooEarly";
    Status1[Status1["UpgradeRequired"] = 426] = "UpgradeRequired";
    Status1[Status1["PreconditionRequired"] = 428] = "PreconditionRequired";
    Status1[Status1["TooManyRequests"] = 429] = "TooManyRequests";
    Status1[Status1["RequestHeaderFieldsTooLarge"] = 431] = "RequestHeaderFieldsTooLarge";
    Status1[Status1["UnavailableForLegalReasons"] = 451] = "UnavailableForLegalReasons";
    Status1[Status1["InternalServerError"] = 500] = "InternalServerError";
    Status1[Status1["NotImplemented"] = 501] = "NotImplemented";
    Status1[Status1["BadGateway"] = 502] = "BadGateway";
    Status1[Status1["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    Status1[Status1["GatewayTimeout"] = 504] = "GatewayTimeout";
    Status1[Status1["HTTPVersionNotSupported"] = 505] = "HTTPVersionNotSupported";
    Status1[Status1["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    Status1[Status1["InsufficientStorage"] = 507] = "InsufficientStorage";
    Status1[Status1["LoopDetected"] = 508] = "LoopDetected";
    Status1[Status1["NotExtended"] = 510] = "NotExtended";
    Status1[Status1["NetworkAuthenticationRequired"] = 511] = "NetworkAuthenticationRequired";
})(Status || (Status = {
}));
const STATUS_TEXT = new Map([
    [
        Status.Continue,
        "Continue"
    ],
    [
        Status.SwitchingProtocols,
        "Switching Protocols"
    ],
    [
        Status.Processing,
        "Processing"
    ],
    [
        Status.EarlyHints,
        "Early Hints"
    ],
    [
        Status.OK,
        "OK"
    ],
    [
        Status.Created,
        "Created"
    ],
    [
        Status.Accepted,
        "Accepted"
    ],
    [
        Status.NonAuthoritativeInfo,
        "Non-Authoritative Information"
    ],
    [
        Status.NoContent,
        "No Content"
    ],
    [
        Status.ResetContent,
        "Reset Content"
    ],
    [
        Status.PartialContent,
        "Partial Content"
    ],
    [
        Status.MultiStatus,
        "Multi-Status"
    ],
    [
        Status.AlreadyReported,
        "Already Reported"
    ],
    [
        Status.IMUsed,
        "IM Used"
    ],
    [
        Status.MultipleChoices,
        "Multiple Choices"
    ],
    [
        Status.MovedPermanently,
        "Moved Permanently"
    ],
    [
        Status.Found,
        "Found"
    ],
    [
        Status.SeeOther,
        "See Other"
    ],
    [
        Status.NotModified,
        "Not Modified"
    ],
    [
        Status.UseProxy,
        "Use Proxy"
    ],
    [
        Status.TemporaryRedirect,
        "Temporary Redirect"
    ],
    [
        Status.PermanentRedirect,
        "Permanent Redirect"
    ],
    [
        Status.BadRequest,
        "Bad Request"
    ],
    [
        Status.Unauthorized,
        "Unauthorized"
    ],
    [
        Status.PaymentRequired,
        "Payment Required"
    ],
    [
        Status.Forbidden,
        "Forbidden"
    ],
    [
        Status.NotFound,
        "Not Found"
    ],
    [
        Status.MethodNotAllowed,
        "Method Not Allowed"
    ],
    [
        Status.NotAcceptable,
        "Not Acceptable"
    ],
    [
        Status.ProxyAuthRequired,
        "Proxy Authentication Required"
    ],
    [
        Status.RequestTimeout,
        "Request Timeout"
    ],
    [
        Status.Conflict,
        "Conflict"
    ],
    [
        Status.Gone,
        "Gone"
    ],
    [
        Status.LengthRequired,
        "Length Required"
    ],
    [
        Status.PreconditionFailed,
        "Precondition Failed"
    ],
    [
        Status.RequestEntityTooLarge,
        "Request Entity Too Large"
    ],
    [
        Status.RequestURITooLong,
        "Request URI Too Long"
    ],
    [
        Status.UnsupportedMediaType,
        "Unsupported Media Type"
    ],
    [
        Status.RequestedRangeNotSatisfiable,
        "Requested Range Not Satisfiable"
    ],
    [
        Status.ExpectationFailed,
        "Expectation Failed"
    ],
    [
        Status.Teapot,
        "I'm a teapot"
    ],
    [
        Status.MisdirectedRequest,
        "Misdirected Request"
    ],
    [
        Status.UnprocessableEntity,
        "Unprocessable Entity"
    ],
    [
        Status.Locked,
        "Locked"
    ],
    [
        Status.FailedDependency,
        "Failed Dependency"
    ],
    [
        Status.TooEarly,
        "Too Early"
    ],
    [
        Status.UpgradeRequired,
        "Upgrade Required"
    ],
    [
        Status.PreconditionRequired,
        "Precondition Required"
    ],
    [
        Status.TooManyRequests,
        "Too Many Requests"
    ],
    [
        Status.RequestHeaderFieldsTooLarge,
        "Request Header Fields Too Large"
    ],
    [
        Status.UnavailableForLegalReasons,
        "Unavailable For Legal Reasons"
    ],
    [
        Status.InternalServerError,
        "Internal Server Error"
    ],
    [
        Status.NotImplemented,
        "Not Implemented"
    ],
    [
        Status.BadGateway,
        "Bad Gateway"
    ],
    [
        Status.ServiceUnavailable,
        "Service Unavailable"
    ],
    [
        Status.GatewayTimeout,
        "Gateway Timeout"
    ],
    [
        Status.HTTPVersionNotSupported,
        "HTTP Version Not Supported"
    ],
    [
        Status.VariantAlsoNegotiates,
        "Variant Also Negotiates"
    ],
    [
        Status.InsufficientStorage,
        "Insufficient Storage"
    ],
    [
        Status.LoopDetected,
        "Loop Detected"
    ],
    [
        Status.NotExtended,
        "Not Extended"
    ],
    [
        Status.NetworkAuthenticationRequired,
        "Network Authentication Required"
    ], 
]);
function deferred() {
    let methods;
    let state = "pending";
    const promise = new Promise((resolve, reject)=>{
        methods = {
            async resolve (value) {
                await value;
                state = "fulfilled";
                resolve(value);
            },
            reject (reason) {
                state = "rejected";
                reject(reason);
            }
        };
    });
    Object.defineProperty(promise, "state", {
        get: ()=>state
    });
    return Object.assign(promise, methods);
}
class MuxAsyncIterator {
    iteratorCount = 0;
    yields = [];
    throws = [];
    signal = deferred();
    add(iterable) {
        ++this.iteratorCount;
        this.callIteratorNext(iterable[Symbol.asyncIterator]());
    }
    async callIteratorNext(iterator) {
        try {
            const { value: value1 , done  } = await iterator.next();
            if (done) {
                --this.iteratorCount;
            } else {
                this.yields.push({
                    iterator,
                    value: value1
                });
            }
        } catch (e) {
            this.throws.push(e);
        }
        this.signal.resolve();
    }
    async *iterate() {
        while(this.iteratorCount > 0){
            await this.signal;
            for(let i = 0; i < this.yields.length; i++){
                const { iterator , value: value1  } = this.yields[i];
                yield value1;
                this.callIteratorNext(iterator);
            }
            if (this.throws.length) {
                for (const e of this.throws){
                    throw e;
                }
                this.throws.length = 0;
            }
            this.yields.length = 0;
            this.signal = deferred();
        }
    }
    [Symbol.asyncIterator]() {
        return this.iterate();
    }
}
const noop1 = ()=>{
};
class AsyncIterableClone {
    currentPromise;
    resolveCurrent = noop1;
    consumed;
    consume = noop1;
    constructor(){
        this.currentPromise = new Promise((resolve)=>{
            this.resolveCurrent = resolve;
        });
        this.consumed = new Promise((resolve)=>{
            this.consume = resolve;
        });
    }
    reset() {
        this.currentPromise = new Promise((resolve)=>{
            this.resolveCurrent = resolve;
        });
        this.consumed = new Promise((resolve)=>{
            this.consume = resolve;
        });
    }
    async next() {
        const res = await this.currentPromise;
        this.consume();
        this.reset();
        return res;
    }
    async push(res) {
        this.resolveCurrent(res);
        await this.consumed;
    }
    [Symbol.asyncIterator]() {
        return this;
    }
}
class DeadlineError extends Error {
    constructor(){
        super("Deadline");
        this.name = "DeadlineError";
    }
}
const encoder = new TextEncoder();
function emptyReader() {
    return {
        read (_) {
            return Promise.resolve(null);
        }
    };
}
function bodyReader(contentLength, r1) {
    let totalRead = 0;
    let finished = false;
    async function read(buf) {
        if (finished) return null;
        let result;
        const remaining = contentLength - totalRead;
        if (remaining >= buf.byteLength) {
            result = await r1.read(buf);
        } else {
            const readBuf = buf.subarray(0, remaining);
            result = await r1.read(readBuf);
        }
        if (result !== null) {
            totalRead += result;
        }
        finished = totalRead === contentLength;
        return result;
    }
    return {
        read
    };
}
function chunkedBodyReader(h, r1) {
    const tp = new TextProtoReader(r1);
    let finished = false;
    const chunks = [];
    async function read(buf) {
        if (finished) return null;
        const [chunk] = chunks;
        if (chunk) {
            const chunkRemaining = chunk.data.byteLength - chunk.offset;
            const readLength = Math.min(chunkRemaining, buf.byteLength);
            for(let i = 0; i < readLength; i++){
                buf[i] = chunk.data[chunk.offset + i];
            }
            chunk.offset += readLength;
            if (chunk.offset === chunk.data.byteLength) {
                chunks.shift();
                if (await tp.readLine() === null) {
                    throw new Deno.errors.UnexpectedEof();
                }
            }
            return readLength;
        }
        const line = await tp.readLine();
        if (line === null) throw new Deno.errors.UnexpectedEof();
        const [chunkSizeString] = line.split(";");
        const chunkSize = parseInt(chunkSizeString, 16);
        if (Number.isNaN(chunkSize) || chunkSize < 0) {
            throw new Deno.errors.InvalidData("Invalid chunk size");
        }
        if (chunkSize > 0) {
            if (chunkSize > buf.byteLength) {
                let eof = await r1.readFull(buf);
                if (eof === null) {
                    throw new Deno.errors.UnexpectedEof();
                }
                const restChunk = new Uint8Array(chunkSize - buf.byteLength);
                eof = await r1.readFull(restChunk);
                if (eof === null) {
                    throw new Deno.errors.UnexpectedEof();
                } else {
                    chunks.push({
                        offset: 0,
                        data: restChunk
                    });
                }
                return buf.byteLength;
            } else {
                const bufToFill = buf.subarray(0, chunkSize);
                const eof = await r1.readFull(bufToFill);
                if (eof === null) {
                    throw new Deno.errors.UnexpectedEof();
                }
                if (await tp.readLine() === null) {
                    throw new Deno.errors.UnexpectedEof();
                }
                return chunkSize;
            }
        } else {
            assert(chunkSize === 0);
            if (await r1.readLine() === null) {
                throw new Deno.errors.UnexpectedEof();
            }
            await readTrailers(h, r1);
            finished = true;
            return null;
        }
    }
    return {
        read
    };
}
function isProhibidedForTrailer(key) {
    const s = new Set([
        "transfer-encoding",
        "content-length",
        "trailer"
    ]);
    return s.has(key.toLowerCase());
}
async function readTrailers(headers, r1) {
    const trailers = parseTrailer(headers.get("trailer"));
    if (trailers == null) return;
    const trailerNames = [
        ...trailers.keys()
    ];
    const tp = new TextProtoReader(r1);
    const result = await tp.readMIMEHeader();
    if (result == null) {
        throw new Deno.errors.InvalidData("Missing trailer header.");
    }
    const undeclared = [
        ...result.keys()
    ].filter((k)=>!trailerNames.includes(k)
    );
    if (undeclared.length > 0) {
        throw new Deno.errors.InvalidData(`Undeclared trailers: ${Deno.inspect(undeclared)}.`);
    }
    for (const [k, v] of result){
        headers.append(k, v);
    }
    const missingTrailers = trailerNames.filter((k1)=>!result.has(k1)
    );
    if (missingTrailers.length > 0) {
        throw new Deno.errors.InvalidData(`Missing trailers: ${Deno.inspect(missingTrailers)}.`);
    }
    headers.delete("trailer");
}
function parseTrailer(field) {
    if (field == null) {
        return undefined;
    }
    const trailerNames = field.split(",").map((v)=>v.trim().toLowerCase()
    );
    if (trailerNames.length === 0) {
        throw new Deno.errors.InvalidData("Empty trailer header.");
    }
    const prohibited = trailerNames.filter((k)=>isProhibidedForTrailer(k)
    );
    if (prohibited.length > 0) {
        throw new Deno.errors.InvalidData(`Prohibited trailer names: ${Deno.inspect(prohibited)}.`);
    }
    return new Headers(trailerNames.map((key)=>[
            key,
            ""
        ]
    ));
}
async function writeChunkedBody(w, r1) {
    for await (const chunk of iter(r1)){
        if (chunk.byteLength <= 0) continue;
        const start = encoder.encode(`${chunk.byteLength.toString(16)}\r\n`);
        const end = encoder.encode("\r\n");
        await w.write(start);
        await w.write(chunk);
        await w.write(end);
        await w.flush();
    }
    const endChunk = encoder.encode("0\r\n\r\n");
    await w.write(endChunk);
}
async function writeTrailers(w, headers, trailers) {
    const trailer = headers.get("trailer");
    if (trailer === null) {
        throw new TypeError("Missing trailer header.");
    }
    const transferEncoding = headers.get("transfer-encoding");
    if (transferEncoding === null || !transferEncoding.match(/^chunked/)) {
        throw new TypeError(`Trailers are only allowed for "transfer-encoding: chunked", got "transfer-encoding: ${transferEncoding}".`);
    }
    const writer3 = BufWriter.create(w);
    const trailerNames = trailer.split(",").map((s)=>s.trim().toLowerCase()
    );
    const prohibitedTrailers = trailerNames.filter((k)=>isProhibidedForTrailer(k)
    );
    if (prohibitedTrailers.length > 0) {
        throw new TypeError(`Prohibited trailer names: ${Deno.inspect(prohibitedTrailers)}.`);
    }
    const undeclared = [
        ...trailers.keys()
    ].filter((k)=>!trailerNames.includes(k)
    );
    if (undeclared.length > 0) {
        throw new TypeError(`Undeclared trailers: ${Deno.inspect(undeclared)}.`);
    }
    for (const [key, value1] of trailers){
        await writer3.write(encoder.encode(`${key}: ${value1}\r\n`));
    }
    await writer3.write(encoder.encode("\r\n"));
    await writer3.flush();
}
async function writeResponse(w, r1) {
    const protoMajor = 1;
    const protoMinor = 1;
    const statusCode = r1.status || 200;
    const statusText = (r1.statusText ?? STATUS_TEXT.get(statusCode)) ?? null;
    const writer3 = BufWriter.create(w);
    if (statusText === null) {
        throw new Deno.errors.InvalidData("Empty statusText (explicitely pass an empty string if this was intentional)");
    }
    if (!r1.body) {
        r1.body = new Uint8Array();
    }
    if (typeof r1.body === "string") {
        r1.body = encoder.encode(r1.body);
    }
    let out = `HTTP/${1}.${1} ${statusCode} ${statusText}\r\n`;
    const headers = r1.headers ?? new Headers();
    if (r1.body && !headers.get("content-length")) {
        if (r1.body instanceof Uint8Array) {
            out += `content-length: ${r1.body.byteLength}\r\n`;
        } else if (!headers.get("transfer-encoding")) {
            out += "transfer-encoding: chunked\r\n";
        }
    }
    for (const [key, value1] of headers){
        out += `${key}: ${value1}\r\n`;
    }
    out += `\r\n`;
    const header = encoder.encode(out);
    const n = await writer3.write(header);
    assert(n === header.byteLength);
    if (r1.body instanceof Uint8Array) {
        const n1 = await writer3.write(r1.body);
        assert(n1 === r1.body.byteLength);
    } else if (headers.has("content-length")) {
        const contentLength = headers.get("content-length");
        assert(contentLength != null);
        const bodyLength = parseInt(contentLength);
        const n1 = await copy1(r1.body, writer3);
        assert(n1 === bodyLength);
    } else {
        await writeChunkedBody(writer3, r1.body);
    }
    if (r1.trailers) {
        const t = await r1.trailers();
        await writeTrailers(writer3, headers, t);
    }
    await writer3.flush();
}
class ServerRequest {
    url;
    method;
    proto;
    protoMinor;
    protoMajor;
    headers;
    conn;
    r;
    w;
    #done = deferred();
    #contentLength = undefined;
    #body = undefined;
    #finalized = false;
    get done() {
        return this.#done.then((e)=>e
        );
    }
    get contentLength() {
        if (this.#contentLength === undefined) {
            const cl = this.headers.get("content-length");
            if (cl) {
                this.#contentLength = parseInt(cl);
                if (Number.isNaN(this.#contentLength)) {
                    this.#contentLength = null;
                }
            } else {
                this.#contentLength = null;
            }
        }
        return this.#contentLength;
    }
    get body() {
        if (!this.#body) {
            if (this.contentLength != null) {
                this.#body = bodyReader(this.contentLength, this.r);
            } else {
                const transferEncoding = this.headers.get("transfer-encoding");
                if (transferEncoding != null) {
                    const parts = transferEncoding.split(",").map((e)=>e.trim().toLowerCase()
                    );
                    assert(parts.includes("chunked"), 'transfer-encoding must include "chunked" if content-length is not set');
                    this.#body = chunkedBodyReader(this.headers, this.r);
                } else {
                    this.#body = emptyReader();
                }
            }
        }
        return this.#body;
    }
    async respond(r) {
        let err;
        try {
            await writeResponse(this.w, r);
        } catch (e) {
            try {
                this.conn.close();
            } catch  {
            }
            err = e;
        }
        this.#done.resolve(err);
        if (err) {
            throw err;
        }
    }
    async finalize() {
        if (this.#finalized) return;
        const body = this.body;
        const buf = new Uint8Array(1024);
        while(await body.read(buf) !== null){
        }
        this.#finalized = true;
    }
}
function parseHTTPVersion(vers) {
    switch(vers){
        case "HTTP/1.1":
            return [
                1,
                1
            ];
        case "HTTP/1.0":
            return [
                1,
                0
            ];
        default:
            {
                const Big = 1000000;
                if (!vers.startsWith("HTTP/")) {
                    break;
                }
                const dot = vers.indexOf(".");
                if (dot < 0) {
                    break;
                }
                const majorStr = vers.substring(vers.indexOf("/") + 1, dot);
                const major = Number(majorStr);
                if (!Number.isInteger(major) || major < 0 || major > 1000000) {
                    break;
                }
                const minorStr = vers.substring(dot + 1);
                const minor = Number(minorStr);
                if (!Number.isInteger(minor) || minor < 0 || minor > 1000000) {
                    break;
                }
                return [
                    major,
                    minor
                ];
            }
    }
    throw new Error(`malformed HTTP version ${vers}`);
}
async function readRequest(conn, bufr) {
    const tp = new TextProtoReader(bufr);
    const firstLine = await tp.readLine();
    if (firstLine === null) return null;
    const headers = await tp.readMIMEHeader();
    if (headers === null) throw new Deno.errors.UnexpectedEof();
    const req = new ServerRequest();
    req.conn = conn;
    req.r = bufr;
    [req.method, req.url, req.proto] = firstLine.split(" ", 3);
    [req.protoMajor, req.protoMinor] = parseHTTPVersion(req.proto);
    req.headers = headers;
    fixLength(req);
    return req;
}
class Server {
    listener;
    #closing = false;
    #connections = [];
    constructor(listener1){
        this.listener = listener1;
    }
    close() {
        this.#closing = true;
        this.listener.close();
        for (const conn of this.#connections){
            try {
                conn.close();
            } catch (e) {
                if (!(e instanceof Deno.errors.BadResource)) {
                    throw e;
                }
            }
        }
    }
    async *iterateHttpRequests(conn) {
        const reader = new BufReader(conn);
        const writer3 = new BufWriter(conn);
        while(!this.#closing){
            let request1;
            try {
                request1 = await readRequest(conn, reader);
            } catch (error) {
                if (error instanceof Deno.errors.InvalidData || error instanceof Deno.errors.UnexpectedEof) {
                    try {
                        await writeResponse(writer3, {
                            status: 400,
                            body: new TextEncoder().encode(`${error.message}\r\n\r\n`)
                        });
                    } catch  {
                    }
                }
                break;
            }
            if (request1 === null) {
                break;
            }
            request1.w = writer3;
            yield request1;
            const responseError = await request1.done;
            if (responseError) {
                this.untrackConnection(request1.conn);
                return;
            }
            try {
                await request1.finalize();
            } catch  {
                break;
            }
        }
        this.untrackConnection(conn);
        try {
            conn.close();
        } catch  {
        }
    }
    trackConnection(conn) {
        this.#connections.push(conn);
    }
    untrackConnection(conn) {
        const index = this.#connections.indexOf(conn);
        if (index !== -1) {
            this.#connections.splice(index, 1);
        }
    }
    async *acceptConnAndIterateHttpRequests(mux) {
        if (this.#closing) return;
        let conn;
        try {
            conn = await this.listener.accept();
        } catch (error) {
            if (error instanceof Deno.errors.BadResource || error instanceof Deno.errors.InvalidData || error instanceof Deno.errors.UnexpectedEof || error instanceof Deno.errors.ConnectionReset || error instanceof Deno.errors.NotConnected) {
                return mux.add(this.acceptConnAndIterateHttpRequests(mux));
            }
            throw error;
        }
        this.trackConnection(conn);
        mux.add(this.acceptConnAndIterateHttpRequests(mux));
        yield* this.iterateHttpRequests(conn);
    }
    [Symbol.asyncIterator]() {
        const mux = new MuxAsyncIterator();
        mux.add(this.acceptConnAndIterateHttpRequests(mux));
        return mux.iterate();
    }
}
function _parseAddrFromStr(addr) {
    let url;
    try {
        const host = addr.startsWith(":") ? `0.0.0.0${addr}` : addr;
        url = new URL(`http://${host}`);
    } catch  {
        throw new TypeError("Invalid address.");
    }
    if (url.username || url.password || url.pathname != "/" || url.search || url.hash) {
        throw new TypeError("Invalid address.");
    }
    return {
        hostname: url.hostname,
        port: url.port === "" ? 80 : Number(url.port)
    };
}
function serve(addr) {
    if (typeof addr === "string") {
        addr = _parseAddrFromStr(addr);
    }
    const listener1 = Deno.listen(addr);
    return new Server(listener1);
}
function serveTLS(options2) {
    const tlsOptions = {
        ...options2,
        transport: "tcp"
    };
    const listener1 = Deno.listenTls(tlsOptions);
    return new Server(listener1);
}
function fixLength(req) {
    const contentLength = req.headers.get("Content-Length");
    if (contentLength) {
        const arrClen = contentLength.split(",");
        if (arrClen.length > 1) {
            const distinct = [
                ...new Set(arrClen.map((e)=>e.trim()
                ))
            ];
            if (distinct.length > 1) {
                throw Error("cannot contain multiple Content-Length headers");
            } else {
                req.headers.set("Content-Length", distinct[0]);
            }
        }
        const c = req.headers.get("Content-Length");
        if (req.method === "HEAD" && c && c !== "0") {
            throw Error("http: method cannot contain a Content-Length");
        }
        if (c && req.headers.has("transfer-encoding")) {
            throw new Error("http: Transfer-Encoding and Content-Length cannot be send together");
        }
    }
}
class StringReader extends Buffer {
    constructor(s){
        super(new TextEncoder().encode(s).buffer);
    }
}
class MultiReader {
    readers;
    currentIndex = 0;
    constructor(...readers){
        this.readers = readers;
    }
    async read(p) {
        const r2 = this.readers[this.currentIndex];
        if (!r2) return null;
        const result = await r2.read(p);
        if (result === null) {
            this.currentIndex++;
            return 0;
        }
        return result;
    }
}
class LimitedReader {
    reader;
    limit;
    constructor(reader1, limit){
        this.reader = reader1;
        this.limit = limit;
    }
    async read(p) {
        if (this.limit <= 0) {
            return null;
        }
        if (p.length > this.limit) {
            p = p.subarray(0, this.limit);
        }
        const n = await this.reader.read(p);
        if (n == null) {
            return null;
        }
        this.limit -= n;
        return n;
    }
}
function readerFromStreamReader(streamReader) {
    const buffer = new Buffer();
    return {
        async read (p) {
            if (buffer.empty()) {
                const res = await streamReader.read();
                if (res.done) {
                    return null;
                }
                await writeAll(buffer, res.value);
            }
            return buffer.read(p);
        }
    };
}
const osType = (()=>{
    const { Deno  } = globalThis;
    if (typeof Deno?.build?.os === "string") {
        return Deno.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows = osType === "windows";
const CHAR_FORWARD_SLASH = 47;
function assertPath(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator(code) {
    return code === 47;
}
function isPathSeparator(code) {
    return isPosixPathSeparator(code) || code === 92;
}
function isWindowsDeviceRoot(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString(path, allowAboveRoot, separator, isPathSeparator1) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path.length; i <= len; ++i){
        if (i < len) code = path.charCodeAt(i);
        else if (isPathSeparator1(code)) break;
        else code = CHAR_FORWARD_SLASH;
        if (isPathSeparator1(code)) {
            if (lastSlash === i - 1 || dots === 1) {
            } else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
const WHITESPACE_ENCODINGS = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS[c] ?? c;
    });
}
const sep = "\\";
const delimiter = ";";
function resolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path;
        const { Deno  } = globalThis;
        if (i >= 0) {
            path = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno.cwd();
        } else {
            if (typeof Deno?.env?.get !== "function" || typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno.env.get(`=${resolvedDevice}`) || Deno.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator(code)) {
                isAbsolute = true;
                if (isPathSeparator(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            isAbsolute = true;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator(code)) {
        return true;
    } else if (isWindowsDeviceRoot(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path = paths[i];
        assertPath(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert(firstPart != null);
    if (isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize(joined);
}
function relative(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
    const fromOrig = resolve(from);
    const toOrig = resolve(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function dirname(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return path;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator(path.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path.slice(0, end);
}
function basename(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= start; --i){
            const code = path.charCodeAt(i);
            if (isPathSeparator(code)) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= start; --i){
            if (isPathSeparator(path.charCodeAt(i))) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname(path) {
    assertPath(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path.length - 1; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("\\", pathObject);
}
function parse5(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        ret.root = ret.dir = path;
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function toFileUrl(path) {
    if (!isAbsolute(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod1 = function() {
    return {
        sep: sep,
        delimiter: delimiter,
        resolve: resolve,
        normalize: normalize,
        isAbsolute: isAbsolute,
        join: join,
        relative: relative,
        toNamespacedPath: toNamespacedPath,
        dirname: dirname,
        basename: basename,
        extname: extname,
        format: format,
        parse: parse5,
        fromFileUrl: fromFileUrl,
        toFileUrl: toFileUrl
    };
}();
const sep1 = "/";
const delimiter1 = ":";
function resolve1(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = pathSegments[i];
        else {
            const { Deno  } = globalThis;
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno.cwd();
        }
        assertPath(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize1(path) {
    assertPath(path);
    if (path.length === 0) return ".";
    const isAbsolute1 = path.charCodeAt(0) === 47;
    const trailingSeparator = path.charCodeAt(path.length - 1) === 47;
    path = normalizeString(path, !isAbsolute1, "/", isPosixPathSeparator);
    if (path.length === 0 && !isAbsolute1) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute1) return `/${path}`;
    return path;
}
function isAbsolute1(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47;
}
function join1(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path = paths[i];
        assertPath(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize1(joined);
}
function relative1(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
    from = resolve1(from);
    to = resolve1(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 47) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath1(path) {
    return path;
}
function dirname1(path) {
    assertPath(path);
    if (path.length === 0) return ".";
    const hasRoot = path.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i = path.length - 1; i >= 1; --i){
        if (path.charCodeAt(i) === 47) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path.slice(0, end);
}
function basename1(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= 0; --i){
            const code = path.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= 0; --i){
            if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname1(path) {
    assertPath(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path.length - 1; i >= 0; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("/", pathObject);
}
function parse1(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute2 = path.charCodeAt(0) === 47;
    let start;
    if (isAbsolute2) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute2) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute2) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
    else if (isAbsolute2) ret.dir = "/";
    return ret;
}
function fromFileUrl1(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl1(path) {
    if (!isAbsolute1(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod2 = function() {
    return {
        sep: sep1,
        delimiter: delimiter1,
        resolve: resolve1,
        normalize: normalize1,
        isAbsolute: isAbsolute1,
        join: join1,
        relative: relative1,
        toNamespacedPath: toNamespacedPath1,
        dirname: dirname1,
        basename: basename1,
        extname: extname1,
        format: format1,
        parse: parse1,
        fromFileUrl: fromFileUrl1,
        toFileUrl: toFileUrl1
    };
}();
const path1 = isWindows ? mod1 : mod2;
const { basename: basename2 , delimiter: delimiter2 , dirname: dirname2 , extname: extname2 , format: format2 , fromFileUrl: fromFileUrl2 , isAbsolute: isAbsolute2 , join: join2 , normalize: normalize2 , parse: parse2 , relative: relative2 , resolve: resolve2 , sep: sep2 , toFileUrl: toFileUrl2 , toNamespacedPath: toNamespacedPath2 ,  } = path1;
function hasOwnProperty(obj, v) {
    if (obj == null) {
        return false;
    }
    return Object.prototype.hasOwnProperty.call(obj, v);
}
async function readShort(buf) {
    const high = await buf.readByte();
    if (high === null) return null;
    const low = await buf.readByte();
    if (low === null) throw new Deno.errors.UnexpectedEof();
    return high << 8 | low;
}
async function readInt(buf) {
    const high = await readShort(buf);
    if (high === null) return null;
    const low = await readShort(buf);
    if (low === null) throw new Deno.errors.UnexpectedEof();
    return high << 16 | low;
}
const MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);
async function readLong(buf) {
    const high = await readInt(buf);
    if (high === null) return null;
    const low = await readInt(buf);
    if (low === null) throw new Deno.errors.UnexpectedEof();
    const big = BigInt(high) << 32n | BigInt(low);
    if (big > MAX_SAFE_INTEGER) {
        throw new RangeError("Long value too big to be represented as a JavaScript number.");
    }
    return Number(big);
}
function sliceLongToBytes(d, dest = new Array(8)) {
    let big = BigInt(d);
    for(let i = 0; i < 8; i++){
        dest[7 - i] = Number(big & 255n);
        big >>= 8n;
    }
    return dest;
}
const data1 = decode("\
AGFzbQEAAAABnYGAgAAXYAAAYAABf2ABfwBgAX8Bf2ABfwF+YAJ/fwBgAn9/AX9gA39/fwBgA39/fw\
F/YAR/f39/AGAEf39/fwF/YAV/f39/fwBgBX9/f39/AX9gBn9/f39/fwBgBn9/f39/fwF/YAV/f39+\
fwBgB39/f35/f38Bf2AFf399f38AYAV/f3x/fwBgAn9+AGAEf31/fwBgBH98f38AYAJ+fwF/AtKFgI\
AADRhfX3diaW5kZ2VuX3BsYWNlaG9sZGVyX18aX193YmdfbmV3X2Y4NWRiZGZiOWNkYmUyZWMABhhf\
X3diaW5kZ2VuX3BsYWNlaG9sZGVyX18aX193YmluZGdlbl9vYmplY3RfZHJvcF9yZWYAAhhfX3diaW\
5kZ2VuX3BsYWNlaG9sZGVyX18hX193YmdfYnl0ZUxlbmd0aF9lMDUxNWJjOTRjZmM1ZGVlAAMYX193\
YmluZGdlbl9wbGFjZWhvbGRlcl9fIV9fd2JnX2J5dGVPZmZzZXRfNzdlZWM4NDcxNmEyZTczNwADGF\
9fd2JpbmRnZW5fcGxhY2Vob2xkZXJfXx1fX3diZ19idWZmZXJfMWM1OTE4YTRhYjY1NmZmNwADGF9f\
d2JpbmRnZW5fcGxhY2Vob2xkZXJfXzFfX3diZ19uZXd3aXRoYnl0ZW9mZnNldGFuZGxlbmd0aF9lNT\
dhZDFmMmNlODEyYzAzAAgYX193YmluZGdlbl9wbGFjZWhvbGRlcl9fHV9fd2JnX2xlbmd0aF8yZDU2\
Y2IzNzA3NWZjZmIxAAMYX193YmluZGdlbl9wbGFjZWhvbGRlcl9fEV9fd2JpbmRnZW5fbWVtb3J5AA\
EYX193YmluZGdlbl9wbGFjZWhvbGRlcl9fHV9fd2JnX2J1ZmZlcl85ZTE4NGQ2Zjc4NWRlNWVkAAMY\
X193YmluZGdlbl9wbGFjZWhvbGRlcl9fGl9fd2JnX25ld19lODEwMTMxOWU0Y2Y5NWZjAAMYX193Ym\
luZGdlbl9wbGFjZWhvbGRlcl9fGl9fd2JnX3NldF9lOGFlN2IyNzMxNGU4Yjk4AAcYX193YmluZGdl\
bl9wbGFjZWhvbGRlcl9fEF9fd2JpbmRnZW5fdGhyb3cABRhfX3diaW5kZ2VuX3BsYWNlaG9sZGVyX1\
8SX193YmluZGdlbl9yZXRocm93AAID/YCAgAB8BwkJBwcTBQUHAwUDBw8FEAIFAgUCCAYFEwgMBQUO\
BQIFAggFFgcFBQUHBwUFBQUHBQUFBQUNBQUFBQUFBQUFCQUNCQkGCwYGBwcHBwcFAAUCCAoHCAIFBQ\
IIAw4MCwwLCxESCQIICAYDBgYHBQUFAAAGAwYAAAUCBAAFAgSFgICAAAFwARYWBYOAgIAAAQARBomA\
gIAAAX8BQYCAwAALB7aCgIAADgZtZW1vcnkCAAZkaWdlc3QAQhhfX3diZ19kaWdlc3Rjb250ZXh0X2\
ZyZWUAXRFkaWdlc3Rjb250ZXh0X25ldwBRFGRpZ2VzdGNvbnRleHRfdXBkYXRlAGMUZGlnZXN0Y29u\
dGV4dF9kaWdlc3QATxxkaWdlc3Rjb250ZXh0X2RpZ2VzdEFuZFJlc2V0AFAbZGlnZXN0Y29udGV4dF\
9kaWdlc3RBbmREcm9wAEwTZGlnZXN0Y29udGV4dF9yZXNldAAfE2RpZ2VzdGNvbnRleHRfY2xvbmUA\
GB9fX3diaW5kZ2VuX2FkZF90b19zdGFja19wb2ludGVyAH8RX193YmluZGdlbl9tYWxsb2MAZxJfX3\
diaW5kZ2VuX3JlYWxsb2MAcg9fX3diaW5kZ2VuX2ZyZWUAewmfgICAAAEAQQELFXd2gAGHAX5pTmpr\
aHNwbG1ub4gBVFOFAXQKpoSIgAB8kFoCAX8ifiMAQYABayIDJAAgA0EAQYABEGYhAyAAKQM4IQQgAC\
kDMCEFIAApAyghBiAAKQMgIQcgACkDGCEIIAApAxAhCSAAKQMIIQogACkDACELAkAgAkUNACABIAJB\
B3RqIQIDQCADIAEpAAAiDEI4hiAMQiiGQoCAgICAgMD/AIOEIAxCGIZCgICAgIDgP4MgDEIIhkKAgI\
CA8B+DhIQgDEIIiEKAgID4D4MgDEIYiEKAgPwHg4QgDEIoiEKA/gODIAxCOIiEhIQ3AwAgAyABQQhq\
KQAAIgxCOIYgDEIohkKAgICAgIDA/wCDhCAMQhiGQoCAgICA4D+DIAxCCIZCgICAgPAfg4SEIAxCCI\
hCgICA+A+DIAxCGIhCgID8B4OEIAxCKIhCgP4DgyAMQjiIhISENwMIIAMgAUEQaikAACIMQjiGIAxC\
KIZCgICAgICAwP8Ag4QgDEIYhkKAgICAgOA/gyAMQgiGQoCAgIDwH4OEhCAMQgiIQoCAgPgPgyAMQh\
iIQoCA/AeDhCAMQiiIQoD+A4MgDEI4iISEhDcDECADIAFBGGopAAAiDEI4hiAMQiiGQoCAgICAgMD/\
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\
CyABKAIEIQVBmAMQFiIBRQ0VIARBuBBqIAVBgAEQYRogBEG4EGpBuAFqIAVBuAFqKQMANwMAIARBuB\
BqQbABaiAFQbABaikDADcDACAEQbgQakGoAWogBUGoAWopAwA3AwAgBEG4EGpBoAFqIAVBoAFqKQMA\
NwMAIARBuBBqQZgBaiAFQZgBaikDADcDACAEQbgQakGQAWogBUGQAWopAwA3AwAgBEG4EGpBiAFqIA\
VBiAFqKQMANwMAIAQgBSkDgAE3A7gRIAUpA4gDIREgBSgCkAMhBiAFKQPAASESIARBEGogBEG4EGpB\
wAEQYRogASAEQRBqQcABEGEiByASNwPAASAHIAUpA8gBNwPIASAHQdABaiAFQdABaikDADcDACAHQd\
gBaiAFQdgBaikDADcDACAHQeABaiAFQeABaikDADcDACAHQegBaiAFQegBaikDADcDACAHQfABaiAF\
QfABaikDADcDACAHQfgBaiAFQfgBaikDADcDACAHQYACaiAFQYACaikDADcDACAHQYgCaiAFQYgCak\
GAARBhGiAHIAY2ApADIAcgETcDiANBACEFDC0LIAEoAgQhBUGYAxAWIgFFDRUgBEG4EGogBUGAARBh\
GiAEQbgQakG4AWogBUG4AWopAwA3AwAgBEG4EGpBsAFqIAVBsAFqKQMANwMAIARBuBBqQagBaiAFQa\
gBaikDADcDACAEQbgQakGgAWogBUGgAWopAwA3AwAgBEG4EGpBmAFqIAVBmAFqKQMANwMAIARBuBBq\
QZABaiAFQZABaikDADcDACAEQbgQakGIAWogBUGIAWopAwA3AwAgBCAFKQOAATcDuBEgBSkDiAMhES\
AFKAKQAyEGIAUpA8ABIRIgASAEQbgQakHAARBhIgcgEjcDwAEgByAFKQPIATcDyAEgB0HQAWogBUHQ\
AWopAwA3AwAgB0HYAWogBUHYAWopAwA3AwAgB0HgAWogBUHgAWopAwA3AwAgB0HoAWogBUHoAWopAw\
A3AwAgB0HwAWogBUHwAWopAwA3AwAgB0H4AWogBUH4AWopAwA3AwAgB0GAAmogBUGAAmopAwA3AwAg\
B0GIAmogBUGIAmpBgAEQYRogByAGNgKQAyAHIBE3A4gDQQEhBQwsCyABKAIEIQVBmAMQFiIBRQ0VIA\
RBuBBqIAVBgAEQYRogBEG4EGpBuAFqIAVBuAFqKQMANwMAIARBuBBqQbABaiAFQbABaikDADcDACAE\
QbgQakGoAWogBUGoAWopAwA3AwAgBEG4EGpBoAFqIAVBoAFqKQMANwMAIARBuBBqQZgBaiAFQZgBai\
kDADcDACAEQbgQakGQAWogBUGQAWopAwA3AwAgBEG4EGpBiAFqIAVBiAFqKQMANwMAIAQgBSkDgAE3\
A7gRIAUpA4gDIREgBSgCkAMhBiAFKQPAASESIAEgBEG4EGpBwAEQYSIHIBI3A8ABIAcgBSkDyAE3A8\
gBIAdB0AFqIAVB0AFqKQMANwMAIAdB2AFqIAVB2AFqKQMANwMAIAdB4AFqIAVB4AFqKQMANwMAIAdB\
6AFqIAVB6AFqKQMANwMAIAdB8AFqIAVB8AFqKQMANwMAIAdB+AFqIAVB+AFqKQMANwMAIAdBgAJqIA\
VBgAJqKQMANwMAIAdBiAJqIAVBiAJqQYABEGEaIAcgBjYCkAMgByARNwOIA0ECIQUMKwsgASgCBCEF\
QdgBEBYiAUUNFSABIAUpAwg3AwggASAFKQMANwMAIAUoAnAhByABQcgAaiAFQcgAaikDADcDACABQc\
AAaiAFQcAAaikDADcDACABQThqIAVBOGopAwA3AwAgAUEwaiAFQTBqKQMANwMAIAFBKGogBUEoaikD\
ADcDACABQSBqIAVBIGopAwA3AwAgAUEYaiAFQRhqKQMANwMAIAEgBSkDEDcDECABIAUpA1A3A1AgAU\
HYAGogBUHYAGopAwA3AwAgAUHgAGogBUHgAGopAwA3AwAgAUHoAGogBUHoAGopAwA3AwAgASAHNgJw\
IAFBjAFqIAVBjAFqKQIANwIAIAFBhAFqIAVBhAFqKQIANwIAIAFB/ABqIAVB/ABqKQIANwIAIAEgBS\
kCdDcCdCABQcwBaiAFQcwBaikCADcCACABQcQBaiAFQcQBaikCADcCACABQbwBaiAFQbwBaikCADcC\
ACABQbQBaiAFQbQBaikCADcCACABQawBaiAFQawBaikCADcCACABQaQBaiAFQaQBaikCADcCACABQZ\
wBaiAFQZwBaikCADcCACABIAUpApQBNwKUAUEDIQUMKgsgASgCBCEFQfgOEBYiAUUNFSAEQbgQakGI\
AWogBUGIAWopAwA3AwAgBEG4EGpBgAFqIAVBgAFqKQMANwMAIARBuBBqQfgAaiAFQfgAaikDADcDAC\
AEQbgQakEQaiAFQRBqKQMANwMAIARBuBBqQRhqIAVBGGopAwA3AwAgBEG4EGpBIGogBUEgaikDADcD\
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\
AwAiHDcDACAEQcgCakEwaiABQbABaiIQKQMAIh03AwAgBEHIAmpBOGogAUG4AWoiESkDACIeNwMAIA\
QgASkDgAEiHzcDyAIgBEGAAmpBOGoiAyAeNwMAIARBgAJqQTBqIhIgHTcDACAEQYACakEoaiITIBw3\
AwAgBEGAAmpBIGoiFCAbNwMAIARBgAJqQRhqIhUgGDcDACAEQYACakEQaiIWIBk3AwAgBEGAAmpBCG\
oiFyAaNwMAIAQgHzcDgAIgAiADKQMANwMAIAUgEikDADcDACAGIBMpAwA3AwAgByAUKQMANwMAIAgg\
FSkDADcDACAJIBYpAwA3AwAgCiAXKQMANwMAIAQgBCkDgAI3A8ABIAEgASkDiAM3A8ABIBEgASABQY\
gCaiICQYABEGEiA0GAAmopAwA3AwAgECADQfgBaikDADcDACAPIANB8AFqKQMANwMAIA4gA0HoAWop\
AwA3AwAgCyADQeABaikDADcDACAMIANB2AFqKQMANwMAIA0gA0HQAWopAwA3AwAgAyADKQPIATcDgA\
FBwAAQFiIBRQ0YIAEgBCkDwAE3AAAgAUE4aiAEQcABakE4aikDADcAACABQTBqIARBwAFqQTBqKQMA\
NwAAIAFBKGogBEHAAWpBKGopAwA3AAAgAUEgaiAEQcABakEgaikDADcAACABQRhqIARBwAFqQRhqKQ\
MANwAAIAFBEGogBEHAAWpBEGopAwA3AAAgAUEIaiAEQcABakEIaikDADcAACADIAMpA4gDNwPAASAD\
IAJBgAEQYRogA0GAAWoiAkE4aiADQcgBaiIDQThqKQMANwMAIAJBMGogA0EwaikDADcDACACQShqIA\
NBKGopAwA3AwAgAkEgaiADQSBqKQMANwMAIAJBGGogA0EYaikDADcDACACQRBqIANBEGopAwA3AwAg\
AkEIaiADQQhqKQMANwMAIAIgAykDADcDAEEAIQJBwAAhAwwwCyABKAIEIgIoApADIgNBAEgNFAJAAk\
AgAw0AQQEhAQwBCyADEBYiAUUNGSABQXxqLQAAQQNxRQ0AIAFBACADEGYaCwJAIAIoAsABQf8AcSIF\
RQ0AIAVBgAFGDQAgAiAFakEAQYABIAVrEGYaCyACQn8QEiAEQcgCakEYaiACQZgBaikDACIYNwMAIA\
RByAJqQRBqIAJBkAFqKQMAIhk3AwAgBEHIAmpBCGogAkGIAWopAwAiGjcDACAEQcgCakEgaiACQaAB\
aikDACIbNwMAIARByAJqQShqIAJBqAFqKQMAIhw3AwAgBEHIAmpBMGogAkGwAWopAwAiHTcDACAEQc\
gCakE4aiACQbgBaikDACIeNwMAIAQgAikDgAEiHzcDyAIgBEGAAmpBOGogHjcDACAEQYACakEwaiAd\
NwMAIARBgAJqQShqIBw3AwAgBEGAAmpBIGogGzcDACAEQYACakEYaiAYNwMAIARBgAJqQRBqIBk3Aw\
AgBEGAAmpBCGogGjcDACAEIB83A4ACIANBwQBPDRkgASAEQYACaiADEGEaIAIgAikDiAM3A8ABIAJB\
gAFqIgVBOGogAiACQYgCakGAARBhIgJBgAJqKQMANwMAIAVBMGogAkH4AWopAwA3AwAgBUEoaiACQf\
ABaikDADcDACAFQSBqIAJB6AFqKQMANwMAIAVBGGogAkHgAWopAwA3AwAgBUEQaiACQdgBaikDADcD\
ACAFQQhqIAJB0AFqKQMANwMAIAUgAikDyAE3AwBBACECDC8LIAEoAgQiAigCkAMiA0EASA0TAkACQC\
ADDQBBASEBDAELIAMQFiIBRQ0aIAFBfGotAABBA3FFDQAgAUEAIAMQZhoLAkAgAigCwAFB/wBxIgVF\
DQAgBUGAAUYNACACIAVqQQBBgAEgBWsQZhoLIAJCfxASIARByAJqQRhqIAJBmAFqKQMAIhg3AwAgBE\
HIAmpBEGogAkGQAWopAwAiGTcDACAEQcgCakEIaiACQYgBaikDACIaNwMAIARByAJqQSBqIAJBoAFq\
KQMAIhs3AwAgBEHIAmpBKGogAkGoAWopAwAiHDcDACAEQcgCakEwaiACQbABaikDACIdNwMAIARByA\
JqQThqIAJBuAFqKQMAIh43AwAgBCACKQOAASIfNwPIAiAEQYACakE4aiAeNwMAIARBgAJqQTBqIB03\
AwAgBEGAAmpBKGogHDcDACAEQYACakEgaiAbNwMAIARBgAJqQRhqIBg3AwAgBEGAAmpBEGogGTcDAC\
AEQYACakEIaiAaNwMAIAQgHzcDgAIgA0HBAE8NGiABIARBgAJqIAMQYRogAiACKQOIAzcDwAEgAkGA\
AWoiBUE4aiACIAJBiAJqQYABEGEiAkGAAmopAwA3AwAgBUEwaiACQfgBaikDADcDACAFQShqIAJB8A\
FqKQMANwMAIAVBIGogAkHoAWopAwA3AwAgBUEYaiACQeABaikDADcDACAFQRBqIAJB2AFqKQMANwMA\
IAVBCGogAkHQAWopAwA3AwAgBSACKQPIATcDAEEAIQIMLgsgASgCBCECIARBgAJqQRxqQgA3AgAgBE\
GAAmpBFGpCADcCACAEQYACakEMakIANwIAIARCADcChAIgBEEgNgKAAiAEQcgCakEYaiAEQYACakEY\
aiIDKQMANwMAIARByAJqQRBqIgUgBEGAAmpBEGopAwA3AwAgBEHIAmpBCGogBEGAAmpBCGopAwA3Aw\
AgBEHIAmpBIGogBEGAAmpBIGooAgA2AgAgBCAEKQOAAjcDyAIgBEHAAWpBEGoiBiAEQcgCakEUaikC\
ADcDACAEQcABakEIaiIHIARByAJqQQxqKQIANwMAIARBwAFqQRhqIgggBEHIAmpBHGopAgA3AwAgBC\
AEKQLMAjcDwAECQCACKAIAQT9xIgFFDQAgAUHAAEYNACACIAFqQRBqQQBBwAAgAWsQZhoLIAJBfxAU\
IAUgAkHgAGoiASkCACIYNwMAIAMgAkHoAGoiBSkCACIZNwMAIAcgAkHYAGoiAykCADcDACAGIBg3Aw\
AgCCAZNwMAIAQgAikCUCIYNwOAAiAEIBg3A8ABIAIgAikDCDcDACACIAIpApQBNwIQIAJBGGogAkGc\
AWopAgA3AgAgAkEgaiACQaQBaikCADcCACACQShqIAJBrAFqKQIANwIAIAJBMGogAkG0AWopAgA3Ag\
AgAkE4aiACQbwBaikCADcCACACQcAAaiACQcQBaikCADcCACACQcgAaiACQcwBaikCADcCACACIAIp\
AnQ3AlAgAyACQfwAaikCADcCACABIAJBhAFqKQIANwIAIAUgAkGMAWopAgA3AgBBIBAWIgFFDRogAS\
AEKQPAATcAACABQRhqIARBwAFqQRhqKQMANwAAIAFBEGogBEHAAWpBEGopAwA3AAAgAUEIaiAEQcAB\
akEIaikDADcAACACIAIpAwg3AwAgAkEQaiIFIAJBlAFqIgYpAgA3AgAgBUEIaiAGQQhqKQIANwIAIA\
VBEGogBkEQaikCADcCACAFQRhqIAZBGGopAgA3AgBBICEDIAVBIGogBkEgaikCADcCACAFQShqIAZB\
KGopAgA3AgAgBUEwaiAGQTBqKQIANwIAIAVBOGogBkE4aikCADcCACACQdAAaiIFIAJB9ABqIgIpAg\
A3AgAgBUEIaiACQQhqKQIANwIAIAVBEGogAkEQaikCADcCACAFQRhqIAJBGGopAgA3AgBBACECDC0L\
IANBAEgNESABKAIEIQUCQAJAIAMNAEEBIQEMAQsgAxAWIgFFDRsgAUF8ai0AAEEDcUUNACABQQAgAx\
BmGgsgBEHIAmogBRAgIAVCADcDACAFQSBqIAVBiAFqKQMANwMAIAVBGGogBUGAAWopAwA3AwAgBUEQ\
aiAFQfgAaikDADcDACAFIAUpA3A3AwhBACECIAVBKGpBAEHCABBmGgJAIAUoApABRQ0AIAVBADYCkA\
ELIARByAJqIAEgAxAZDCwLIAEoAgQhAUEcIQNBACECIARBgAJqQRxqQQA2AgAgBEGAAmpBFGpCADcC\
ACAEQYACakEMakIANwIAIARCADcChAIgBEEcNgKAAiAEQcgCakEQaiAEQYACakEQaikDADcDACAEQc\
gCakEIaiAEQYACakEIaikDADcDACAEQcgCakEYaiAEQYACakEYaikDADcDACAEQcABakEIaiIFIARB\
yAJqQQxqKQIANwMAIARBwAFqQRBqIgYgBEHIAmpBFGopAgA3AwAgBEHAAWpBGGoiByAEQcgCakEcai\
gCADYCACAEIAQpA4ACNwPIAiAEIAQpAswCNwPAASABIARBwAFqED4gAUEAQcwBEGYhCEEcEBYiAUUN\
GiABIAQpA8ABNwAAIAFBGGogBygCADYAACABQRBqIAYpAwA3AAAgAUEIaiAFKQMANwAAIAhBAEHMAR\
BmGgwrCyABKAIEIQEgBEGAAmpBHGpCADcCACAEQYACakEUakIANwIAIARBgAJqQQxqQgA3AgAgBEIA\
NwKEAkEgIQMgBEEgNgKAAiAEQcgCakEgaiAEQYACakEgaigCADYCACAEQcgCakEYaiAEQYACakEYai\
kDADcDACAEQcgCakEQaiAEQYACakEQaikDADcDACAEQcgCakEIaiAEQYACakEIaikDADcDACAEIAQp\
A4ACNwPIAiAEQcABakEYaiIFIARByAJqQRxqKQIANwMAIARBwAFqQRBqIgYgBEHIAmpBFGopAgA3Aw\
AgBEHAAWpBCGoiByAEQcgCakEMaikCADcDACAEIAQpAswCNwPAASABIARBwAFqED9BACECIAFBAEHM\
ARBmIQhBIBAWIgFFDRogASAEKQPAATcAACABQRhqIAUpAwA3AAAgAUEQaiAGKQMANwAAIAFBCGogBy\
kDADcAACAIQQBBzAEQZhoMKgsgASgCBCEBIARBgAJqQSxqQgA3AgAgBEGAAmpBJGpCADcCACAEQYAC\
akEcakIANwIAIARBgAJqQRRqQgA3AgAgBEGAAmpBDGpCADcCACAEQgA3AoQCQTAhAyAEQTA2AoACIA\
RByAJqQTBqIARBgAJqQTBqKAIANgIAIARByAJqQShqIARBgAJqQShqKQMANwMAIARByAJqQSBqIARB\
gAJqQSBqKQMANwMAIARByAJqQRhqIARBgAJqQRhqKQMANwMAIARByAJqQRBqIARBgAJqQRBqKQMANw\
MAIARByAJqQQhqIARBgAJqQQhqKQMANwMAIAQgBCkDgAI3A8gCIARBwAFqQShqIgUgBEHIAmpBLGop\
AgA3AwAgBEHAAWpBIGoiBiAEQcgCakEkaikCADcDACAEQcABakEYaiIHIARByAJqQRxqKQIANwMAIA\
RBwAFqQRBqIgggBEHIAmpBFGopAgA3AwAgBEHAAWpBCGoiCSAEQcgCakEMaikCADcDACAEIAQpAswC\
NwPAASABIARBwAFqEDpBACECIAFBAEHMARBmIQpBMBAWIgFFDRogASAEKQPAATcAACABQShqIAUpAw\
A3AAAgAUEgaiAGKQMANwAAIAFBGGogBykDADcAACABQRBqIAgpAwA3AAAgAUEIaiAJKQMANwAAIApB\
AEHMARBmGgwpCyABKAIEIQEgBEGAAmpBDGpCADcCACAEQYACakEUakIANwIAIARBgAJqQRxqQgA3Ag\
AgBEGAAmpBJGpCADcCACAEQYACakEsakIANwIAIARBgAJqQTRqQgA3AgAgBEGAAmpBPGpCADcCACAE\
QgA3AoQCQcAAIQMgBEHAADYCgAIgBEHIAmogBEGAAmpBxAAQYRogBEHAAWpBOGoiBSAEQcgCakE8ai\
kCADcDACAEQcABakEwaiIGIARByAJqQTRqKQIANwMAIARBwAFqQShqIgcgBEHIAmpBLGopAgA3AwAg\
BEHAAWpBIGoiCCAEQcgCakEkaikCADcDACAEQcABakEYaiIJIARByAJqQRxqKQIANwMAIARBwAFqQR\
BqIgogBEHIAmpBFGopAgA3AwAgBEHAAWpBCGoiCyAEQcgCakEMaikCADcDACAEIAQpAswCNwPAASAB\
IARBwAFqEDNBACECIAFBAEHMARBmIQxBwAAQFiIBRQ0aIAEgBCkDwAE3AAAgAUE4aiAFKQMANwAAIA\
FBMGogBikDADcAACABQShqIAcpAwA3AAAgAUEgaiAIKQMANwAAIAFBGGogCSkDADcAACABQRBqIAop\
AwA3AAAgAUEIaiALKQMANwAAIAxBAEHMARBmGgwoCyABKAIEIQUgBEGAAmpBDGpCADcCACAEQgA3Ao\
QCQRAhAyAEQRA2AoACIARByAJqQRBqIARBgAJqQRBqKAIANgIAIARByAJqQQhqIARBgAJqQQhqKQMA\
NwMAIARBwAFqQQhqIgYgBEHIAmpBDGopAgA3AwAgBCAEKQOAAjcDyAIgBCAEKQLMAjcDwAEgBSAEQc\
ABahA9QQAhAiAFQdQAakEAKQKAkUAiGDcCACAFQQApAviQQCIZNwJMIAVBADYCCCAFQgA3AwBBEBAW\
IgFFDRogASAEKQPAATcAACABQQhqIAYpAwA3AAAgBUIANwMAIAVBzABqIgZBCGogGDcCACAGIBk3Ag\
AgBUEANgIIDCcLIAEoAgQhBUEUIQNBACECIARBgAJqQRRqQQA2AgAgBEGAAmpBDGpCADcCACAEQgA3\
AoQCIARBFDYCgAIgBEHIAmpBEGogBEGAAmpBEGopAwA3AwAgBEHIAmpBCGogBEGAAmpBCGopAwA3Aw\
AgBEHAAWpBCGoiBiAEQcgCakEMaikCADcDACAEQcABakEQaiIHIARByAJqQRRqKAIANgIAIAQgBCkD\
gAI3A8gCIAQgBCkCzAI3A8ABIAUgBEHAAWoQOSAFQgA3AwAgBUEANgIcIAVBACkCiJFAIhg3AgggBU\
EQakEAKQKQkUAiGTcCACAFQRhqQQAoApiRQCIINgIAQRQQFiIBRQ0aIAEgBCkDwAE3AAAgAUEQaiAH\
KAIANgAAIAFBCGogBikDADcAACAFQgA3AwAgBUEANgIcIAVBCGoiBSAYNwIAIAVBCGogGTcCACAFQR\
BqIAg2AgAMJgsgASgCBCEFQRQhA0EAIQIgBEGAAmpBFGpBADYCACAEQYACakEMakIANwIAIARCADcC\
hAIgBEEUNgKAAiAEQcgCakEQaiAEQYACakEQaikDADcDACAEQcgCakEIaiAEQYACakEIaikDADcDAC\
AEQcABakEIaiIGIARByAJqQQxqKQIANwMAIARBwAFqQRBqIgcgBEHIAmpBFGooAgA2AgAgBCAEKQOA\
AjcDyAIgBCAEKQLMAjcDwAEgBSAEQcABahApIAVBADYCHCAFQRhqQQAoApiRQCIINgIAIAVBEGpBAC\
kCkJFAIhg3AgAgBUEAKQKIkUAiGTcCCCAFQgA3AwBBFBAWIgFFDRogASAEKQPAATcAACABQRBqIAco\
AgA2AAAgAUEIaiAGKQMANwAAIAVBCGoiBkEQaiAINgIAIAZBCGogGDcCACAGIBk3AgAgBUEANgIcIA\
VCADcDAAwlCyABKAIEIQFBHCEDQQAhAiAEQYACakEcakEANgIAIARBgAJqQRRqQgA3AgAgBEGAAmpB\
DGpCADcCACAEQgA3AoQCIARBHDYCgAIgBEHIAmpBEGogBEGAAmpBEGopAwA3AwAgBEHIAmpBCGogBE\
GAAmpBCGopAwA3AwAgBEHIAmpBGGogBEGAAmpBGGopAwA3AwAgBEHAAWpBCGoiBSAEQcgCakEMaikC\
ADcDACAEQcABakEQaiIGIARByAJqQRRqKQIANwMAIARBwAFqQRhqIgcgBEHIAmpBHGooAgA2AgAgBC\
AEKQOAAjcDyAIgBCAEKQLMAjcDwAEgASAEQcABahBAIAFBAEHMARBmIQhBHBAWIgFFDRogASAEKQPA\
ATcAACABQRhqIAcoAgA2AAAgAUEQaiAGKQMANwAAIAFBCGogBSkDADcAACAIQQBBzAEQZhoMJAsgAS\
gCBCEBIARBgAJqQRxqQgA3AgAgBEGAAmpBFGpCADcCACAEQYACakEMakIANwIAIARCADcChAJBICED\
IARBIDYCgAIgBEHIAmpBIGogBEGAAmpBIGooAgA2AgAgBEHIAmpBGGogBEGAAmpBGGopAwA3AwAgBE\
HIAmpBEGogBEGAAmpBEGopAwA3AwAgBEHIAmpBCGogBEGAAmpBCGopAwA3AwAgBCAEKQOAAjcDyAIg\
BEHAAWpBGGoiBSAEQcgCakEcaikCADcDACAEQcABakEQaiIGIARByAJqQRRqKQIANwMAIARBwAFqQQ\
hqIgcgBEHIAmpBDGopAgA3AwAgBCAEKQLMAjcDwAEgASAEQcABahBBQQAhAiABQQBBzAEQZiEIQSAQ\
FiIBRQ0aIAEgBCkDwAE3AAAgAUEYaiAFKQMANwAAIAFBEGogBikDADcAACABQQhqIAcpAwA3AAAgCE\
EAQcwBEGYaDCMLIAEoAgQhASAEQYACakEsakIANwIAIARBgAJqQSRqQgA3AgAgBEGAAmpBHGpCADcC\
ACAEQYACakEUakIANwIAIARBgAJqQQxqQgA3AgAgBEIANwKEAkEwIQMgBEEwNgKAAiAEQcgCakEwai\
AEQYACakEwaigCADYCACAEQcgCakEoaiAEQYACakEoaikDADcDACAEQcgCakEgaiAEQYACakEgaikD\
ADcDACAEQcgCakEYaiAEQYACakEYaikDADcDACAEQcgCakEQaiAEQYACakEQaikDADcDACAEQcgCak\
EIaiAEQYACakEIaikDADcDACAEIAQpA4ACNwPIAiAEQcABakEoaiIFIARByAJqQSxqKQIANwMAIARB\
wAFqQSBqIgYgBEHIAmpBJGopAgA3AwAgBEHAAWpBGGoiByAEQcgCakEcaikCADcDACAEQcABakEQai\
IIIARByAJqQRRqKQIANwMAIARBwAFqQQhqIgkgBEHIAmpBDGopAgA3AwAgBCAEKQLMAjcDwAEgASAE\
QcABahA7QQAhAiABQQBBzAEQZiEKQTAQFiIBRQ0aIAEgBCkDwAE3AAAgAUEoaiAFKQMANwAAIAFBIG\
ogBikDADcAACABQRhqIAcpAwA3AAAgAUEQaiAIKQMANwAAIAFBCGogCSkDADcAACAKQQBBzAEQZhoM\
IgsgASgCBCEBIARBgAJqQQxqQgA3AgAgBEGAAmpBFGpCADcCACAEQYACakEcakIANwIAIARBgAJqQS\
RqQgA3AgAgBEGAAmpBLGpCADcCACAEQYACakE0akIANwIAIARBgAJqQTxqQgA3AgAgBEIANwKEAkHA\
ACEDIARBwAA2AoACIARByAJqIARBgAJqQcQAEGEaIARBwAFqQThqIgUgBEHIAmpBPGopAgA3AwAgBE\
HAAWpBMGoiBiAEQcgCakE0aikCADcDACAEQcABakEoaiIHIARByAJqQSxqKQIANwMAIARBwAFqQSBq\
IgggBEHIAmpBJGopAgA3AwAgBEHAAWpBGGoiCSAEQcgCakEcaikCADcDACAEQcABakEQaiIKIARByA\
JqQRRqKQIANwMAIARBwAFqQQhqIgsgBEHIAmpBDGopAgA3AwAgBCAEKQLMAjcDwAEgASAEQcABahA0\
QQAhAiABQQBBzAEQZiEMQcAAEBYiAUUNGiABIAQpA8ABNwAAIAFBOGogBSkDADcAACABQTBqIAYpAw\
A3AAAgAUEoaiAHKQMANwAAIAFBIGogCCkDADcAACABQRhqIAkpAwA3AAAgAUEQaiAKKQMANwAAIAFB\
CGogCykDADcAACAMQQBBzAEQZhoMIQsgASgCBCEFQRwhA0EAIQIgBEGAAmpBHGpBADYCACAEQYACak\
EUakIANwIAIARBgAJqQQxqQgA3AgAgBEIANwKEAiAEQRw2AoACIARByAJqQRBqIARBgAJqQRBqKQMA\
NwMAIARByAJqQQhqIARBgAJqQQhqKQMANwMAIARByAJqQRhqIARBgAJqQRhqKQMANwMAIARBwAFqQQ\
hqIgYgBEHIAmpBDGopAgA3AwAgBEHAAWpBEGoiByAEQcgCakEUaikCADcDACAEQcABakEYaiIIIARB\
yAJqQRxqKAIANgIAIAQgBCkDgAI3A8gCIAQgBCkCzAI3A8ABIAUgBEHAAWoQMCAFQgA3AwAgBUEANg\
IIIAVBACkCnJFAIhg3AkwgBUHUAGpBACkCpJFAIhk3AgAgBUHcAGpBACkCrJFAIho3AgAgBUHkAGpB\
ACkCtJFAIhs3AgBBHBAWIgFFDRogASAEKQPAATcAACABQRhqIAgoAgA2AAAgAUEQaiAHKQMANwAAIA\
FBCGogBikDADcAACAFQgA3AwAgBUEANgIIIAVBzABqIgUgGDcCACAFQQhqIBk3AgAgBUEQaiAaNwIA\
IAVBGGogGzcCAAwgCyABKAIEIQUgBEGAAmpBHGpCADcCACAEQYACakEUakIANwIAIARBgAJqQQxqQg\
A3AgAgBEIANwKEAkEgIQMgBEEgNgKAAiAEQcgCakEgaiAEQYACakEgaigCADYCACAEQcgCakEYaiAE\
QYACakEYaikDADcDACAEQcgCakEQaiAEQYACakEQaikDADcDACAEQcgCakEIaiAEQYACakEIaikDAD\
cDACAEIAQpA4ACNwPIAiAEQcABakEYaiIGIARByAJqQRxqKQIANwMAIARBwAFqQRBqIgcgBEHIAmpB\
FGopAgA3AwAgBEHAAWpBCGoiCCAEQcgCakEMaikCADcDACAEIAQpAswCNwPAASAFIARBwAFqEC0gBU\
IANwMAQQAhAiAFQQA2AgggBUEAKQK8kUAiGDcCTCAFQdQAakEAKQLEkUAiGTcCACAFQdwAakEAKQLM\
kUAiGjcCACAFQeQAakEAKQLUkUAiGzcCAEEgEBYiAUUNGiABIAQpA8ABNwAAIAFBGGogBikDADcAAC\
ABQRBqIAcpAwA3AAAgAUEIaiAIKQMANwAAIAVCADcDACAFQQA2AgggBUHMAGoiBSAYNwIAIAVBCGog\
GTcCACAFQRBqIBo3AgAgBUEYaiAbNwIADB8LIAEoAgQhBSAEQYACakEsakIANwIAIARBgAJqQSRqQg\
A3AgAgBEGAAmpBHGpCADcCACAEQYACakEUakIANwIAIARBgAJqQQxqQgA3AgAgBEIANwKEAkEwIQMg\
BEEwNgKAAiAEQcgCakEwaiAEQYACakEwaigCADYCACAEQcgCakEoaiAEQYACakEoaikDADcDACAEQc\
gCakEgaiAEQYACakEgaikDADcDACAEQcgCakEYaiAEQYACakEYaikDADcDACAEQcgCakEQaiAEQYAC\
akEQaikDADcDACAEQcgCakEIaiAEQYACakEIaikDADcDACAEIAQpA4ACNwPIAiAEQcABakEoaiIGIA\
RByAJqQSxqKQIANwMAIARBwAFqQSBqIgcgBEHIAmpBJGopAgA3AwAgBEHAAWpBGGoiCCAEQcgCakEc\
aikCADcDACAEQcABakEQaiIJIARByAJqQRRqKQIANwMAIARBwAFqQQhqIgogBEHIAmpBDGopAgA3Aw\
AgBCAEKQLMAjcDwAEgBSAEQcABahAoIAVCADcDCCAFQgA3AwBBACECIAVBADYCUCAFQQApA+CRQCIY\
NwMQIAVBGGpBACkD6JFAIhk3AwAgBUEgakEAKQPwkUAiGjcDACAFQShqQQApA/iRQCIbNwMAIAVBMG\
pBACkDgJJAIhw3AwAgBUE4akEAKQOIkkAiHTcDACAFQcAAakEAKQOQkkAiHjcDACAFQcgAakEAKQOY\
kkAiHzcDAEEwEBYiAUUNGiABIAQpA8ABNwAAIAFBKGogBikDADcAACABQSBqIAcpAwA3AAAgAUEYai\
AIKQMANwAAIAFBEGogCSkDADcAACABQQhqIAopAwA3AAAgBUIANwMIIAVCADcDACAFQQA2AlAgBUEQ\
aiIFIBg3AwAgBUEIaiAZNwMAIAVBEGogGjcDACAFQRhqIBs3AwAgBUEgaiAcNwMAIAVBKGogHTcDAC\
AFQTBqIB43AwAgBUE4aiAfNwMADB4LIAEoAgQhBSAEQYACakEMakIANwIAIARBgAJqQRRqQgA3AgAg\
BEGAAmpBHGpCADcCACAEQYACakEkakIANwIAIARBgAJqQSxqQgA3AgAgBEGAAmpBNGpCADcCACAEQY\
ACakE8akIANwIAIARCADcChAJBwAAhAyAEQcAANgKAAiAEQcgCaiAEQYACakHEABBhGiAEQcABakE4\
aiIGIARByAJqQTxqKQIANwMAIARBwAFqQTBqIgcgBEHIAmpBNGopAgA3AwAgBEHAAWpBKGoiCCAEQc\
gCakEsaikCADcDACAEQcABakEgaiIJIARByAJqQSRqKQIANwMAIARBwAFqQRhqIgogBEHIAmpBHGop\
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\
ICBzcSATcyALaiAcQR53IBxBE3dzIBxBCndzaiAbIB9BDncgH0EZd3MgH0EDdnNqIBFqICRBD3cgJE\
ENd3MgJEEKdnNqIB5qICIgJWoiGyACICFzcSAhc2ogG0EadyAbQRV3cyAbQQd3c2pB8vHFs3xqIh5q\
IQsgHCAKaiEKICMgCWohCSAgIAhqIQggHSAHaiAeaiEHIBsgBmohBiACIAVqIQUgISAEaiEEIAFBwA\
BqIgEgDEcNAAsLIAAgBDYCHCAAIAU2AhggACAGNgIUIAAgBzYCECAAIAg2AgwgACAJNgIIIAAgCjYC\
BCAAIAs2AgALgEECGn8CfiMAQbACayIDJAACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQA\
JAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAC\
QAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIA\
AoAgAOFhUAAQIDBAUGBwgJCgsMDQ4PEBESExQVCyAAKAIEIAEgAhA8DBULIAAoAgQgASACEDwMFAsg\
ACgCBCIEKQMAIh2nQT9xIQACQAJAIB1QDQAgAEUNAQsgBCAAakEQaiABIAJBwAAgAGsiACAAIAJLGy\
IAEGEaIB0gAK18Ih4gHVQNFSAEIB43AwAgAiAAayECIAEgAGohAQsCQCACQcAASQ0AIARBEGohAANA\
IARBABAUIABBOGogAUE4aikAADcAACAAQTBqIAFBMGopAAA3AAAgAEEoaiABQShqKQAANwAAIABBIG\
ogAUEgaikAADcAACAAQRhqIAFBGGopAAA3AAAgAEEQaiABQRBqKQAANwAAIABBCGogAUEIaikAADcA\
ACAAIAEpAAA3AAAgBCkDACIdQsAAfCIeIB1UDRcgBCAeNwMAIAFBwABqIQEgAkFAaiICQcAATw0ACw\
sgAkUNEyAEQQAQFCAEQRBqIAEgAhBhGiAEKQMAIh0gAq18Ih4gHVQNFiAEIB43AwAMEwsCQCAAKAIE\
IgVB6QBqLQAAQQZ0IAUtAGhqIgBFDQAgBSABIAJBgAggAGsiACAAIAJLGyIEEC8aIAIgBGsiAkUNEy\
ADQfgAakEQaiAFQRBqIgApAwA3AwAgA0H4AGpBGGogBUEYaiIGKQMANwMAIANB+ABqQSBqIAVBIGoi\
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\
IgQgAksNACAADQEgASEHDAILIAAgAmoiBCAASQ0kIARB6ABLDSUgBkHIAWogAGpBBGogASACEGEaIA\
YgBigCyAEgAmo2AsgBDBELIABB6QBPDSUgAiAEayECIAEgBGohByAGIABqQcwBaiABIAQQYRpBACEA\
A0AgBiAAaiIEIAQtAAAgBEHMAWotAABzOgAAIABBAWoiAEHoAEcNAAsgBhAhCyAHIAIgAkHoAHAiBW\
siAWohCAJAIAFB6ABJDQADQCAHQegAaiECIAFBmH9qIQFBACEAA0AgBiAAaiIEIAQtAAAgByAAai0A\
AHM6AAAgAEEBaiIAQegARw0ACyAGECEgAiEHIAFB6ABPDQALCyAGQcwBaiAIIAUQYRogBiAFNgLIAQ\
wPCwJAAkACQEHIACAAKAIEIgYoAsgBIgBrIgQgAksNACAADQEgASEHDAILIAAgAmoiBCAASQ0mIARB\
yABLDScgBkHIAWogAGpBBGogASACEGEaIAYgBigCyAEgAmo2AsgBDBALIABByQBPDScgAiAEayECIA\
EgBGohByAGIABqQcwBaiABIAQQYRpBACEAA0AgBiAAaiIEIAQtAAAgBEHMAWotAABzOgAAIABBAWoi\
AEHIAEcNAAsgBhAhCyAHIAIgAkHIAHAiBWsiAWohCAJAIAFByABJDQADQCAHQcgAaiECIAFBuH9qIQ\
FBACEAA0AgBiAAaiIEIAQtAAAgByAAai0AAHM6AAAgAEEBaiIAQcgARw0ACyAGECEgAiEHIAFByABP\
DQALCyAGQcwBaiAIIAUQYRogBiAFNgLIAQwOCyAAKAIEIgYgBikDACACrXw3AwACQEHAACAGKAIIIg\
BrIgcgAksNACAGQcwAaiEEAkAgAEUNACAAQcEATw0qIAZBDGoiBSAAaiABIAcQYRogBCAFEBsgAiAH\
ayECIAEgB2ohAQsgAkE/cSEHIAEgAkFAcSIAaiECAkAgAEUNAEEAIABrIQADQCAEIAEQGyABQcAAai\
EBIABBwABqIgANAAsLIAZBDGogAiAHEGEaIAYgBzYCCAwOCyAAIAJqIgQgAEkNJiAEQcAASw0nIAZB\
CGogAGpBBGogASACEGEaIAYgBigCCCACajYCCAwNCyAAKAIEIgYgBikDACACrXw3AwACQEHAACAGKA\
IcIgBrIgcgAksNACAGQQhqIQQCQCAARQ0AIABBwQBPDSwgBkEgaiIFIABqIAEgBxBhGiAEIAUQEyAC\
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\
IhhBGHQgGEEIdEGAgPwHcXIgGEEIdkGA/gNxIBhBGHZyciIYNgI8IAggEyAKcyAYcyAMIBBzIBVzIB\
EgDnMgE3MgF3NBAXciGXNBAXciGnNBAXciGyAKIBJzIAJzIBAgD3MgFHMgGHNBAXciHHNBAXciHXMg\
GCACcyAdcyAVIBRzIBxzIBtzQQF3Ih5zQQF3Ih9zIBogHHMgHnMgGSAYcyAbcyAXIBVzIBpzIBYgE3\
MgGXMgCyAMcyAXcyASIBFzIBZzIA8gDXMgC3MgAnNBAXciIHNBAXciIXNBAXciInNBAXciI3NBAXci\
JHNBAXciJXNBAXciJnNBAXciJyAdICFzIAIgFnMgIXMgFCALcyAgcyAdc0EBdyIoc0EBdyIpcyAcIC\
BzIChzIB9zQQF3IipzQQF3IitzIB8gKXMgK3MgHiAocyAqcyAnc0EBdyIsc0EBdyItcyAmICpzICxz\
ICUgH3MgJ3MgJCAecyAmcyAjIBtzICVzICIgGnMgJHMgISAZcyAjcyAgIBdzICJzIClzQQF3Ii5zQQ\
F3Ii9zQQF3IjBzQQF3IjFzQQF3IjJzQQF3IjNzQQF3IjRzQQF3IjUgKyAvcyApICNzIC9zICggInMg\
LnMgK3NBAXciNnNBAXciN3MgKiAucyA2cyAtc0EBdyI4c0EBdyI5cyAtIDdzIDlzICwgNnMgOHMgNX\
NBAXciOnNBAXciO3MgNCA4cyA6cyAzIC1zIDVzIDIgLHMgNHMgMSAncyAzcyAwICZzIDJzIC8gJXMg\
MXMgLiAkcyAwcyA3c0EBdyI8c0EBdyI9c0EBdyI+c0EBdyI/c0EBdyJAc0EBdyJBc0EBdyJCc0EBdy\
JDIDkgPXMgNyAxcyA9cyA2IDBzIDxzIDlzQQF3IkRzQQF3IkVzIDggPHMgRHMgO3NBAXciRnNBAXci\
R3MgOyBFcyBHcyA6IERzIEZzIENzQQF3IkhzQQF3IklzIEIgRnMgSHMgQSA7cyBDcyBAIDpzIEJzID\
8gNXMgQXMgPiA0cyBAcyA9IDNzID9zIDwgMnMgPnMgRXNBAXciSnNBAXciS3NBAXciTHNBAXciTXNB\
AXciTnNBAXciT3NBAXciUHNBAXdqIEYgSnMgRCA+cyBKcyBHc0EBdyJRcyBJc0EBdyJSIEUgP3MgS3\
MgUXNBAXciUyBMIEEgOiA5IDwgMSAmIB8gKCAhIBcgEyAQIAhBHnciVGogDiAFIAdBHnciECAGcyAI\
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\
QQN0QfSawABqIQFBACgChJ5AIQACQAJAQQAoAuyaQCIHQQEgBkEfcXQiBnFFDQAgASgCCCEGDAELQQ\
AgByAGcjYC7JpAIAEhBgsgASAANgIIIAYgADYCDCAAIAE2AgwgACAGNgIIC0EAIAU2AoSeQEEAIAI2\
AvydQCAIDwsgBygCCCIAIAE2AgwgASAANgIIDAMLIAEgB0EQaiAGGyEGA0AgBiEIAkAgACIBQRRqIg\
YoAgAiAA0AIAFBEGohBiABKAIQIQALIAANAAsgCEEANgIADAILAkACQAJAAkACQAJAAkACQAJAAkAC\
QAJAAkBBACgC/J1AIgAgAk8NAEEAKAKAnkAiACACSw0EQQAhASACQa+ABGoiBUEQdkAAIgBBf0YiBw\
0NIABBEHQiBkUNDUEAQQAoAoyeQEEAIAVBgIB8cSAHGyIIaiIANgKMnkBBAEEAKAKQnkAiASAAIAEg\
AEsbNgKQnkBBACgCiJ5AIgFFDQFBlJ7AACEAA0AgACgCACIFIAAoAgQiB2ogBkYNAyAAKAIIIgANAA\
wECwtBACgChJ5AIQECQAJAIAAgAmsiBUEPSw0AQQBBADYChJ5AQQBBADYC/J1AIAEgAEEDcjYCBCAB\
IABqIgAgACgCBEEBcjYCBAwBC0EAIAU2AvydQEEAIAEgAmoiBjYChJ5AIAYgBUEBcjYCBCABIABqIA\
U2AgAgASACQQNyNgIECyABQQhqDwsCQAJAQQAoAqieQCIARQ0AIAAgBk0NAQtBACAGNgKonkALQQBB\
/x82AqyeQEEAIAg2ApieQEEAIAY2ApSeQEEAQfSawAA2AoCbQEEAQfyawAA2AoibQEEAQfSawAA2Av\
yaQEEAQYSbwAA2ApCbQEEAQfyawAA2AoSbQEEAQYybwAA2ApibQEEAQYSbwAA2AoybQEEAQZSbwAA2\
AqCbQEEAQYybwAA2ApSbQEEAQZybwAA2AqibQEEAQZSbwAA2ApybQEEAQaSbwAA2ArCbQEEAQZybwA\
A2AqSbQEEAQaybwAA2AribQEEAQaSbwAA2AqybQEEAQQA2AqCeQEEAQbSbwAA2AsCbQEEAQaybwAA2\
ArSbQEEAQbSbwAA2ArybQEEAQbybwAA2AsibQEEAQbybwAA2AsSbQEEAQcSbwAA2AtCbQEEAQcSbwA\
A2AsybQEEAQcybwAA2AtibQEEAQcybwAA2AtSbQEEAQdSbwAA2AuCbQEEAQdSbwAA2AtybQEEAQdyb\
wAA2AuibQEEAQdybwAA2AuSbQEEAQeSbwAA2AvCbQEEAQeSbwAA2AuybQEEAQeybwAA2AvibQEEAQe\
ybwAA2AvSbQEEAQfSbwAA2AoCcQEEAQfybwAA2AoicQEEAQfSbwAA2AvybQEEAQYScwAA2ApCcQEEA\
QfybwAA2AoScQEEAQYycwAA2ApicQEEAQYScwAA2AoycQEEAQZScwAA2AqCcQEEAQYycwAA2ApScQE\
EAQZycwAA2AqicQEEAQZScwAA2ApycQEEAQaScwAA2ArCcQEEAQZycwAA2AqScQEEAQaycwAA2Aric\
QEEAQaScwAA2AqycQEEAQbScwAA2AsCcQEEAQaycwAA2ArScQEEAQbycwAA2AsicQEEAQbScwAA2Ar\
ycQEEAQcScwAA2AtCcQEEAQbycwAA2AsScQEEAQcycwAA2AticQEEAQcScwAA2AsycQEEAQdScwAA2\
AuCcQEEAQcycwAA2AtScQEEAQdycwAA2AuicQEEAQdScwAA2AtycQEEAQeScwAA2AvCcQEEAQdycwA\
A2AuScQEEAQeycwAA2AvicQEEAQeScwAA2AuycQEEAIAY2AoieQEEAQeycwAA2AvScQEEAIAhBWGoi\
ADYCgJ5AIAYgAEEBcjYCBCAGIABqQSg2AgRBAEGAgIABNgKknkAMCgsgACgCDA0AIAUgAUsNACAGIA\
FLDQILQQBBACgCqJ5AIgAgBiAAIAZJGzYCqJ5AIAYgCGohBUGUnsAAIQACQAJAAkADQCAAKAIAIAVG\
DQEgACgCCCIADQAMAgsLIAAoAgxFDQELQZSewAAhAAJAA0ACQCAAKAIAIgUgAUsNACAFIAAoAgRqIg\
UgAUsNAgsgACgCCCIADQALAAtBACAGNgKInkBBACAIQVhqIgA2AoCeQCAGIABBAXI2AgQgBiAAakEo\
NgIEQQBBgICAATYCpJ5AIAEgBUFgakF4cUF4aiIAIAAgAUEQakkbIgdBGzYCBEEAKQKUnkAhCiAHQR\
BqQQApApyeQDcCACAHIAo3AghBACAINgKYnkBBACAGNgKUnkBBACAHQQhqNgKcnkBBAEEANgKgnkAg\
B0EcaiEAA0AgAEEHNgIAIAUgAEEEaiIASw0ACyAHIAFGDQkgByAHKAIEQX5xNgIEIAEgByABayIGQQ\
FyNgIEIAcgBjYCAAJAIAZBgAJJDQBBHyEAAkAgBkH///8HSw0AIAZBBiAGQQh2ZyIAa0EfcXZBAXEg\
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\
yLmE6wA3A3AgBEIANwMAIARByABqQgA3AwAgBEHAAGpCADcDACAEQThqQgA3AwAgBEEwakIANwMAIA\
RBKGpCADcDACAEQSBqQgA3AwAgBEEYakIANwMAIARBzAFqQgA3AgAgBEIANwMIIARBxAFqQgA3AgAg\
BEG8AWpCADcCACAEQbQBakIANwIAIARBrAFqQgA3AgAgBEGkAWpCADcCACAEQZwBakIANwIAIARCAD\
cClAFBAyEFDCALAkACQAJAAkAgA0GqgMAAQQoQXkUNACADQbSAwABBChBeRQ0BIANBvoDAAEEKEF5F\
DQIgA0HIgMAAQQoQXkUNAyADQdWAwABBChBeDQxB4AAQFiIERQ0VIAJBDGpCADcCACACQRRqQgA3Ag\
AgAkEcakIANwIAIAJBJGpCADcCACACQSxqQgA3AgAgAkE0akIANwIAIAJBPGpCADcCACACQgA3AgQg\
AkHAADYCACACQZgDaiACQcQAEGEaIAJBuAZqQThqIgUgAkGYA2pBPGopAgA3AwAgAkG4BmpBMGoiBi\
ACQZgDakE0aikCADcDACACQbgGakEoaiIHIAJBmANqQSxqKQIANwMAIAJB2AZqIgggAkGYA2pBJGop\
AgA3AwAgAkG4BmpBGGoiCSACQZgDakEcaikCADcDACACQbgGakEQaiIKIAJBmANqQRRqKQIANwMAIA\
JBwAZqIgsgAkGYA2pBDGopAgA3AwAgAiACKQKcAzcDuAYgBEEYakEAKAKYkUA2AgAgBEEQakEAKQKQ\
kUA3AgAgBEEAKQKIkUA3AgggBEEANgIcIARCADcDACAEIAIpA7gGNwIgIARBKGogCykDADcCACAEQT\
BqIAopAwA3AgAgBEE4aiAJKQMANwIAIARBwABqIAgpAwA3AgAgBEHIAGogBykDADcCACAEQdAAaiAG\
KQMANwIAIARB2ABqIAUpAwA3AgBBCiEFDCMLQeACEBYiBEUNDyAEQQBByAEQZiEFIAJBADYCACACQQ\
RyQQBBkAEQZhogAkGQATYCACACQZgDaiACQZQBEGEaIAJBuAZqIAJBmANqQQRyQZABEGEaIAVBADYC\
yAEgBUHMAWogAkG4BmpBkAEQYRpBBSEFDCILQdgCEBYiBEUNDyAEQQBByAEQZiEFIAJBADYCACACQQ\
RyQQBBiAEQZhogAkGIATYCACACQZgDaiACQYwBEGEaIAJBuAZqIAJBmANqQQRyQYgBEGEaIAVBADYC\
yAEgBUHMAWogAkG4BmpBiAEQYRpBBiEFDCELQbgCEBYiBEUNDyAEQQBByAEQZiEFIAJBADYCACACQQ\
RyQQBB6AAQZhogAkHoADYCACACQZgDaiACQewAEGEaIAJBuAZqIAJBmANqQQRyQegAEGEaIAVBADYC\
yAEgBUHMAWogAkG4BmpB6AAQYRpBByEFDCALQZgCEBYiBEUNDyAEQQBByAEQZiEFIAJBADYCACACQQ\
RyQQBByAAQZhogAkHIADYCACACQZgDaiACQcwAEGEaIAJBuAZqIAJBmANqQQRyQcgAEGEaIAVBADYC\
yAEgBUHMAWogAkG4BmpByAAQYRpBCCEFDB8LIANB0oDAAEEDEF4NB0HgABAWIgRFDQ8gAkEMakIANw\
IAIAJBFGpCADcCACACQRxqQgA3AgAgAkEkakIANwIAIAJBLGpCADcCACACQTRqQgA3AgAgAkE8akIA\
NwIAIAJCADcCBCACQcAANgIAIAJBmANqIAJBxAAQYRogAkHwBmoiBSACQZgDakE8aikCADcDACACQe\
gGaiIGIAJBmANqQTRqKQIANwMAIAJB4AZqIgcgAkGYA2pBLGopAgA3AwAgAkHYBmoiCCACQZgDakEk\
aikCADcDACACQdAGaiIJIAJBmANqQRxqKQIANwMAIAJByAZqIgogAkGYA2pBFGopAgA3AwAgAkHABm\
oiCyACQZgDakEMaikCADcDACACIAIpApwDNwO4BiAEQQA2AgggBEIANwMAIAQgAikDuAY3AgwgBEEU\
aiALKQMANwIAIARBHGogCikDADcCACAEQSRqIAkpAwA3AgAgBEEsaiAIKQMANwIAIARBNGogBykDAD\
cCACAEQTxqIAYpAwA3AgAgBEHEAGogBSkDADcCACAEQQApAviQQDcCTCAEQdQAakEAKQKAkUA3AgBB\
CSEFDB4LIANB34DAAEEFEF4NBkHgABAWIgRFDRAgAkEMakIANwIAIAJBFGpCADcCACACQRxqQgA3Ag\
AgAkEkakIANwIAIAJBLGpCADcCACACQTRqQgA3AgAgAkE8akIANwIAIAJCADcCBCACQcAANgIAIAJB\
mANqIAJBxAAQYRogAkG4BmpBOGoiBSACQZgDakE8aikCADcDACACQbgGakEwaiIGIAJBmANqQTRqKQ\
IANwMAIAJBuAZqQShqIgcgAkGYA2pBLGopAgA3AwAgAkHYBmoiCCACQZgDakEkaikCADcDACACQbgG\
akEYaiIJIAJBmANqQRxqKQIANwMAIAJBuAZqQRBqIgogAkGYA2pBFGopAgA3AwAgAkHABmoiCyACQZ\
gDakEMaikCADcDACACIAIpApwDNwO4BiAEQRhqQQAoApiRQDYCACAEQRBqQQApApCRQDcCACAEQQAp\
AoiRQDcCCCAEQQA2AhwgBEIANwMAIAQgAikDuAY3AiAgBEEoaiALKQMANwIAIARBMGogCikDADcCAC\
AEQThqIAkpAwA3AgAgBEHAAGogCCkDADcCACAEQcgAaiAHKQMANwIAIARB0ABqIAYpAwA3AgAgBEHY\
AGogBSkDADcCAEELIQUMHQsCQAJAAkACQCADKQAAQtOQhZrTxYyZNFENACADKQAAQtOQhZrTxcyaNl\
ENASADKQAAQtOQhZrT5YycNFENAiADKQAAQtOQhZrTpc2YMlENAyADKQAAQtOQhdrUqIyZOFENByAD\
KQAAQtOQhdrUyMyaNlINCUHYAhAWIgRFDR0gBEEAQcgBEGYhBSACQQA2AgAgAkEEckEAQYgBEGYaIA\
JBiAE2AgAgAkGYA2ogAkGMARBhGiACQbgGaiACQZgDakEEckGIARBhGiAFQQA2AsgBIAVBzAFqIAJB\
uAZqQYgBEGEaQRUhBQwgC0HgAhAWIgRFDRMgBEEAQcgBEGYhBSACQQA2AgAgAkEEckEAQZABEGYaIA\
JBkAE2AgAgAkGYA2ogAkGUARBhGiACQbgGaiACQZgDakEEckGQARBhGiAFQQA2AsgBIAVBzAFqIAJB\
uAZqQZABEGEaQQwhBQwfC0HYAhAWIgRFDRMgBEEAQcgBEGYhBSACQQA2AgAgAkEEckEAQYgBEGYaIA\
JBiAE2AgAgAkGYA2ogAkGMARBhGiACQbgGaiACQZgDakEEckGIARBhGiAFQQA2AsgBIAVBzAFqIAJB\
uAZqQYgBEGEaQQ0hBQweC0G4AhAWIgRFDRMgBEEAQcgBEGYhBSACQQA2AgAgAkEEckEAQegAEGYaIA\
JB6AA2AgAgAkGYA2ogAkHsABBhGiACQbgGaiACQZgDakEEckHoABBhGiAFQQA2AsgBIAVBzAFqIAJB\
uAZqQegAEGEaQQ4hBQwdC0GYAhAWIgRFDRMgBEEAQcgBEGYhBSACQQA2AgAgAkEEckEAQcgAEGYaIA\
JByAA2AgAgAkGYA2ogAkHMABBhGiACQbgGaiACQZgDakEEckHIABBhGiAFQQA2AsgBIAVBzAFqIAJB\
uAZqQcgAEGEaQQ8hBQwcC0HwABAWIgRFDRMgAkEMakIANwIAIAJBFGpCADcCACACQRxqQgA3AgAgAk\
EkakIANwIAIAJBLGpCADcCACACQTRqQgA3AgAgAkE8akIANwIAIAJCADcCBCACQcAANgIAIAJBmANq\
IAJBxAAQYRogAkHwBmoiBiACQZgDakE8aikCADcDACACQegGaiIHIAJBmANqQTRqKQIANwMAIAJB4A\
ZqIgggAkGYA2pBLGopAgA3AwAgAkHYBmoiCSACQZgDakEkaikCADcDACACQdAGaiIKIAJBmANqQRxq\
KQIANwMAQRAhBSACQbgGakEQaiILIAJBmANqQRRqKQIANwMAIAJBwAZqIgwgAkGYA2pBDGopAgA3Aw\
AgAiACKQKcAzcDuAYgBEEANgIIIARB5ABqQQApArSRQDcCACAEQdwAakEAKQKskUA3AgAgBEHUAGpB\
ACkCpJFANwIAIARBACkCnJFANwJMIARBFGogDCkDADcCACAEIAIpA7gGNwIMIARBHGogCykDADcCAC\
AEQSRqIAopAwA3AgAgBEEsaiAJKQMANwIAIARBNGogCCkDADcCACAEQTxqIAcpAwA3AgAgBEHEAGog\
BikDADcCACAEQgA3AwAMGwtB8AAQFiIERQ0TIAJBDGpCADcCACACQRRqQgA3AgAgAkEcakIANwIAIA\
JBJGpCADcCACACQSxqQgA3AgAgAkE0akIANwIAIAJBPGpCADcCACACQgA3AgQgAkHAADYCACACQZgD\
aiACQcQAEGEaIAJB8AZqIgUgAkGYA2pBPGopAgA3AwAgAkHoBmoiBiACQZgDakE0aikCADcDACACQe\
AGaiIHIAJBmANqQSxqKQIANwMAIAJB2AZqIgggAkGYA2pBJGopAgA3AwAgAkHQBmoiCSACQZgDakEc\
aikCADcDACACQcgGaiIKIAJBmANqQRRqKQIANwMAIAJBwAZqIgsgAkGYA2pBDGopAgA3AwAgAiACKQ\
KcAzcDuAYgBEEANgIIIARB5ABqQQApAtSRQDcCACAEQdwAakEAKQLMkUA3AgAgBEHUAGpBACkCxJFA\
NwIAIARBACkCvJFANwJMIARBFGogCykDADcCACAEIAIpA7gGNwIMIARBHGogCikDADcCACAEQSRqIA\
kpAwA3AgAgBEEsaiAIKQMANwIAIARBNGogBykDADcCACAEQTxqIAYpAwA3AgAgBEHEAGogBSkDADcC\
ACAEQgA3AwBBESEFDBoLQdgBEBYiBEUNEyACQQA2AgAgAkEEckEAQYABEGYaIAJBgAE2AgAgAkGYA2\
ogAkGEARBhGiACQbgGaiACQZgDakEEckGAARBhGiAEQcgAakEAKQOYkkA3AwAgBEHAAGpBACkDkJJA\
NwMAIARBOGpBACkDiJJANwMAIARBMGpBACkDgJJANwMAIARBKGpBACkD+JFANwMAIARBIGpBACkD8J\
FANwMAIARBGGpBACkD6JFANwMAIARBACkD4JFANwMQIARBADYCUCAEQdQAaiACQbgGakGAARBhGiAE\
QgA3AwggBEIANwMAQRIhBQwZC0H4AhAWIgRFDRQgBEEAQcgBEGYhBSACQQA2AgAgAkEEckEAQagBEG\
YaIAJBqAE2AgAgAkGYA2ogAkGsARBhGiACQbgGaiACQZgDakEEckGoARBhGiAFQQA2AsgBIAVBzAFq\
IAJBuAZqQagBEGEaQRQhBQwYCyADQaSAwABBBhBeRQ0VC0EBIQRBgIHAAEEVEAAhBQwXC0GYA0EIQQ\
AoAryeQCICQQQgAhsRBQAAC0GYA0EIQQAoAryeQCICQQQgAhsRBQAAC0HYAUEIQQAoAryeQCICQQQg\
AhsRBQAAC0HgAkEIQQAoAryeQCICQQQgAhsRBQAAC0HYAkEIQQAoAryeQCICQQQgAhsRBQAAC0G4Ak\
EIQQAoAryeQCICQQQgAhsRBQAAC0GYAkEIQQAoAryeQCICQQQgAhsRBQAAC0HgAEEIQQAoAryeQCIC\
QQQgAhsRBQAAC0HgAEEIQQAoAryeQCICQQQgAhsRBQAAC0HgAEEIQQAoAryeQCICQQQgAhsRBQAAC0\
HgAkEIQQAoAryeQCICQQQgAhsRBQAAC0HYAkEIQQAoAryeQCICQQQgAhsRBQAAC0G4AkEIQQAoArye\
QCICQQQgAhsRBQAAC0GYAkEIQQAoAryeQCICQQQgAhsRBQAAC0HwAEEIQQAoAryeQCICQQQgAhsRBQ\
AAC0HwAEEIQQAoAryeQCICQQQgAhsRBQAAC0HYAUEIQQAoAryeQCICQQQgAhsRBQAAC0HYAUEIQQAo\
AryeQCICQQQgAhsRBQAAC0H4AkEIQQAoAryeQCICQQQgAhsRBQAAC0HYAkEIQQAoAryeQCICQQQgAh\
sRBQAACwJAQfgOEBYiBEUNACAEQQA2ApABIARBiAFqQQApAtSRQCINNwIAIARBgAFqQQApAsyRQCIO\
NwIAIARB+ABqQQApAsSRQCIPNwIAIARBACkCvJFAIhA3AnAgBEIANwMAIAQgEDcCCCAEQRBqIA83Ag\
AgBEEYaiAONwIAIARBIGogDTcCACAEQShqQQBBwwAQZhpBBCEFDAILQfgOQQhBACgCvJ5AIgJBBCAC\
GxEFAAALQZgDEBYiBEUNAiAEQcAAEDhBACEFCyAAQQhqIAQ2AgBBACEECwJAIAFBBGooAgBFDQAgAx\
AdCyAAIAQ2AgAgACAFNgIEIAJB4AdqJAAPC0GYA0EIQQAoAryeQCICQQQgAhsRBQAAC6YqAgx/An4j\
AEHQEGsiASQAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAk\
ACQAJAIABFDQAgACgCACICQX9GDQEgACACQQFqNgIAIABBBGohAgJAAkACQAJAAkACQAJAAkACQAJA\
AkACQAJAAkACQAJAAkACQAJAAkACQAJAIAAoAgQOFgABAgMEBQYHCAkKCwwNDg8QERITFBUACyACKA\
IEIQNBmAMQFiICRQ0XIAFBwAFqIANBgAEQYRogAUHAAWpBuAFqIANBuAFqKQMANwMAIAFBwAFqQbAB\
aiADQbABaikDADcDACABQcABakGoAWogA0GoAWopAwA3AwAgAUHAAWpBoAFqIANBoAFqKQMANwMAIA\
FBwAFqQZgBaiADQZgBaikDADcDACABQcABakGQAWogA0GQAWopAwA3AwAgAUHAAWpBiAFqIANBiAFq\
KQMANwMAIAEgAykDgAE3A8ACIAMpA4gDIQ0gAygCkAMhBCADKQPAASEOIAIgASABQcABakHAARBhQc\
ABEGEiBSAONwPAASAFIAMpA8gBNwPIASAFQdABaiADQdABaikDADcDACAFQdgBaiADQdgBaikDADcD\
ACAFQeABaiADQeABaikDADcDACAFQegBaiADQegBaikDADcDACAFQfABaiADQfABaikDADcDACAFQf\
gBaiADQfgBaikDADcDACAFQYACaiADQYACaikDADcDACAFQYgCaiADQYgCakGAARBhGiAFIAQ2ApAD\
IAUgDTcDiANBACEDDC8LIAIoAgQhA0GYAxAWIgJFDRcgAUHAAWogA0GAARBhGiABQcABakG4AWogA0\
G4AWopAwA3AwAgAUHAAWpBsAFqIANBsAFqKQMANwMAIAFBwAFqQagBaiADQagBaikDADcDACABQcAB\
akGgAWogA0GgAWopAwA3AwAgAUHAAWpBmAFqIANBmAFqKQMANwMAIAFBwAFqQZABaiADQZABaikDAD\
cDACABQcABakGIAWogA0GIAWopAwA3AwAgASADKQOAATcDwAIgAykDiAMhDSADKAKQAyEEIAMpA8AB\
IQ4gAiABQcABakHAARBhIgUgDjcDwAEgBSADKQPIATcDyAEgBUHQAWogA0HQAWopAwA3AwAgBUHYAW\
ogA0HYAWopAwA3AwAgBUHgAWogA0HgAWopAwA3AwAgBUHoAWogA0HoAWopAwA3AwAgBUHwAWogA0Hw\
AWopAwA3AwAgBUH4AWogA0H4AWopAwA3AwAgBUGAAmogA0GAAmopAwA3AwAgBUGIAmogA0GIAmpBgA\
EQYRogBSAENgKQAyAFIA03A4gDQQEhAwwuCyACKAIEIQNBmAMQFiICRQ0XIAFBwAFqIANBgAEQYRog\
AUHAAWpBuAFqIANBuAFqKQMANwMAIAFBwAFqQbABaiADQbABaikDADcDACABQcABakGoAWogA0GoAW\
opAwA3AwAgAUHAAWpBoAFqIANBoAFqKQMANwMAIAFBwAFqQZgBaiADQZgBaikDADcDACABQcABakGQ\
AWogA0GQAWopAwA3AwAgAUHAAWpBiAFqIANBiAFqKQMANwMAIAEgAykDgAE3A8ACIAMpA4gDIQ0gAy\
gCkAMhBCADKQPAASEOIAIgAUHAAWpBwAEQYSIFIA43A8ABIAUgAykDyAE3A8gBIAVB0AFqIANB0AFq\
KQMANwMAIAVB2AFqIANB2AFqKQMANwMAIAVB4AFqIANB4AFqKQMANwMAIAVB6AFqIANB6AFqKQMANw\
MAIAVB8AFqIANB8AFqKQMANwMAIAVB+AFqIANB+AFqKQMANwMAIAVBgAJqIANBgAJqKQMANwMAIAVB\
iAJqIANBiAJqQYABEGEaIAUgBDYCkAMgBSANNwOIA0ECIQMMLQsgAigCBCEDQdgBEBYiAkUNFyACIA\
MpAwg3AwggAiADKQMANwMAIAMoAnAhBSACQcgAaiADQcgAaikDADcDACACQcAAaiADQcAAaikDADcD\
ACACQThqIANBOGopAwA3AwAgAkEwaiADQTBqKQMANwMAIAJBKGogA0EoaikDADcDACACQSBqIANBIG\
opAwA3AwAgAkEYaiADQRhqKQMANwMAIAIgAykDEDcDECACIAMpA1A3A1AgAkHYAGogA0HYAGopAwA3\
AwAgAkHgAGogA0HgAGopAwA3AwAgAkHoAGogA0HoAGopAwA3AwAgAiAFNgJwIAJBjAFqIANBjAFqKQ\
IANwIAIAJBhAFqIANBhAFqKQIANwIAIAJB/ABqIANB/ABqKQIANwIAIAIgAykCdDcCdCACQcwBaiAD\
QcwBaikCADcCACACQcQBaiADQcQBaikCADcCACACQbwBaiADQbwBaikCADcCACACQbQBaiADQbQBai\
kCADcCACACQawBaiADQawBaikCADcCACACQaQBaiADQaQBaikCADcCACACQZwBaiADQZwBaikCADcC\
ACACIAMpApQBNwKUAUEDIQMMLAsgAigCBCEDQfgOEBYiAkUNFyABQcABakGIAWogA0GIAWopAwA3Aw\
AgAUHAAWpBgAFqIANBgAFqKQMANwMAIAFBwAFqQfgAaiADQfgAaikDADcDACABQcABakEQaiADQRBq\
KQMANwMAIAFBwAFqQRhqIANBGGopAwA3AwAgAUHAAWpBIGogA0EgaikDADcDACABQcABakEwaiADQT\
BqKQMANwMAIAFBwAFqQThqIANBOGopAwA3AwAgAUHAAWpBwABqIANBwABqKQMANwMAIAFBwAFqQcgA\
aiADQcgAaikDADcDACABQcABakHQAGogA0HQAGopAwA3AwAgAUHAAWpB2ABqIANB2ABqKQMANwMAIA\
FBwAFqQeAAaiADQeAAaikDADcDACABIAMpA3A3A7ACIAEgAykDCDcDyAEgASADKQMoNwPoASADKQMA\
IQ0gAy0AaiEGIAMtAGkhByADLQBoIQgCQCADKAKQAUEFdCIEDQBBACEEDCsLIAFBGGoiCSADQZQBai\
IDQRhqKQAANwMAIAFBEGoiCiADQRBqKQAANwMAIAFBCGoiCyADQQhqKQAANwMAIAEgAykAADcDACAD\
QSBqIQUgBEFgaiEMIAFBwAFqQZQBaiEDQQEhBANAIARBOEYNGSADIAEpAwA3AAAgA0EYaiAJKQMANw\
AAIANBEGogCikDADcAACADQQhqIAspAwA3AAAgDEUNKyAJIAVBGGopAAA3AwAgCiAFQRBqKQAANwMA\
IAsgBUEIaikAADcDACABIAUpAAA3AwAgA0EgaiEDIARBAWohBCAMQWBqIQwgBUEgaiEFDAALCyACKA\
IEIQNB4AIQFiICRQ0YIAFBwAFqIANByAEQYRogAUEEciADQcwBahBEIAEgAygCyAE2AgAgAUHAAWpB\
yAFqIAFBlAEQYRogAiABQcABakHgAhBhGkEFIQMMKgsgAigCBCEDQdgCEBYiAkUNGCABQcABaiADQc\
gBEGEaIAFBBHIgA0HMAWoQRSABIAMoAsgBNgIAIAFBwAFqQcgBaiABQYwBEGEaIAIgAUHAAWpB2AIQ\
YRpBBiEDDCkLIAIoAgQhA0G4AhAWIgJFDRggAUHAAWogA0HIARBhGiABQQRyIANBzAFqEEYgASADKA\
LIATYCACABQcABakHIAWogAUHsABBhGiACIAFBwAFqQbgCEGEaQQchAwwoCyACKAIEIQNBmAIQFiIC\
RQ0YIAFBwAFqIANByAEQYRogAUEEciADQcwBahBHIAEgAygCyAE2AgAgAUHAAWpByAFqIAFBzAAQYR\
ogAiABQcABakGYAhBhGkEIIQMMJwsgAigCBCEDQeAAEBYiAkUNGCADKQMAIQ0gAUHAAWpBBHIgA0EM\
ahA1IAEgAygCCDYCwAEgASABQcABakHEABBhIQUgAiANNwMAIAJBCGogBUHEABBhGiACQdQAaiADQd\
QAaikCADcCACACIAMpAkw3AkxBCSEDDCYLIAIoAgQhA0HgABAWIgJFDRggAUHAEGoiBSADQRBqKQMA\
NwMAIAFBuBBqQRBqIgQgA0EYaigCADYCACABIAMpAwg3A7gQIAMpAwAhDSABQcABakEEciADQSBqED\
UgASADKAIcNgLAASABIAFBwAFqQcQAEGEhAyACIA03AwAgAiADKQO4EDcDCCACQRBqIAUpAwA3AwAg\
AkEYaiAEKAIANgIAIAJBHGogA0HEABBhGkEKIQMMJQsgAigCBCEDQeAAEBYiAkUNGCABQcAQaiIFIA\
NBEGopAwA3AwAgAUG4EGpBEGoiBCADQRhqKAIANgIAIAEgAykDCDcDuBAgAykDACENIAFBwAFqQQRy\
IANBIGoQNSABIAMoAhw2AsABIAEgAUHAAWpBxAAQYSEDIAIgDTcDACACIAMpA7gQNwMIIAJBEGogBS\
kDADcDACACQRhqIAQoAgA2AgAgAkEcaiADQcQAEGEaQQshAwwkCyACKAIEIQNB4AIQFiICRQ0YIAFB\
wAFqIANByAEQYRogAUEEciADQcwBahBEIAEgAygCyAE2AgAgAUHAAWpByAFqIAFBlAEQYRogAiABQc\
ABakHgAhBhGkEMIQMMIwsgAigCBCEDQdgCEBYiAkUNGCABQcABaiADQcgBEGEaIAFBBHIgA0HMAWoQ\
RSABIAMoAsgBNgIAIAFBwAFqQcgBaiABQYwBEGEaIAIgAUHAAWpB2AIQYRpBDSEDDCILIAIoAgQhA0\
G4AhAWIgJFDRggAUHAAWogA0HIARBhGiABQQRyIANBzAFqEEYgASADKALIATYCACABQcABakHIAWog\
AUHsABBhGiACIAFBwAFqQbgCEGEaQQ4hAwwhCyACKAIEIQNBmAIQFiICRQ0YIAFBwAFqIANByAEQYR\
ogAUEEciADQcwBahBHIAEgAygCyAE2AgAgAUHAAWpByAFqIAFBzAAQYRogAiABQcABakGYAhBhGkEP\
IQMMIAsgAigCBCEDQfAAEBYiAkUNGCADKQMAIQ0gAUHAAWpBBHIgA0EMahA1IAEgAygCCDYCwAEgAS\
ABQcABakHEABBhIQUgAiANNwMAIAJBCGogBUHEABBhGiACQeQAaiADQeQAaikCADcCACACQdwAaiAD\
QdwAaikCADcCACACQdQAaiADQdQAaikCADcCACACIAMpAkw3AkxBECEDDB8LIAIoAgQhA0HwABAWIg\
JFDRggAykDACENIAFBwAFqQQRyIANBDGoQNSABIAMoAgg2AsABIAEgAUHAAWpBxAAQYSEFIAIgDTcD\
ACACQQhqIAVBxAAQYRogAkHkAGogA0HkAGopAgA3AgAgAkHcAGogA0HcAGopAgA3AgAgAkHUAGogA0\
HUAGopAgA3AgAgAiADKQJMNwJMQREhAwweCyACKAIEIQNB2AEQFiICRQ0YIANBCGopAwAhDSADKQMA\
IQ4gAUHAAWpBBHIgA0HUAGoQSCABIAMoAlA2AsABIAEgAUHAAWpBhAEQYSEFIAIgDTcDCCACIA43Aw\
AgAiADKQMQNwMQIAJBGGogA0EYaikDADcDACACQSBqIANBIGopAwA3AwAgAkEoaiADQShqKQMANwMA\
IAJBMGogA0EwaikDADcDACACQThqIANBOGopAwA3AwAgAkHAAGogA0HAAGopAwA3AwAgAkHIAGogA0\
HIAGopAwA3AwAgAkHQAGogBUGEARBhGkESIQMMHQsgAigCBCEDQdgBEBYiAkUNGCADQQhqKQMAIQ0g\
AykDACEOIAFBwAFqQQRyIANB1ABqEEggASADKAJQNgLAASABIAFBwAFqQYQBEGEhBSACIA03AwggAi\
AONwMAIAIgAykDEDcDECACQRhqIANBGGopAwA3AwAgAkEgaiADQSBqKQMANwMAIAJBKGogA0EoaikD\
ADcDACACQTBqIANBMGopAwA3AwAgAkE4aiADQThqKQMANwMAIAJBwABqIANBwABqKQMANwMAIAJByA\
BqIANByABqKQMANwMAIAJB0ABqIAVBhAEQYRpBEyEDDBwLIAIoAgQhA0H4AhAWIgJFDRggAUHAAWog\
A0HIARBhGiABQQRyIANBzAFqEEkgASADKALIATYCACABQcABakHIAWogAUGsARBhGiACIAFBwAFqQf\
gCEGEaQRQhAwwbCyACKAIEIQNB2AIQFiICRQ0YIAFBwAFqIANByAEQYRogAUEEciADQcwBahBFIAEg\
AygCyAE2AgAgAUHAAWpByAFqIAFBjAEQYRogAiABQcABakHYAhBhGkEVIQMMGgsQgQEACxCCAQALQZ\
gDQQhBACgCvJ5AIgFBBCABGxEFAAALQZgDQQhBACgCvJ5AIgFBBCABGxEFAAALQZgDQQhBACgCvJ5A\
IgFBBCABGxEFAAALQdgBQQhBACgCvJ5AIgFBBCABGxEFAAALQfgOQQhBACgCvJ5AIgFBBCABGxEFAA\
ALEH0AC0HgAkEIQQAoAryeQCIBQQQgARsRBQAAC0HYAkEIQQAoAryeQCIBQQQgARsRBQAAC0G4AkEI\
QQAoAryeQCIBQQQgARsRBQAAC0GYAkEIQQAoAryeQCIBQQQgARsRBQAAC0HgAEEIQQAoAryeQCIBQQ\
QgARsRBQAAC0HgAEEIQQAoAryeQCIBQQQgARsRBQAAC0HgAEEIQQAoAryeQCIBQQQgARsRBQAAC0Hg\
AkEIQQAoAryeQCIBQQQgARsRBQAAC0HYAkEIQQAoAryeQCIBQQQgARsRBQAAC0G4AkEIQQAoAryeQC\
IBQQQgARsRBQAAC0GYAkEIQQAoAryeQCIBQQQgARsRBQAAC0HwAEEIQQAoAryeQCIBQQQgARsRBQAA\
C0HwAEEIQQAoAryeQCIBQQQgARsRBQAAC0HYAUEIQQAoAryeQCIBQQQgARsRBQAAC0HYAUEIQQAoAr\
yeQCIBQQQgARsRBQAAC0H4AkEIQQAoAryeQCIBQQQgARsRBQAAC0HYAkEIQQAoAryeQCIBQQQgARsR\
BQAACyABIAQ2AtACIAEgBjoAqgIgASAHOgCpAiABIAg6AKgCIAEgDTcDwAEgAiABQcABakH4DhBhGk\
EEIQMLIAAgACgCAEF/ajYCAAJAQQwQFiIARQ0AIAAgAjYCCCAAIAM2AgQgAEEANgIAIAFB0BBqJAAg\
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\
QAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAAKAIEDhYAAQIDBAUGBwgJCgsMDQ\
4PEBESExQVAAsgASgCBCIBIAEpA4gDNwPAASABIAFBiAJqQYABEGEiAUG4AWogAUGAAmopAwA3AwAg\
AUGwAWogAUH4AWopAwA3AwAgAUGoAWogAUHwAWopAwA3AwAgAUGgAWogAUHoAWopAwA3AwAgAUGYAW\
ogAUHgAWopAwA3AwAgAUGQAWogAUHYAWopAwA3AwAgAUGIAWogAUHQAWopAwA3AwAgASABKQPIATcD\
gAEMFQsgASgCBCIBIAEpA4gDNwPAASABIAFBiAJqQYABEGEiAUG4AWogAUGAAmopAwA3AwAgAUGwAW\
ogAUH4AWopAwA3AwAgAUGoAWogAUHwAWopAwA3AwAgAUGgAWogAUHoAWopAwA3AwAgAUGYAWogAUHg\
AWopAwA3AwAgAUGQAWogAUHYAWopAwA3AwAgAUGIAWogAUHQAWopAwA3AwAgASABKQPIATcDgAEMFA\
sgASgCBCIBIAEpA4gDNwPAASABIAFBiAJqQYABEGEiAUG4AWogAUGAAmopAwA3AwAgAUGwAWogAUH4\
AWopAwA3AwAgAUGoAWogAUHwAWopAwA3AwAgAUGgAWogAUHoAWopAwA3AwAgAUGYAWogAUHgAWopAw\
A3AwAgAUGQAWogAUHYAWopAwA3AwAgAUGIAWogAUHQAWopAwA3AwAgASABKQPIATcDgAEMEwsgASgC\
BCIBIAEpAwg3AwAgASABKQKUATcCECABQRhqIAFBnAFqKQIANwIAIAFBIGogAUGkAWopAgA3AgAgAU\
EoaiABQawBaikCADcCACABQTBqIAFBtAFqKQIANwIAIAFBOGogAUG8AWopAgA3AgAgAUHAAGogAUHE\
AWopAgA3AgAgAUHIAGogAUHMAWopAgA3AgAgAUHoAGogAUGMAWopAgA3AgAgAUHgAGogAUGEAWopAg\
A3AgAgAUHYAGogAUH8AGopAgA3AgAgASABKQJ0NwJQDBILIAEoAgQiAUIANwMAIAEgASkDcDcDCCAB\
QSBqIAFBiAFqKQMANwMAIAFBGGogAUGAAWopAwA3AwAgAUEQaiABQfgAaikDADcDACABQShqQQBBwg\
AQZhogASgCkAFFDREgAUEANgKQAQwRCyABKAIEQQBBzAEQZhoMEAsgASgCBEEAQcwBEGYaDA8LIAEo\
AgRBAEHMARBmGgwOCyABKAIEQQBBzAEQZhoMDQsgASgCBCIBQgA3AwAgAUEAKQL4kEA3AkwgAUEANg\
IIIAFB1ABqQQApAoCRQDcCAAwMCyABKAIEIgFCADcDACABQQA2AhwgAUEAKQKIkUA3AgggAUEQakEA\
KQKQkUA3AgAgAUEYakEAKAKYkUA2AgAMCwsgASgCBCIBQQApAoiRQDcCCCABQQA2AhwgAUIANwMAIA\
FBGGpBACgCmJFANgIAIAFBEGpBACkCkJFANwIADAoLIAEoAgRBAEHMARBmGgwJCyABKAIEQQBBzAEQ\
ZhoMCAsgASgCBEEAQcwBEGYaDAcLIAEoAgRBAEHMARBmGgwGCyABKAIEIgFCADcDACABQQA2AgggAU\
EAKQKckUA3AkwgAUHUAGpBACkCpJFANwIAIAFB3ABqQQApAqyRQDcCACABQeQAakEAKQK0kUA3AgAM\
BQsgASgCBCIBQgA3AwAgAUEANgIIIAFBACkCvJFANwJMIAFB1ABqQQApAsSRQDcCACABQdwAakEAKQ\
LMkUA3AgAgAUHkAGpBACkC1JFANwIADAQLIAEoAgQiAUIANwMIIAFCADcDACABQQA2AlAgAUEAKQPg\
kUA3AxAgAUEYakEAKQPokUA3AwAgAUEgakEAKQPwkUA3AwAgAUEoakEAKQP4kUA3AwAgAUEwakEAKQ\
OAkkA3AwAgAUE4akEAKQOIkkA3AwAgAUHAAGpBACkDkJJANwMAIAFByABqQQApA5iSQDcDAAwDCyAB\
KAIEIgFCADcDCCABQgA3AwAgAUEANgJQIAFBACkDoJJANwMQIAFBGGpBACkDqJJANwMAIAFBIGpBAC\
kDsJJANwMAIAFBKGpBACkDuJJANwMAIAFBMGpBACkDwJJANwMAIAFBOGpBACkDyJJANwMAIAFBwABq\
QQApA9CSQDcDACABQcgAakEAKQPYkkA3AwAMAgsgASgCBEEAQcwBEGYaDAELIAEoAgRBAEHMARBmGg\
sgAEEANgIADwsQgQEACxCCAQAL/AkCEH8EfiMAQZABayICJAACQAJAAkAgASgCkAEiA0UNAAJAAkAC\
QAJAIAFB6QBqLQAAIgRBBnRBACABLQBoIgVrRw0AIANBfmohBiADQQFNDQYgAkEQaiABQfgAaikDAD\
cDACACQRhqIAFBgAFqKQMANwMAIAJBIGogAUGIAWopAwA3AwAgAkEwaiABQZQBaiIHIAZBBXRqIgRB\
CGopAgA3AwAgAkE4aiAEQRBqKQIANwMAQcAAIQUgAkHAAGogBEEYaikCADcDACACIAEpA3A3AwggAi\
AEKQIANwMoIANBBXQgB2pBYGoiBCkCACESIAQpAgghEyAEKQIQIRQgAS0AaiEHIAJB4ABqIAQpAhg3\
AwAgAkHYAGogFDcDACACQdAAaiATNwMAIAJByABqIBI3AwBCACESIAJCADcDACACIAdBBHIiCDoAaS\
ACQcAAOgBoIAZFDQIgAkEIaiEEIAghCQwBCyACQRBqIAFBEGopAwA3AwAgAkEYaiABQRhqKQMANwMA\
IAJBIGogAUEgaikDADcDACACQTBqIAFBMGopAwA3AwAgAkE4aiABQThqKQMANwMAIAJBwABqIAFBwA\
BqKQMANwMAIAJByABqIAFByABqKQMANwMAIAJB0ABqIAFB0ABqKQMANwMAIAJB2ABqIAFB2ABqKQMA\
NwMAIAJB4ABqIAFB4ABqKQMANwMAIAIgASkDCDcDCCACIAEpAyg3AyggAiABLQBqIgcgBEVyQQJyIg\
k6AGkgAiAFOgBoIAIgASkDACISNwMAIAdBBHIhCCACQQhqIQQgAyEGC0EBIAZrIQogAUHwAGohCyAG\
QQV0IAFqQfQAaiEBIAJBKGohByAGQX9qIANPIQwDQCAMDQIgAkHwAGpBGGoiBiAEQRhqIg0pAgA3Aw\
AgAkHwAGpBEGoiDiAEQRBqIg8pAgA3AwAgAkHwAGpBCGoiECAEQQhqIhEpAgA3AwAgAiAEKQIANwNw\
IAJB8ABqIAcgBSASIAkQGiAQKQMAIRIgDikDACETIAYpAwAhFCACKQNwIRUgDSALQRhqKQMANwMAIA\
8gC0EQaikDADcDACARIAtBCGopAwA3AwAgBCALKQMANwMAIAcgASkCADcCACAHQQhqIAFBCGopAgA3\
AgAgB0EQaiABQRBqKQIANwIAIAdBGGogAUEYaikCADcCACACIBQ3A2AgAiATNwNYIAIgEjcDUCACIB\
U3A0ggAiAIOgBpQcAAIQUgAkHAADoAaEIAIRIgAkIANwMAIAFBYGohASAIIQkgCkEBaiIKQQFHDQAL\
CyAAIAJB8AAQYRoMAgtBACAKayADQayHwAAQWQALIAAgASkDCDcDCCAAIAEpAyg3AyggAEEQaiABQR\
BqKQMANwMAIABBGGogAUEYaikDADcDACAAQSBqIAFBIGopAwA3AwAgAEEwaiABQTBqKQMANwMAIABB\
OGogAUE4aikDADcDACAAQcAAaiABQcAAaikDADcDACAAQcgAaiABQcgAaikDADcDACAAQdAAaiABQd\
AAaikDADcDACAAQdgAaiABQdgAaikDADcDACAAQeAAaiABQeAAaikDADcDACABQekAai0AACEEIAEt\
AGohByAAIAEtAGg6AGggACABKQMANwMAIAAgByAERXJBAnI6AGkLIABBADoAcCACQZABaiQADwsgBi\
ADQZyHwAAQWQALpwgCAX8tfiAAKQPAASECIAApA5gBIQMgACkDcCEEIAApA0ghBSAAKQMgIQYgACkD\
uAEhByAAKQOQASEIIAApA2ghCSAAKQNAIQogACkDGCELIAApA7ABIQwgACkDiAEhDSAAKQNgIQ4gAC\
kDOCEPIAApAxAhECAAKQOoASERIAApA4ABIRIgACkDWCETIAApAzAhFCAAKQMIIRUgACkDoAEhFiAA\
KQN4IRcgACkDUCEYIAApAyghGSAAKQMAIRpBwH4hAQNAIAwgDSAOIA8gEIWFhYUiG0IBiSAWIBcgGC\
AZIBqFhYWFIhyFIh0gFIUhHiACIAcgCCAJIAogC4WFhYUiHyAcQgGJhSIchSEgIAIgAyAEIAUgBoWF\
hYUiIUIBiSAbhSIbIAqFQjeJIiIgH0IBiSARIBIgEyAUIBWFhYWFIgqFIh8gEIVCPokiI0J/hYMgHS\
ARhUICiSIkhSECICIgISAKQgGJhSIQIBeFQimJIiEgBCAchUIniSIlQn+Fg4UhESAbIAeFQjiJIiYg\
HyANhUIPiSInQn+FgyAdIBOFQgqJIiiFIQ0gKCAQIBmFQiSJIilCf4WDIAYgHIVCG4kiKoUhFyAQIB\
aFQhKJIhYgHyAPhUIGiSIrIB0gFYVCAYkiLEJ/hYOFIQQgAyAchUIIiSItIBsgCYVCGYkiLkJ/hYMg\
K4UhEyAFIByFQhSJIhwgGyALhUIciSILQn+FgyAfIAyFQj2JIg+FIQUgCyAPQn+FgyAdIBKFQi2JIh\
2FIQogECAYhUIDiSIVIA8gHUJ/hYOFIQ8gHSAVQn+FgyAchSEUIAsgFSAcQn+Fg4UhGSAbIAiFQhWJ\
Ih0gECAahSIcICBCDokiG0J/hYOFIQsgGyAdQn+FgyAfIA6FQiuJIh+FIRAgHSAfQn+FgyAeQiyJIh\
2FIRUgAUH4kMAAaikDACAcIB8gHUJ/hYOFhSEaICYgKSAqQn+Fg4UiHyEDIB0gHEJ/hYMgG4UiHSEG\
ICEgIyAkQn+Fg4UiHCEHICogJkJ/hYMgJ4UiGyEIICwgFkJ/hYMgLYUiJiEJICQgIUJ/hYMgJYUiJC\
EMIC4gFiAtQn+Fg4UiISEOICkgJyAoQn+Fg4UiJyESICUgIkJ/hYMgI4UiIiEWIC4gK0J/hYMgLIUi\
IyEYIAFBCGoiAQ0ACyAAICI3A6ABIAAgFzcDeCAAICM3A1AgACAZNwMoIAAgGjcDACAAIBE3A6gBIA\
AgJzcDgAEgACATNwNYIAAgFDcDMCAAIBU3AwggACAkNwOwASAAIA03A4gBIAAgITcDYCAAIA83Azgg\
ACAQNwMQIAAgHDcDuAEgACAbNwOQASAAICY3A2ggACAKNwNAIAAgCzcDGCAAIAI3A8ABIAAgHzcDmA\
EgACAENwNwIAAgBTcDSCAAIB03AyALsQgBCn8gACgCECEDAkACQAJAAkAgACgCCCIEQQFGDQAgA0EB\
Rg0BIAAoAhggASACIABBHGooAgAoAgwRCAAhAwwDCyADQQFHDQELIAEgAmohBQJAAkACQCAAQRRqKA\
IAIgYNAEEAIQcgASEDDAELQQAhByABIQMDQCADIgggBUYNAiAIQQFqIQMCQCAILAAAIglBf0oNACAJ\
Qf8BcSEJAkACQCADIAVHDQBBACEKIAUhAwwBCyAIQQJqIQMgCC0AAUE/cSEKCyAJQeABSQ0AAkACQC\
ADIAVHDQBBACELIAUhDAwBCyADQQFqIQwgAy0AAEE/cSELCwJAIAlB8AFPDQAgDCEDDAELAkACQCAM\
IAVHDQBBACEMIAUhAwwBCyAMQQFqIQMgDC0AAEE/cSEMCyAKQQx0IAlBEnRBgIDwAHFyIAtBBnRyIA\
xyQYCAxABGDQMLIAcgCGsgA2ohByAGQX9qIgYNAAsLIAMgBUYNAAJAIAMsAAAiCEF/Sg0AAkACQCAD\
QQFqIAVHDQBBACEDIAUhBgwBCyADQQJqIQYgAy0AAUE/cUEMdCEDCyAIQf8BcUHgAUkNAAJAAkAgBi\
AFRw0AQQAhBiAFIQkMAQsgBkEBaiEJIAYtAABBP3FBBnQhBgsgCEH/AXFB8AFJDQAgCEH/AXEhCAJA\
AkAgCSAFRw0AQQAhBQwBCyAJLQAAQT9xIQULIAMgCEESdEGAgPAAcXIgBnIgBXJBgIDEAEYNAQsCQA\
JAAkAgBw0AQQAhCAwBCwJAIAcgAkkNAEEAIQMgAiEIIAcgAkYNAQwCC0EAIQMgByEIIAEgB2osAABB\
QEgNAQsgCCEHIAEhAwsgByACIAMbIQIgAyABIAMbIQELIARBAUYNACAAKAIYIAEgAiAAQRxqKAIAKA\
IMEQgADwsCQAJAAkAgAkUNAEEAIQggAiEHIAEhAwNAIAggAy0AAEHAAXFBgAFHaiEIIANBAWohAyAH\
QX9qIgcNAAsgCCAAKAIMIgVPDQFBACEIIAIhByABIQMDQCAIIAMtAABBwAFxQYABR2ohCCADQQFqIQ\
MgB0F/aiIHDQAMAwsLQQAhCCAAKAIMIgUNAQsgACgCGCABIAIgAEEcaigCACgCDBEIAA8LQQAhAyAF\
IAhrIgghBgJAAkACQEEAIAAtACAiByAHQQNGG0EDcQ4DAgABAgtBACEGIAghAwwBCyAIQQF2IQMgCE\
EBakEBdiEGCyADQQFqIQMgAEEcaigCACEHIAAoAgQhCCAAKAIYIQUCQANAIANBf2oiA0UNASAFIAgg\
BygCEBEGAEUNAAtBAQ8LQQEhAyAIQYCAxABGDQAgBSABIAIgBygCDBEIAA0AQQAhAwNAAkAgBiADRw\
0AIAYgBkkPCyADQQFqIQMgBSAIIAcoAhARBgBFDQALIANBf2ogBkkPCyADC5oIAQp/QQAhAgJAIAFB\
zP97Sw0AQRAgAUELakF4cSABQQtJGyEDIABBfGoiBCgCACIFQXhxIQYCQAJAAkACQAJAAkACQCAFQQ\
NxRQ0AIABBeGohByAGIANPDQFBACgCiJ5AIAcgBmoiCEYNAkEAKAKEnkAgCEYNAyAIKAIEIgVBAnEN\
BiAFQXhxIgkgBmoiCiADTw0EDAYLIANBgAJJDQUgBiADQQRySQ0FIAYgA2tBgYAITw0FDAQLIAYgA2\
siAUEQSQ0DIAQgBUEBcSADckECcjYCACAHIANqIgIgAUEDcjYCBCACIAFqIgMgAygCBEEBcjYCBCAC\
IAEQHgwDC0EAKAKAnkAgBmoiBiADTQ0DIAQgBUEBcSADckECcjYCACAHIANqIgEgBiADayICQQFyNg\
IEQQAgAjYCgJ5AQQAgATYCiJ5ADAILQQAoAvydQCAGaiIGIANJDQICQAJAIAYgA2siAUEPSw0AIAQg\
BUEBcSAGckECcjYCACAHIAZqIgEgASgCBEEBcjYCBEEAIQFBACECDAELIAQgBUEBcSADckECcjYCAC\
AHIANqIgIgAUEBcjYCBCACIAFqIgMgATYCACADIAMoAgRBfnE2AgQLQQAgAjYChJ5AQQAgATYC/J1A\
DAELIAogA2shCwJAAkACQCAJQYACSQ0AIAgoAhghCQJAAkAgCCgCDCICIAhHDQAgCEEUQRAgCCgCFC\
ICG2ooAgAiAQ0BQQAhAgwDCyAIKAIIIgEgAjYCDCACIAE2AggMAgsgCEEUaiAIQRBqIAIbIQYDQCAG\
IQUCQCABIgJBFGoiBigCACIBDQAgAkEQaiEGIAIoAhAhAQsgAQ0ACyAFQQA2AgAMAQsCQCAIQQxqKA\
IAIgEgCEEIaigCACICRg0AIAIgATYCDCABIAI2AggMAgtBAEEAKALsmkBBfiAFQQN2d3E2AuyaQAwB\
CyAJRQ0AAkACQCAIKAIcQQJ0QfycwABqIgEoAgAgCEYNACAJQRBBFCAJKAIQIAhGG2ogAjYCACACRQ\
0CDAELIAEgAjYCACACDQBBAEEAKALwmkBBfiAIKAIcd3E2AvCaQAwBCyACIAk2AhgCQCAIKAIQIgFF\
DQAgAiABNgIQIAEgAjYCGAsgCCgCFCIBRQ0AIAJBFGogATYCACABIAI2AhgLAkAgC0EQSQ0AIAQgBC\
gCAEEBcSADckECcjYCACAHIANqIgEgC0EDcjYCBCABIAtqIgIgAigCBEEBcjYCBCABIAsQHgwBCyAE\
IAQoAgBBAXEgCnJBAnI2AgAgByAKaiIBIAEoAgRBAXI2AgQLIAAhAgwBCyABEBYiA0UNACADIAAgAU\
F8QXggBCgCACICQQNxGyACQXhxaiICIAIgAUsbEGEhASAAEB0gAQ8LIAIL1gcCB38BfiMAQcAAayIC\
JAAgABAsIAJBOGoiAyAAQcgAaikDADcDACACQTBqIgQgAEHAAGopAwA3AwAgAkEoaiIFIABBOGopAw\
A3AwAgAkEgaiIGIABBMGopAwA3AwAgAkEYaiIHIABBKGopAwA3AwAgAkEQaiIIIABBIGopAwA3AwAg\
AkEIaiAAQRhqKQMAIgk3AwAgASAJQjiGIAlCKIZCgICAgICAwP8Ag4QgCUIYhkKAgICAgOA/gyAJQg\
iGQoCAgIDwH4OEhCAJQgiIQoCAgPgPgyAJQhiIQoCA/AeDhCAJQiiIQoD+A4MgCUI4iISEhDcACCAB\
IAApAxAiCUI4hiAJQiiGQoCAgICAgMD/AIOEIAlCGIZCgICAgIDgP4MgCUIIhkKAgICA8B+DhIQgCU\
IIiEKAgID4D4MgCUIYiEKAgPwHg4QgCUIoiEKA/gODIAlCOIiEhIQ3AAAgAiAJNwMAIAEgCCkDACIJ\
QjiGIAlCKIZCgICAgICAwP8Ag4QgCUIYhkKAgICAgOA/gyAJQgiGQoCAgIDwH4OEhCAJQgiIQoCAgP\
gPgyAJQhiIQoCA/AeDhCAJQiiIQoD+A4MgCUI4iISEhDcAECABIAcpAwAiCUI4hiAJQiiGQoCAgICA\
gMD/AIOEIAlCGIZCgICAgIDgP4MgCUIIhkKAgICA8B+DhIQgCUIIiEKAgID4D4MgCUIYiEKAgPwHg4\
QgCUIoiEKA/gODIAlCOIiEhIQ3ABggASAGKQMAIglCOIYgCUIohkKAgICAgIDA/wCDhCAJQhiGQoCA\
gICA4D+DIAlCCIZCgICAgPAfg4SEIAlCCIhCgICA+A+DIAlCGIhCgID8B4OEIAlCKIhCgP4DgyAJQj\
iIhISENwAgIAEgBSkDACIJQjiGIAlCKIZCgICAgICAwP8Ag4QgCUIYhkKAgICAgOA/gyAJQgiGQoCA\
gIDwH4OEhCAJQgiIQoCAgPgPgyAJQhiIQoCA/AeDhCAJQiiIQoD+A4MgCUI4iISEhDcAKCABIAQpAw\
AiCUI4hiAJQiiGQoCAgICAgMD/AIOEIAlCGIZCgICAgIDgP4MgCUIIhkKAgICA8B+DhIQgCUIIiEKA\
gID4D4MgCUIYiEKAgPwHg4QgCUIoiEKA/gODIAlCOIiEhIQ3ADAgASADKQMAIglCOIYgCUIohkKAgI\
CAgIDA/wCDhCAJQhiGQoCAgICA4D+DIAlCCIZCgICAgPAfg4SEIAlCCIhCgICA+A+DIAlCGIhCgID8\
B4OEIAlCKIhCgP4DgyAJQjiIhISENwA4IAJBwABqJAALtAYBFX8jAEGwAWsiAiQAAkACQAJAIAAoAp\
ABIgMgAXunIgRNDQAgA0F/aiEFIABB8ABqIQYgA0EFdCAAakHUAGohByACQShqIQggAkEIaiEJIAJB\
8ABqQSBqIQogA0F+akE3SSELA0AgACAFNgKQASAFRQ0CIAAgBUF/aiIMNgKQASAALQBqIQ0gAkHwAG\
pBGGoiAyAHQRhqIg4pAAA3AwAgAkHwAGpBEGoiDyAHQRBqIhApAAA3AwAgAkHwAGpBCGoiESAHQQhq\
IhIpAAA3AwAgCiAHQSBqKQAANwAAIApBCGogB0EoaikAADcAACAKQRBqIAdBMGopAAA3AAAgCkEYai\
AHQThqKQAANwAAIAkgBikDADcDACAJQQhqIAZBCGoiEykDADcDACAJQRBqIAZBEGoiFCkDADcDACAJ\
QRhqIAZBGGoiFSkDADcDACACIAcpAAA3A3AgCEE4aiACQfAAakE4aikDADcAACAIQTBqIAJB8ABqQT\
BqKQMANwAAIAhBKGogAkHwAGpBKGopAwA3AAAgCEEgaiAKKQMANwAAIAhBGGogAykDADcAACAIQRBq\
IA8pAwA3AAAgCEEIaiARKQMANwAAIAggAikDcDcAACACQcAAOgBoIAIgDUEEciINOgBpIAJCADcDAC\
ADIBUpAgA3AwAgDyAUKQIANwMAIBEgEykCADcDACACIAYpAgA3A3AgAkHwAGogCEHAAEIAIA0QGiAD\
KAIAIQMgDygCACEPIBEoAgAhESACKAKMASENIAIoAoQBIRMgAigCfCEUIAIoAnQhFSACKAJwIRYgC0\
UNAyAHIBY2AgAgB0EcaiANNgIAIA4gAzYCACAHQRRqIBM2AgAgECAPNgIAIAdBDGogFDYCACASIBE2\
AgAgB0EEaiAVNgIAIAAgBTYCkAEgB0FgaiEHIAwhBSAMIARPDQALCyACQbABaiQADwtBmJnAAEErQY\
yHwAAQYAALIAIgDTYCjAEgAiADNgKIASACIBM2AoQBIAIgDzYCgAEgAiAUNgJ8IAIgETYCeCACIBU2\
AnQgAiAWNgJwQeCSwABBKyACQfAAakHUiMAAQdyHwAAQUgALoAUBCn8jAEEwayIDJAAgA0EkaiABNg\
IAIANBAzoAKCADQoCAgICABDcDCCADIAA2AiBBACEAIANBADYCGCADQQA2AhACQAJAAkACQCACKAII\
IgENACACKAIAIQQgAigCBCIFIAJBFGooAgAiASABIAVLGyIGRQ0BIAIoAhAhB0EAIQAgBiEBA0ACQC\
AEIABqIghBBGooAgAiCUUNACADKAIgIAgoAgAgCSADKAIkKAIMEQgADQQLIAcgAGoiCCgCACADQQhq\
IAhBBGooAgARBgANAyAAQQhqIQAgAUF/aiIBDQALIAYhAAwBCyACKAIAIQQgAigCBCIFIAJBDGooAg\
AiCCAIIAVLGyIKRQ0AIAFBEGohACAKIQsgBCEBA0ACQCABQQRqKAIAIghFDQAgAygCICABKAIAIAgg\
AygCJCgCDBEIAA0DCyADIABBDGotAAA6ACggAyAAQXRqKQIAQiCJNwMIIABBCGooAgAhCCACKAIQIQ\
dBACEGQQAhCQJAAkACQCAAQQRqKAIADgMBAAIBCyAIQQN0IQxBACEJIAcgDGoiDCgCBEEFRw0BIAwo\
AgAoAgAhCAtBASEJCyAAQXBqIQwgAyAINgIUIAMgCTYCECAAKAIAIQgCQAJAAkAgAEF8aigCAA4DAQ\
ACAQsgCEEDdCEJIAcgCWoiCSgCBEEFRw0BIAkoAgAoAgAhCAtBASEGCyADIAg2AhwgAyAGNgIYIAcg\
DCgCAEEDdGoiCCgCACADQQhqIAgoAgQRBgANAiABQQhqIQEgAEEgaiEAIAtBf2oiCw0ACyAKIQALAk\
AgBSAATQ0AIAMoAiAgBCAAQQN0aiIAKAIAIAAoAgQgAygCJCgCDBEIAA0BC0EAIQAMAQtBASEACyAD\
QTBqJAAgAAv0BAEHfyAAKAIAIgVBAXEiBiAEaiEHAkACQCAFQQRxDQBBACEBDAELQQAhCAJAIAJFDQ\
AgAiEJIAEhCgNAIAggCi0AAEHAAXFBgAFHaiEIIApBAWohCiAJQX9qIgkNAAsLIAggB2ohBwtBK0GA\
gMQAIAYbIQYCQAJAIAAoAghBAUYNAEEBIQogACAGIAEgAhBfDQEgACgCGCADIAQgAEEcaigCACgCDB\
EIAA8LAkACQAJAAkACQCAAQQxqKAIAIgggB00NACAFQQhxDQRBACEKIAggB2siCSEFQQEgAC0AICII\
IAhBA0YbQQNxDgMDAQIDC0EBIQogACAGIAEgAhBfDQQgACgCGCADIAQgAEEcaigCACgCDBEIAA8LQQ\
AhBSAJIQoMAQsgCUEBdiEKIAlBAWpBAXYhBQsgCkEBaiEKIABBHGooAgAhCSAAKAIEIQggACgCGCEH\
AkADQCAKQX9qIgpFDQEgByAIIAkoAhARBgBFDQALQQEPC0EBIQogCEGAgMQARg0BIAAgBiABIAIQXw\
0BIAcgAyAEIAkoAgwRCAANAUEAIQoCQANAAkAgBSAKRw0AIAUhCgwCCyAKQQFqIQogByAIIAkoAhAR\
BgBFDQALIApBf2ohCgsgCiAFSSEKDAELIAAoAgQhBSAAQTA2AgQgAC0AICELQQEhCiAAQQE6ACAgAC\
AGIAEgAhBfDQAgCCAHa0EBaiEKIABBHGooAgAhCCAAKAIYIQkCQANAIApBf2oiCkUNASAJQTAgCCgC\
EBEGAEUNAAtBAQ8LQQEhCiAJIAMgBCAIKAIMEQgADQAgACALOgAgIAAgBTYCBEEADwsgCguBBQEBfi\
AAECwgASAAKQMQIgJCOIYgAkIohkKAgICAgIDA/wCDhCACQhiGQoCAgICA4D+DIAJCCIZCgICAgPAf\
g4SEIAJCCIhCgICA+A+DIAJCGIhCgID8B4OEIAJCKIhCgP4DgyACQjiIhISENwAAIAEgAEEYaikDAC\
ICQjiGIAJCKIZCgICAgICAwP8Ag4QgAkIYhkKAgICAgOA/gyACQgiGQoCAgIDwH4OEhCACQgiIQoCA\
gPgPgyACQhiIQoCA/AeDhCACQiiIQoD+A4MgAkI4iISEhDcACCABIABBIGopAwAiAkI4hiACQiiGQo\
CAgICAgMD/AIOEIAJCGIZCgICAgIDgP4MgAkIIhkKAgICA8B+DhIQgAkIIiEKAgID4D4MgAkIYiEKA\
gPwHg4QgAkIoiEKA/gODIAJCOIiEhIQ3ABAgASAAQShqKQMAIgJCOIYgAkIohkKAgICAgIDA/wCDhC\
ACQhiGQoCAgICA4D+DIAJCCIZCgICAgPAfg4SEIAJCCIhCgICA+A+DIAJCGIhCgID8B4OEIAJCKIhC\
gP4DgyACQjiIhISENwAYIAEgAEEwaikDACICQjiGIAJCKIZCgICAgICAwP8Ag4QgAkIYhkKAgICAgO\
A/gyACQgiGQoCAgIDwH4OEhCACQgiIQoCAgPgPgyACQhiIQoCA/AeDhCACQiiIQoD+A4MgAkI4iISE\
hDcAICABIABBOGopAwAiAkI4hiACQiiGQoCAgICAgMD/AIOEIAJCGIZCgICAgIDgP4MgAkIIhkKAgI\
CA8B+DhIQgAkIIiEKAgID4D4MgAkIYiEKAgPwHg4QgAkIoiEKA/gODIAJCOIiEhIQ3ACgLxAQCBH8B\
fiAAQQhqIQIgACkDACEGAkACQAJAAkAgACgCHCIDQcAARw0AIAIgAEEgakEBEBVBACEDIABBADYCHA\
wBCyADQT9LDQELIABBIGoiBCADakGAAToAACAAIAAoAhwiBUEBaiIDNgIcAkAgA0HBAE8NACAAQRxq\
IANqQQRqQQBBPyAFaxBmGgJAQcAAIAAoAhxrQQhPDQAgAiAEQQEQFSAAKAIcIgNBwQBPDQMgBEEAIA\
MQZhoLIABB2ABqIAZCO4YgBkIrhkKAgICAgIDA/wCDhCAGQhuGQoCAgICA4D+DIAZCC4ZCgICAgPAf\
g4SEIAZCBYhCgICA+A+DIAZCFYhCgID8B4OEIAZCJYhCgP4DgyAGQgOGQjiIhISENwMAIAIgBEEBEB\
UgAEEANgIcIAEgACgCCCIDQRh0IANBCHRBgID8B3FyIANBCHZBgP4DcSADQRh2cnI2AAAgASAAQQxq\
KAIAIgNBGHQgA0EIdEGAgPwHcXIgA0EIdkGA/gNxIANBGHZycjYABCABIABBEGooAgAiA0EYdCADQQ\
h0QYCA/AdxciADQQh2QYD+A3EgA0EYdnJyNgAIIAEgAEEUaigCACIDQRh0IANBCHRBgID8B3FyIANB\
CHZBgP4DcSADQRh2cnI2AAwgASAAQRhqKAIAIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGH\
ZycjYAEA8LIANBwABBrJPAABBWAAsgA0HAAEG8k8AAEFkACyADQcAAQcyTwAAQVQALrQQBCX8jAEEw\
ayIGJABBACEHIAZBADYCCAJAAkACQAJAAkAgAUFAcSIIRQ0AIAhBQGpBBnZBAWohCUEAIQcgBiEKIA\
AhCwNAIAdBAkYNAiAKIAs2AgAgBiAHQQFqIgc2AgggCkEEaiEKIAtBwABqIQsgCSAHRw0ACwsgAUE/\
cSEMAkAgBUEFdiILIAdB/////wNxIgogCiALSxsiC0UNACADQQRyIQ0gC0EFdCEOQQAhCyAGIQoDQC\
AKKAIAIQcgBkEQakEYaiIJIAJBGGopAgA3AwAgBkEQakEQaiIBIAJBEGopAgA3AwAgBkEQakEIaiID\
IAJBCGopAgA3AwAgBiACKQIANwMQIAZBEGogB0HAAEIAIA0QGiAEIAtqIgdBGGogCSkDADcAACAHQR\
BqIAEpAwA3AAAgB0EIaiADKQMANwAAIAcgBikDEDcAACAKQQRqIQogDiALQSBqIgtHDQALIAYoAggh\
BwsCQCAMRQ0AIAdBBXQiAiAFSw0CIAUgAmsiC0EfTQ0DIAxBIEcNBCAEIAJqIgIgACAIaiILKQAANw\
AAIAJBGGogC0EYaikAADcAACACQRBqIAtBEGopAAA3AAAgAkEIaiALQQhqKQAANwAAIAdBAWohBwsg\
BkEwaiQAIAcPCyAGIAs2AhBB4JLAAEErIAZBEGpBzIfAAEHch8AAEFIACyACIAVB+IXAABBWAAtBIC\
ALQfiFwAAQVQALQSAgDEHolMAAEFgAC5wEAgR/B34jAEHgBGsiAiQAAkACQAJAAkACQAJAIAEoApAD\
IgNBAEgNACADDQFBASEEDAILEHwACyADEBYiBEUNASAEQXxqLQAAQQNxRQ0AIARBACADEGYaCyACIA\
FBmAMQYSIBKAKQAyECAkAgASgCwAFB/wBxIgVFDQAgBUGAAUYNACABIAVqQQBBgAEgBWsQZhoLIAFC\
fxASIAFB2ANqQRhqIAFBmAFqKQMAIgY3AwAgAUHYA2pBEGogAUGQAWopAwAiBzcDACABQdgDakEIai\
ABQYgBaikDACIINwMAIAFB2ANqQSBqIAFBoAFqKQMAIgk3AwAgAUHYA2pBKGogAUGoAWopAwAiCjcD\
ACABQdgDakEwaiABQbABaikDACILNwMAIAFB2ANqQThqIgUgAUG4AWopAwA3AwAgASABKQOAASIMNw\
PYAyABQZgDakE4aiAFKQMANwMAIAFBmANqQTBqIAs3AwAgAUGYA2pBKGogCjcDACABQZgDakEgaiAJ\
NwMAIAFBmANqQRhqIAY3AwAgAUGYA2pBEGogBzcDACABQZgDakEIaiAINwMAIAEgDDcDmAMgAkHBAE\
8NASADIAJHDQIgBCABQZgDaiADEGEhBCAAIAM2AgQgACAENgIAIAFB4ARqJAAPCyADQQFBACgCvJ5A\
IgFBBCABGxEFAAALIAJBwABBzI3AABBVAAsgAyACQeiUwAAQWAALiwQCBX8CfiMAQSBrIgEkACAAQR\
BqIQIgAEEIaikDACEGIAApAwAhBwJAAkACQAJAIAAoAlAiA0GAAUcNACABQRhqIABB1ABqEHkgAiAB\
KAIYIAEoAhwQDUEAIQMgAEEANgJQDAELIANB/wBLDQELIABB1ABqIgQgA2pBgAE6AAAgACAAKAJQIg\
VBAWoiAzYCUAJAIANBgQFPDQAgAEHQAGogA2pBBGpBAEH/ACAFaxBmGgJAQYABIAAoAlBrQRBPDQAg\
AUEQaiAEEHkgAiABKAIQIAEoAhQQDSAAKAJQIgNBgQFPDQMgBEEAIAMQZhoLIABBzAFqIAdCOIYgB0\
IohkKAgICAgIDA/wCDhCAHQhiGQoCAgICA4D+DIAdCCIZCgICAgPAfg4SEIAdCCIhCgICA+A+DIAdC\
GIhCgID8B4OEIAdCKIhCgP4DgyAHQjiIhISENwIAIABBxAFqIAZCOIYgBkIohkKAgICAgIDA/wCDhC\
AGQhiGQoCAgICA4D+DIAZCCIZCgICAgPAfg4SEIAZCCIhCgICA+A+DIAZCGIhCgID8B4OEIAZCKIhC\
gP4DgyAGQjiIhISENwIAIAFBCGogBBB5IAIgASgCCCABKAIMEA0gAEEANgJQIAFBIGokAA8LIANBgA\
FBrJPAABBWAAsgA0GAAUG8k8AAEFkACyADQYABQcyTwAAQVQALtwMCAX8EfiMAQSBrIgIkACAAEC4g\
AkEIaiAAQdQAaikCACIDNwMAIAJBEGogAEHcAGopAgAiBDcDACACQRhqIABB5ABqKQIAIgU3AwAgAS\
AAKQJMIganIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYAACABIAOnIgBBGHQgAEEI\
dEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYACCABIASnIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/g\
NxIABBGHZycjYAECABIAWnIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYAGCACIAY3\
AwAgASACKAIEIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYABCABIAIoAgwiAEEYdC\
AAQQh0QYCA/AdxciAAQQh2QYD+A3EgAEEYdnJyNgAMIAEgAigCFCIAQRh0IABBCHRBgID8B3FyIABB\
CHZBgP4DcSAAQRh2cnI2ABQgASACKAIcIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycj\
YAHCACQSBqJAALlwMCBX8BfiMAQSBrIgEkACAAQcwAaiECIAApAwAhBgJAAkACQAJAIAAoAggiA0HA\
AEcNACABQRhqIABBDGoQeiACIAEoAhggASgCHBAQQQAhAyAAQQA2AggMAQsgA0E/Sw0BCyAAQQxqIg\
QgA2pBgAE6AAAgACAAKAIIIgVBAWoiAzYCCAJAIANBwQBPDQAgAEEIaiADakEEakEAQT8gBWsQZhoC\
QEHAACAAKAIIa0EITw0AIAFBEGogBBB6IAIgASgCECABKAIUEBAgACgCCCIDQcEATw0DIARBACADEG\
YaCyAAQcQAaiAGQjiGIAZCKIZCgICAgICAwP8Ag4QgBkIYhkKAgICAgOA/gyAGQgiGQoCAgIDwH4OE\
hCAGQgiIQoCAgPgPgyAGQhiIQoCA/AeDhCAGQiiIQoD+A4MgBkI4iISEhDcCACABQQhqIAQQeiACIA\
EoAgggASgCDBAQIABBADYCCCABQSBqJAAPCyADQcAAQayTwAAQVgALIANBwABBvJPAABBZAAsgA0HA\
AEHMk8AAEFUAC+0CAQN/AkACQAJAAkACQCAALQBoIgNFDQAgA0HBAE8NAyAAIANqQShqIAEgAkHAAC\
ADayIDIAMgAksbIgMQYRogACAALQBoIANqIgQ6AGggASADaiEBAkAgAiADayICDQBBACECDAILIABB\
CGogAEEoaiIEQcAAIAApAwAgAC0AaiAAQekAaiIDLQAARXIQGiAEQQBBwQAQZhogAyADLQAAQQFqOg\
AAC0EAIQMgAkHBAEkNASAAQQhqIQUgAEHpAGoiAy0AACEEA0AgBSABQcAAIAApAwAgAC0AaiAEQf8B\
cUVyEBogAyADLQAAQQFqIgQ6AAAgAUHAAGohASACQUBqIgJBwABLDQALIAAtAGghBAsgBEH/AXEiA0\
HBAE8NAiACQcAAIANrIgQgBCACSxshAgsgACADakEoaiABIAIQYRogACAALQBoIAJqOgBoIAAPCyAD\
QcAAQbiFwAAQVgALIANBwABBuIXAABBWAAvUAgEBfyAAEC4gASAAKAJMIgJBGHQgAkEIdEGAgPwHcX\
IgAkEIdkGA/gNxIAJBGHZycjYAACABIABB0ABqKAIAIgJBGHQgAkEIdEGAgPwHcXIgAkEIdkGA/gNx\
IAJBGHZycjYABCABIABB1ABqKAIAIgJBGHQgAkEIdEGAgPwHcXIgAkEIdkGA/gNxIAJBGHZycjYACC\
ABIABB2ABqKAIAIgJBGHQgAkEIdEGAgPwHcXIgAkEIdkGA/gNxIAJBGHZycjYADCABIABB3ABqKAIA\
IgJBGHQgAkEIdEGAgPwHcXIgAkEIdkGA/gNxIAJBGHZycjYAECABIABB4ABqKAIAIgJBGHQgAkEIdE\
GAgPwHcXIgAkEIdkGA/gNxIAJBGHZycjYAFCABIABB5ABqKAIAIgBBGHQgAEEIdEGAgPwHcXIgAEEI\
dkGA/gNxIABBGHZycjYAGAvQAgIFfwF+IwBBMGsiAiQAQSchAwJAAkAgAEKQzgBaDQAgACEHDAELQS\
chAwNAIAJBCWogA2oiBEF8aiAAQpDOAIAiB0LwsX9+IAB8pyIFQf//A3FB5ABuIgZBAXRB8onAAGov\
AAA7AAAgBEF+aiAGQZx/bCAFakH//wNxQQF0QfKJwABqLwAAOwAAIANBfGohAyAAQv/B1y9WIQQgBy\
EAIAQNAAsLAkAgB6ciBEHjAEwNACACQQlqIANBfmoiA2ogB6ciBUH//wNxQeQAbiIEQZx/bCAFakH/\
/wNxQQF0QfKJwABqLwAAOwAACwJAAkAgBEEKSA0AIAJBCWogA0F+aiIDaiAEQQF0QfKJwABqLwAAOw\
AADAELIAJBCWogA0F/aiIDaiAEQTBqOgAACyABQZiZwABBACACQQlqIANqQScgA2sQJyEDIAJBMGok\
ACADC70CAgV/An4jAEEQayIDJAAgACAAKQMAIgggAq1CA4Z8Igk3AwAgAEEIaiIEIAQpAwAgCSAIVK\
18NwMAAkACQAJAAkACQEGAASAAKAJQIgRrIgUgAksNACAAQRBqIQYCQCAERQ0AIARBgQFPDQUgAEHU\
AGoiByAEaiABIAUQYRogAEEANgJQIANBCGogBxB5IAYgAygCCCADKAIMEA0gAiAFayECIAEgBWohAQ\
sgBiABIAJBB3YQDSAAQdQAaiABIAJBgH9xaiACQf8AcSICEGEaDAELIAQgAmoiBSAESQ0BIAVBgAFL\
DQIgAEHQAGogBGpBBGogASACEGEaIAAoAlAgAmohAgsgACACNgJQIANBEGokAA8LIAQgBUGMk8AAEF\
cACyAFQYABQYyTwAAQVQALIARBgAFBnJPAABBWAAu4AgEDfyMAQRBrIgIkAAJAIAAoAsgBIgNBxwBL\
DQAgACADakHMAWpBAToAAAJAIANBAWoiBEHIAEYNACAAIARqQcwBakEAQccAIANrEGYaC0EAIQMgAE\
EANgLIASAAQZMCaiIEIAQtAABBgAFyOgAAA0AgACADaiIEIAQtAAAgBEHMAWotAABzOgAAIANBAWoi\
A0HIAEcNAAsgABAhIAEgACkAADcAACABQThqIABBOGopAAA3AAAgAUEwaiAAQTBqKQAANwAAIAFBKG\
ogAEEoaikAADcAACABQSBqIABBIGopAAA3AAAgAUEYaiAAQRhqKQAANwAAIAFBEGogAEEQaikAADcA\
ACABQQhqIABBCGopAAA3AAAgAkEQaiQADwtBxZXAAEEXIAJBCGpB3JXAAEHUl8AAEFIAC7gCAQN/Iw\
BBEGsiAiQAAkAgACgCyAEiA0HHAEsNACAAIANqQcwBakEGOgAAAkAgA0EBaiIEQcgARg0AIAAgBGpB\
zAFqQQBBxwAgA2sQZhoLQQAhAyAAQQA2AsgBIABBkwJqIgQgBC0AAEGAAXI6AAADQCAAIANqIgQgBC\
0AACAEQcwBai0AAHM6AAAgA0EBaiIDQcgARw0ACyAAECEgASAAKQAANwAAIAFBOGogAEE4aikAADcA\
ACABQTBqIABBMGopAAA3AAAgAUEoaiAAQShqKQAANwAAIAFBIGogAEEgaikAADcAACABQRhqIABBGG\
opAAA3AAAgAUEQaiAAQRBqKQAANwAAIAFBCGogAEEIaikAADcAACACQRBqJAAPC0HFlcAAQRcgAkEI\
akHclcAAQZSYwAAQUgALsgIBBX8jAEGgAWsiAiQAIAJBADYCECACQQhqIAJBEGpBBHIgAkHUAGoQeC\
ACKAIQIQMCQCACKAIMIAIoAggiBGsiBUHAACAFQcAASRsiBkUNACAGIQUDQCAEIAEtAAA6AAAgBEEB\
aiEEIAFBAWohASAFQX9qIgUNAAsgAiADIAZqIgM2AhALAkAgA0E/Sw0AIANBwAAQWgALIAJB2ABqIA\
JBEGpBxAAQYRogAEE4aiACQZQBaikCADcAACAAQTBqIAJBjAFqKQIANwAAIABBKGogAkGEAWopAgA3\
AAAgAEEgaiACQfwAaikCADcAACAAQRhqIAJB9ABqKQIANwAAIABBEGogAkHsAGopAgA3AAAgAEEIai\
ACQeQAaikCADcAACAAIAIpAlw3AAAgAkGgAWokAAudAgEFfyMAQRBrIgMkACAAIAApAwAgAq1CA4Z8\
NwMAAkACQAJAAkACQEHAACAAKAIIIgRrIgUgAksNACAAQcwAaiEGAkAgBEUNACAEQcEATw0FIABBDG\
oiByAEaiABIAUQYRogAEEANgIIIANBCGogBxB6IAYgAygCCCADKAIMEBAgAiAFayECIAEgBWohAQsg\
BiABIAJBBnYQECAAQQxqIAEgAkFAcWogAkE/cSICEGEaDAELIAQgAmoiBSAESQ0BIAVBwABLDQIgAE\
EIaiAEakEEaiABIAIQYRogACgCCCACaiECCyAAIAI2AgggA0EQaiQADwsgBCAFQYyTwAAQVwALIAVB\
wABBjJPAABBVAAsgBEHAAEGck8AAEFYAC60CAQN/AkACQAJAAkACQAJAAkAgACgCyAEiAyAAKALMAS\
IEayIFIAJNDQAgBCACaiIDIARJDQEgA0HIAUsNAiABIAAgBGogAhBhGiAAIAM2AswBDwsgAyAESQ0C\
IANByAFLDQMgASAFaiEDIAEgACAEaiAFEGEaIAAQIQJAIAIgBWsiAiAAKALIASIESQ0AA0AgBEHJAU\
8NByADIAAgBBBhIQMgABAhIAMgBGohAyACIARrIgIgACgCyAEiBE8NAAsLIAAgAjYCzAEgAkHJAU8N\
BCADIAAgAhBhGg8LIAQgA0Hck8AAEFcACyADQcgBQdyTwAAQVQALIAQgA0Hsk8AAEFcACyADQcgBQe\
yTwAAQVQALIAJByAFB/JPAABBVAAsgBEHIAUGMlMAAEFUAC7UDAgJ/AX4jAEEwayICJAACQAJAIAFB\
/wFxIgNBf2pBP0sNACABrSIEQoD+A4NCgIABVg0BIABBAEGAARBmIgEgAzYCkAMgAUIANwPAASABQb\
gBakL5wvibkaOz8NsANwMAIAFBsAFqQuv6htq/tfbBHzcDACABQagBakKf2PnZwpHagpt/NwMAIAFB\
oAFqQtGFmu/6z5SH0QA3AwAgAUGYAWpC8e30+KWn/aelfzcDACABQZABakKr8NP0r+68tzw3AwAgAU\
GIAWpCu86qptjQ67O7fzcDACABIARCiJL3lf/M+YTqAIUiBDcDgAEgAUGAAmpC+cL4m5Gjs/DbADcD\
ACABQfgBakLr+obav7X2wR83AwAgAUHwAWpCn9j52cKR2oKbfzcDACABQegBakLRhZrv+s+Uh9EANw\
MAIAFB4AFqQvHt9Pilp/2npX83AwAgAUHYAWpCq/DT9K/uvLc8NwMAIAFB0AFqQrvOqqbY0Ouzu383\
AwAgASAENwPIASABQYgCakEAQYgBEGYaIAJBMGokAA8LQcODwABBMkHMjcAAEGAAC0Gcg8AAQSdBzI\
3AABBgAAufAgIEfwF+IABBCGohAiAAKQMAIQYCQAJAAkACQCAAKAIcIgNBwABHDQAgAiAAQSBqEBNB\
ACEDIABBADYCHAwBCyADQT9LDQELIABBIGoiBCADakGAAToAACAAIAAoAhwiBUEBaiIDNgIcAkAgA0\
HBAE8NACAAQRxqIANqQQRqQQBBPyAFaxBmGgJAQcAAIAAoAhxrQQhPDQAgAiAEEBMgACgCHCIDQcEA\
Tw0DIARBACADEGYaCyAAQdgAaiAGQgOGNwMAIAIgBBATIABBADYCHCABIAAoAgg2AAAgASAAQQxqKQ\
IANwAEIAEgAEEUaikCADcADA8LIANBwABBrJPAABBWAAsgA0HAAEG8k8AAEFkACyADQcAAQcyTwAAQ\
VQALmAIBA38jAEEQayICJAACQCAAKALIASIDQecASw0AIAAgA2pBzAFqQQE6AAACQCADQQFqIgRB6A\
BGDQAgACAEakHMAWpBAEHnACADaxBmGgtBACEDIABBADYCyAEgAEGzAmoiBCAELQAAQYABcjoAAANA\
IAAgA2oiBCAELQAAIARBzAFqLQAAczoAACADQQFqIgNB6ABHDQALIAAQISABIAApAAA3AAAgAUEoai\
AAQShqKQAANwAAIAFBIGogAEEgaikAADcAACABQRhqIABBGGopAAA3AAAgAUEQaiAAQRBqKQAANwAA\
IAFBCGogAEEIaikAADcAACACQRBqJAAPC0HFlcAAQRcgAkEIakHclcAAQcSXwAAQUgALmAIBA38jAE\
EQayICJAACQCAAKALIASIDQecASw0AIAAgA2pBzAFqQQY6AAACQCADQQFqIgRB6ABGDQAgACAEakHM\
AWpBAEHnACADaxBmGgtBACEDIABBADYCyAEgAEGzAmoiBCAELQAAQYABcjoAAANAIAAgA2oiBCAELQ\
AAIARBzAFqLQAAczoAACADQQFqIgNB6ABHDQALIAAQISABIAApAAA3AAAgAUEoaiAAQShqKQAANwAA\
IAFBIGogAEEgaikAADcAACABQRhqIABBGGopAAA3AAAgAUEQaiAAQRBqKQAANwAAIAFBCGogAEEIai\
kAADcAACACQRBqJAAPC0HFlcAAQRcgAkEIakHclcAAQYSYwAAQUgALmgICAX8CfiAAKQPAASIEp0H/\
AHEhAwJAAkACQAJAAkAgBFANACADRQ0BCyAAIANqIAEgAkGAASADayIDIAMgAksbIgMQYRogACkDwA\
EiBCADrXwiBSAEVA0BIAAgBTcDwAEgAiADayECIAEgA2ohAQsCQCACQYABSQ0AA0AgAEIAEBIgACAB\
QYABEGEiAykDwAEiBEKAAXwiBSAEVA0DIAMgBTcDwAEgAUGAAWohASACQYB/aiICQYABTw0ACwsCQC\
ACRQ0AIABCABASIAAgASACEGEiASkDwAEiBCACrXwiBSAEVA0DIAEgBTcDwAELDwtB1YTAAEHMjcAA\
EFwAC0HVhMAAQcyNwAAQXAALQdWEwABBzI3AABBcAAuUAgIEfwF+IABBzABqIQIgACkDACEGAkACQA\
JAAkAgACgCCCIDQcAARw0AIAIgAEEMahAbQQAhAyAAQQA2AggMAQsgA0E/Sw0BCyAAQQxqIgQgA2pB\
gAE6AAAgACAAKAIIIgVBAWoiAzYCCAJAIANBwQBPDQAgAEEIaiADakEEakEAQT8gBWsQZhoCQEHAAC\
AAKAIIa0EITw0AIAIgBBAbIAAoAggiA0HBAE8NAyAEQQAgAxBmGgsgAEHEAGogBkIDhjcCACACIAQQ\
GyAAQQA2AgggASAAKQJMNwAAIAEgAEHUAGopAgA3AAgPCyADQcAAQayTwAAQVgALIANBwABBvJPAAB\
BZAAsgA0HAAEHMk8AAEFUAC/gBAQN/IwBBEGsiAiQAAkAgACgCyAEiA0GPAUsNACAAIANqQcwBakEB\
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\
4IHAABBgAAsRAEGMgsAAQS9BvILAABBgAAsNACAAKAIAGgN/DAALCwsAIAAjAGokACMACwsAIAA1Ag\
AgARAxCw0AQfiZwABBGxCDAQALDgBBk5rAAEHPABCDAQALCQAgACABEAsACwcAIAAQDAALDABCk72/\
j/7t1N8DCwMAAAsCAAsCAAsL7JqAgAABAEGAgMAAC+IaQkxBS0UyQkJMQUtFMkItMjU2QkxBS0UyQi\
0zODRCTEFLRTJTQkxBS0UzS0VDQ0FLLTIyNEtFQ0NBSy0yNTZLRUNDQUstMzg0S0VDQ0FLLTUxMk1E\
NVJJUEVNRC0xNjBTSEEtMVNIQS0yMjRTSEEtMjU2U0hBLTM4NFNIQS01MTJ1bnN1cHBvcnRlZCBhbG\
dvcml0aG1ub24tZGVmYXVsdCBsZW5ndGggc3BlY2lmaWVkIGZvciBub24tZXh0ZW5kYWJsZSBhbGdv\
cml0aG1jYXBhY2l0eSBvdmVyZmxvdwDwABAAHAAAADACAAAFAAAAbGlicmFyeS9hbGxvYy9zcmMvcm\
F3X3ZlYy5yc0FycmF5VmVjOiBjYXBhY2l0eSBleGNlZWRlZCBpbiBleHRlbmQvZnJvbV9pdGVyAEwB\
EABQAAAA8AMAAAUAAAB+Ly5jYXJnby9yZWdpc3RyeS9zcmMvZ2l0aHViLmNvbS0xZWNjNjI5OWRiOW\
VjODIzL2FycmF5dmVjLTAuNy4xL3NyYy9hcnJheXZlYy5yc2Fzc2VydGlvbiBmYWlsZWQ6IGtrIDw9\
IFU2NDo6dG9fdXNpemUoKWFzc2VydGlvbiBmYWlsZWQ6IG5uID49IDEgJiYgbm4gPD0gVTY0Ojp0b1\
91c2l6ZSgpAAAACAIQAE0AAAAEAAAAAQAAAH4vLmNhcmdvL3JlZ2lzdHJ5L3NyYy9naXRodWIuY29t\
LTFlY2M2Mjk5ZGI5ZWM4MjMvYmxha2UyLTAuOS4xL3NyYy9ibGFrZTJzLnJzaGFzaCBkYXRhIGxlbm\
d0aCBvdmVyZmxvd34vLmNhcmdvL3JlZ2lzdHJ5L3NyYy9naXRodWIuY29tLTFlY2M2Mjk5ZGI5ZWM4\
MjMvYmxha2UzLTEuMC4wL3NyYy9saWIucnMAbgIQAEkAAAC7AQAACQAAAG4CEABJAAAAAwMAABkAAA\
BuAhAASQAAAAUDAAAJAAAAbgIQAEkAAAAFAwAAOAAAAG4CEABJAAAAjwIAAAkAAABhc3NlcnRpb24g\
ZmFpbGVkOiBtaWQgPD0gc2VsZi5sZW4oKQB4ChAATQAAAOMFAAAJAAAAbgIQAEkAAABhAgAACgAAAG\
4CEABJAAAA2AIAAAkAAABuAhAASQAAAN8CAAAKAAAAbgIQAEkAAACtBAAAFgAAAG4CEABJAAAAvwQA\
ABYAAABuAhAASQAAAPsDAAAyAAAAbgIQAEkAAADwBAAAEgAAAG4CEABJAAAA+gQAABIAAABuAhAASQ\
AAAGcFAAAhAAAAEQAAAAQAAAAEAAAAEgAAAOwDEABVAAAAJwAAACAAAAB+Ly5jYXJnby9yZWdpc3Ry\
eS9zcmMvZ2l0aHViLmNvbS0xZWNjNjI5OWRiOWVjODIzL2FycmF5dmVjLTAuNy4xL3NyYy9hcnJheX\
ZlY19pbXBsLnJzAAAAEQAAAAQAAAAEAAAAEgAAABEAAAAgAAAAAQAAABMAAACJBBAADQAAAHQEEAAV\
AAAAaW5zdWZmaWNpZW50IGNhcGFjaXR5Q2FwYWNpdHlFcnJvclBhZEVycm9yAADABBAAIAAAAOAEEA\
ASAAAAEQAAAAAAAAABAAAAFAAAAGluZGV4IG91dCBvZiBib3VuZHM6IHRoZSBsZW4gaXMgIGJ1dCB0\
aGUgaW5kZXggaXMgMDAwMTAyMDMwNDA1MDYwNzA4MDkxMDExMTIxMzE0MTUxNjE3MTgxOTIwMjEyMj\
IzMjQyNTI2MjcyODI5MzAzMTMyMzMzNDM1MzYzNzM4Mzk0MDQxNDI0MzQ0NDU0NjQ3NDg0OTUwNTE1\
MjUzNTQ1NTU2NTc1ODU5NjA2MTYyNjM2NDY1NjY2NzY4Njk3MDcxNzI3Mzc0NzU3Njc3Nzg3OTgwOD\
E4MjgzODQ4NTg2ODc4ODg5OTA5MTkyOTM5NDk1OTY5Nzk4OTkAAMwFEAAQAAAA3AUQACIAAAByYW5n\
ZSBlbmQgaW5kZXggIG91dCBvZiByYW5nZSBmb3Igc2xpY2Ugb2YgbGVuZ3RoIAAAEAYQABIAAADcBR\
AAIgAAAHJhbmdlIHN0YXJ0IGluZGV4IAAANAYQABYAAABKBhAADQAAAHNsaWNlIGluZGV4IHN0YXJ0\
cyBhdCAgYnV0IGVuZHMgYXQgAJgMEAAAAAAAmAwQAAAAAABwBhAAAgAAADogKQCMBhAAFQAAAKEGEA\
ArAAAAcgYQAAEAAABzb3VyY2Ugc2xpY2UgbGVuZ3RoICgpIGRvZXMgbm90IG1hdGNoIGRlc3RpbmF0\
aW9uIHNsaWNlIGxlbmd0aCAo3AYQAE0AAAAEAAAAAQAAAH4vLmNhcmdvL3JlZ2lzdHJ5L3NyYy9naX\
RodWIuY29tLTFlY2M2Mjk5ZGI5ZWM4MjMvYmxha2UyLTAuOS4xL3NyYy9ibGFrZTJiLnJzAAAATAcQ\
ACEAAABtBxAAFwAAAEQMEABRAAAAZwEAAAUAAABHZW5lcmljQXJyYXk6OmZyb21faXRlciByZWNlaX\
ZlZCAgZWxlbWVudHMgYnV0IGV4cGVjdGVkIGNsb3N1cmUgaW52b2tlZCByZWN1cnNpdmVseSBvciBk\
ZXN0cm95ZWQgYWxyZWFkeQAAAAABAAAAAAAAAIKAAAAAAAAAioAAAAAAAIAAgACAAAAAgIuAAAAAAA\
AAAQAAgAAAAACBgACAAAAAgAmAAAAAAACAigAAAAAAAACIAAAAAAAAAAmAAIAAAAAACgAAgAAAAACL\
gACAAAAAAIsAAAAAAACAiYAAAAAAAIADgAAAAAAAgAKAAAAAAACAgAAAAAAAAIAKgAAAAAAAAAoAAI\
AAAACAgYAAgAAAAICAgAAAAAAAgAEAAIAAAAAACIAAgAAAAIABI0VniavN7/7cuph2VDIQASNFZ4mr\
ze/+3LqYdlQyEPDh0sPYngXBB9V8NhfdcDA5WQ73MQvA/xEVWGinj/lkpE/6vmfmCWqFrme7cvNuPD\
r1T6V/Ug5RjGgFm6vZgx8ZzeBbAAAAANieBcFdnbvLB9V8NiopmmIX3XAwWgFZkTlZDvfY7C8VMQvA\
/2cmM2cRFVhoh0q0jqeP+WQNLgzbpE/6vh1ItUcIybzzZ+YJajunyoSFrme7K/iU/nLzbjzxNh1fOv\
VPpdGC5q1/Ug5RH2w+K4xoBZtrvUH7q9mDH3khfhMZzeBbY2FsbGVkIGBSZXN1bHQ6OnVud3JhcCgp\
YCBvbiBhbiBgRXJyYCB2YWx1ZQBkCxAATwAAADoAAAANAAAAZAsQAE8AAABBAAAADQAAAGQLEABPAA\
AAhwAAABcAAABkCxAATwAAAIQAAAAJAAAAZAsQAE8AAACLAAAAGwAAABwKEABKAAAAJAAAACkAAAAc\
ChAASgAAAB8AAAAkAAAAHAoQAEoAAAA3AAAAJQAAABwKEABKAAAALwAAACQAAAB+Ly5jYXJnby9yZW\
dpc3RyeS9zcmMvZ2l0aHViLmNvbS0xZWNjNjI5OWRiOWVjODIzL3NoYTMtMC45LjEvc3JjL3JlYWRl\
ci5ycwAAeAoQAE0AAADyCwAADQAAAC9ydXN0Yy9hMTc4ZDAzMjJjZTIwZTMzZWFjMTI0NzU4ZTgzN2\
NiZDgwYTZmNjMzL2xpYnJhcnkvY29yZS9zcmMvc2xpY2UvbW9kLnJzd2UgbmV2ZXIgdXNlIGlucHV0\
X2xhenkRAAAAAAAAAAEAAAAVAAAA/AoQAEcAAABBAAAAAQAAAH4vLmNhcmdvL3JlZ2lzdHJ5L3NyYy\
9naXRodWIuY29tLTFlY2M2Mjk5ZGI5ZWM4MjMvc2hhMy0wLjkuMS9zcmMvbGliLnJzAGQLEABPAAAA\
GwAAAA0AAABkCxAATwAAACIAAAANAAAAfi8uY2FyZ28vcmVnaXN0cnkvc3JjL2dpdGh1Yi5jb20tMW\
VjYzYyOTlkYjllYzgyMy9ibG9jay1idWZmZXItMC45LjAvc3JjL2xpYi5ycwD8ChAARwAAAEgAAAAB\
AAAA/AoQAEcAAABPAAAAAQAAAPwKEABHAAAAVgAAAAEAAAD8ChAARwAAAGYAAAABAAAA/AoQAEcAAA\
BtAAAAAQAAAPwKEABHAAAAdAAAAAEAAAD8ChAARwAAAHsAAAABAAAA/AoQAEcAAACDAAAAAQAAAPwK\
EABHAAAAiQAAAAEAAAB+Ly5jYXJnby9yZWdpc3RyeS9zcmMvZ2l0aHViLmNvbS0xZWNjNjI5OWRiOW\
VjODIzL2dlbmVyaWMtYXJyYXktMC4xNC40L3NyYy9saWIucnMAAABjYWxsZWQgYE9wdGlvbjo6dW53\
cmFwKClgIG9uIGEgYE5vbmVgIHZhbHVlANQMEAAcAAAAAgIAAB4AAABsaWJyYXJ5L3N0ZC9zcmMvcG\
FuaWNraW5nLnJzBAAAAAAAAABudWxsIHBvaW50ZXIgcGFzc2VkIHRvIHJ1c3RyZWN1cnNpdmUgdXNl\
IG9mIGFuIG9iamVjdCBkZXRlY3RlZCB3aGljaCB3b3VsZCBsZWFkIHRvIHVuc2FmZSBhbGlhc2luZy\
BpbiBydXN0AL3CgIAABG5hbWUBssKAgACJAQBFanNfc3lzOjpUeXBlRXJyb3I6Om5ldzo6X193Ymdf\
bmV3X2Y4NWRiZGZiOWNkYmUyZWM6Omg3MDlkY2EyNzFmN2JhYTE2ATt3YXNtX2JpbmRnZW46Ol9fd2\
JpbmRnZW5fb2JqZWN0X2Ryb3BfcmVmOjpoYmQ5MmI3MDA0NDU4MDI2YQJVanNfc3lzOjpVaW50OEFy\
cmF5OjpieXRlX2xlbmd0aDo6X193YmdfYnl0ZUxlbmd0aF9lMDUxNWJjOTRjZmM1ZGVlOjpoNjVhOD\
c1ZDY3NDNkNWRhYwNVanNfc3lzOjpVaW50OEFycmF5OjpieXRlX29mZnNldDo6X193YmdfYnl0ZU9m\
ZnNldF83N2VlYzg0NzE2YTJlNzM3OjpoMjY1Y2E5ODI5MTFjNzQ1YwRManNfc3lzOjpVaW50OEFycm\
F5OjpidWZmZXI6Ol9fd2JnX2J1ZmZlcl8xYzU5MThhNGFiNjU2ZmY3OjpoOWYzNzNkMWY1YWIxY2Mz\
NwV5anNfc3lzOjpVaW50OEFycmF5OjpuZXdfd2l0aF9ieXRlX29mZnNldF9hbmRfbGVuZ3RoOjpfX3\
diZ19uZXd3aXRoYnl0ZW9mZnNldGFuZGxlbmd0aF9lNTdhZDFmMmNlODEyYzAzOjpoOTI4ODg0ZGNk\
MGQ4NGVkOQZManNfc3lzOjpVaW50OEFycmF5OjpsZW5ndGg6Ol9fd2JnX2xlbmd0aF8yZDU2Y2IzNz\
A3NWZjZmIxOjpoNjg1ZjJkMDRmZjU4MWI2Mgcyd2FzbV9iaW5kZ2VuOjpfX3diaW5kZ2VuX21lbW9y\
eTo6aDRmMDFkZTFlYzAwZTRjNDgIVWpzX3N5czo6V2ViQXNzZW1ibHk6Ok1lbW9yeTo6YnVmZmVyOj\
pfX3diZ19idWZmZXJfOWUxODRkNmY3ODVkZTVlZDo6aDM1ZTVhYmQyYTA4ZjQ4NzEJRmpzX3N5czo6\
VWludDhBcnJheTo6bmV3OjpfX3diZ19uZXdfZTgxMDEzMTllNGNmOTVmYzo6aGEyZWJkOWZjM2JmNm\
MwN2MKRmpzX3N5czo6VWludDhBcnJheTo6c2V0OjpfX3diZ19zZXRfZThhZTdiMjczMTRlOGI5ODo6\
aDNhZmEzODc1YTIxZWQxNDkLMXdhc21fYmluZGdlbjo6X193YmluZGdlbl90aHJvdzo6aGIzZjk1NG\
FjZWQxZmRjNDcMM3dhc21fYmluZGdlbjo6X193YmluZGdlbl9yZXRocm93OjpoN2RhMGI4MTY1NjEy\
N2VhYw0vc2hhMjo6c2hhNTEyOjpzb2Z0Ojpjb21wcmVzczo6aDNlNTYyZGI2NWI5NjJiOTQOQGRlbm\
9fc3RkX3dhc21fY3J5cHRvOjpkaWdlc3Q6OkNvbnRleHQ6OmRpZ2VzdDo6aGM4OGI2YzYyOGYyNTJm\
MGIPSmRlbm9fc3RkX3dhc21fY3J5cHRvOjpkaWdlc3Q6OkNvbnRleHQ6OmRpZ2VzdF9hbmRfcmVzZX\
Q6Omg2ODBhY2YyZWVmM2NlMzU4EC9zaGEyOjpzaGEyNTY6OnNvZnQ6OmNvbXByZXNzOjpoYWQzN2Jj\
N2JhNjFhMzUxYRFAZGVub19zdGRfd2FzbV9jcnlwdG86OmRpZ2VzdDo6Q29udGV4dDo6dXBkYXRlOj\
poMTQzODVjNTZkMzUyOTg4ORI4Ymxha2UyOjpibGFrZTJiOjpWYXJCbGFrZTJiOjpjb21wcmVzczo6\
aGIyMzliOTc5YTUyZjU2YTATNnJpcGVtZDE2MDo6YmxvY2s6OnByb2Nlc3NfbXNnX2Jsb2NrOjpoMD\
QyZDgzNDEwNWVlMjJhYRQ4Ymxha2UyOjpibGFrZTJzOjpWYXJCbGFrZTJzOjpjb21wcmVzczo6aGJk\
NGFhMjljMmY1ZWQ1N2EVK3NoYTE6OmNvbXByZXNzOjpjb21wcmVzczo6aDRmMDQ5MTJmYWNhOWFmMz\
cWOmRsbWFsbG9jOjpkbG1hbGxvYzo6RGxtYWxsb2M8QT46Om1hbGxvYzo6aDQ3Nzk3YTUxNjJmOWYw\
NjcXO2Rlbm9fc3RkX3dhc21fY3J5cHRvOjpEaWdlc3RDb250ZXh0OjpuZXc6Omg5MzBiOTFkZjNhMz\
Q5N2I0GBNkaWdlc3Rjb250ZXh0X2Nsb25lGS1ibGFrZTM6Ok91dHB1dFJlYWRlcjo6ZmlsbDo6aDkx\
ZDAxM2RhMzU1ZWE3M2QaNmJsYWtlMzo6cG9ydGFibGU6OmNvbXByZXNzX2luX3BsYWNlOjpoZjUwZT\
MxZWQ1OTczMjA2MRsnbWQ1Ojp1dGlsczo6Y29tcHJlc3M6OmhjN2UyN2I1MGFjZTk0YWE0HDBibGFr\
ZTM6OmNvbXByZXNzX3N1YnRyZWVfd2lkZTo6aGE1NWY0OWYzYjM2NWIyOGIdOGRsbWFsbG9jOjpkbG\
1hbGxvYzo6RGxtYWxsb2M8QT46OmZyZWU6OmhlMWIwZmJjYTNmZmQ0YjExHkFkbG1hbGxvYzo6ZGxt\
YWxsb2M6OkRsbWFsbG9jPEE+OjpkaXNwb3NlX2NodW5rOjpoYjQ4OGJkYzllMTQwM2I1ZB8TZGlnZX\
N0Y29udGV4dF9yZXNldCAvYmxha2UzOjpIYXNoZXI6OmZpbmFsaXplX3hvZjo6aGNlMTE5MmIxOTIx\
MmY4YzYhIGtlY2Nhazo6ZjE2MDA6Omg5MjVlNzU3MWUxMGIwOTdkIixjb3JlOjpmbXQ6OkZvcm1hdH\
Rlcjo6cGFkOjpoOTdkZjJiY2Y2YzIzNDBiMCMOX19ydXN0X3JlYWxsb2MkYTxzaGEyOjpzaGE1MTI6\
OlNoYTUxMiBhcyBkaWdlc3Q6OmZpeGVkOjpGaXhlZE91dHB1dERpcnR5Pjo6ZmluYWxpemVfaW50b1\
9kaXJ0eTo6aGExNDE3YzRmYzRjNTdmN2ElMWJsYWtlMzo6SGFzaGVyOjptZXJnZV9jdl9zdGFjazo6\
aDk3NTcwNzdiNWM0Zjg5ZjgmI2NvcmU6OmZtdDo6d3JpdGU6OmhlNGIyY2QxOWQxMjFhMzk5JzVjb3\
JlOjpmbXQ6OkZvcm1hdHRlcjo6cGFkX2ludGVncmFsOjpoOTNkNDQxMTdlMGQwMzU3MihhPHNoYTI6\
OnNoYTUxMjo6U2hhMzg0IGFzIGRpZ2VzdDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+OjpmaW5hbG\
l6ZV9pbnRvX2RpcnR5OjpoM2Y2NzBjMWJmMzEwMjU1ZilXPHNoYTE6OlNoYTEgYXMgZGlnZXN0Ojpm\
aXhlZDo6Rml4ZWRPdXRwdXREaXJ0eT46OmZpbmFsaXplX2ludG9fZGlydHk6OmhiM2Y0MDQ0MWEwNj\
UxZThjKjRibGFrZTM6OmNvbXByZXNzX3BhcmVudHNfcGFyYWxsZWw6OmgwZGFmZTk2YjY5OGIwNjk2\
K0NkaWdlc3Q6OnZhcmlhYmxlOjpWYXJpYWJsZU91dHB1dDo6ZmluYWxpemVfYm94ZWQ6OmgzM2QxNz\
UyZmJjZTI1ZWNmLDJzaGEyOjpzaGE1MTI6OkVuZ2luZTUxMjo6ZmluaXNoOjpoNjRiMTllNjgzZDc1\
YWNlNC1hPHNoYTI6OnNoYTI1Njo6U2hhMjU2IGFzIGRpZ2VzdDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RG\
lydHk+OjpmaW5hbGl6ZV9pbnRvX2RpcnR5OjpoN2RkMjZjNzFhN2FmNDZjYy4yc2hhMjo6c2hhMjU2\
OjpFbmdpbmUyNTY6OmZpbmlzaDo6aGFkNjE5NWQ0NTA2ZWQ0YmUvLWJsYWtlMzo6Q2h1bmtTdGF0ZT\
o6dXBkYXRlOjpoYWM4NGNjMWM3YjFkMGMzZDBhPHNoYTI6OnNoYTI1Njo6U2hhMjI0IGFzIGRpZ2Vz\
dDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+OjpmaW5hbGl6ZV9pbnRvX2RpcnR5OjpoYTY5YmU2Ym\
UwYTA1OThhNTEvY29yZTo6Zm10OjpudW06OmltcDo6Zm10X3U2NDo6aDcxZTYyNGMyZDM5Yjc3MWUy\
ODxEIGFzIGRpZ2VzdDo6ZGlnZXN0OjpEaWdlc3Q+Ojp1cGRhdGU6OmgyOTlhODc2YTZmYWM1ODc3M1\
w8c2hhMzo6S2VjY2FrNTEyIGFzIGRpZ2VzdDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+OjpmaW5h\
bGl6ZV9pbnRvX2RpcnR5OjpoYmE0ZjRkNzAxYWViOTAxYTRbPHNoYTM6OlNoYTNfNTEyIGFzIGRpZ2\
VzdDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+OjpmaW5hbGl6ZV9pbnRvX2RpcnR5OjpoNjZlNzAy\
NGQ4ZjE0OTZlNzVuZ2VuZXJpY19hcnJheTo6aW1wbHM6OjxpbXBsIGNvcmU6OmNsb25lOjpDbG9uZS\
Bmb3IgZ2VuZXJpY19hcnJheTo6R2VuZXJpY0FycmF5PFQsTj4+OjpjbG9uZTo6aGJjZjUyZmI5ZDc2\
NTQyN2M2ODxEIGFzIGRpZ2VzdDo6ZGlnZXN0OjpEaWdlc3Q+Ojp1cGRhdGU6OmhjMjM2OTI5MmE1Yj\
ExMGRkN1A8c2hhMzo6cmVhZGVyOjpTaGEzWG9mUmVhZGVyIGFzIGRpZ2VzdDo6eG9mOjpYb2ZSZWFk\
ZXI+OjpyZWFkOjpoOTUwZGVhMDUzOWQ1OTQyYTg7Ymxha2UyOjpibGFrZTJiOjpWYXJCbGFrZTJiOj\
p3aXRoX3BhcmFtczo6aGFjYjVjODIwMmY5NTI0OWY5YTxyaXBlbWQxNjA6OlJpcGVtZDE2MCBhcyBk\
aWdlc3Q6OmZpeGVkOjpGaXhlZE91dHB1dERpcnR5Pjo6ZmluYWxpemVfaW50b19kaXJ0eTo6aDcyYz\
IxZGU5YTJmYjA3OTI6XDxzaGEzOjpLZWNjYWszODQgYXMgZGlnZXN0OjpmaXhlZDo6Rml4ZWRPdXRw\
dXREaXJ0eT46OmZpbmFsaXplX2ludG9fZGlydHk6OmgyOTM5NzMyNGI1NjMzOTMwO1s8c2hhMzo6U2\
hhM18zODQgYXMgZGlnZXN0OjpmaXhlZDo6Rml4ZWRPdXRwdXREaXJ0eT46OmZpbmFsaXplX2ludG9f\
ZGlydHk6OmhlMTBjNWZjZjE1NmQyNzU3PDZibGFrZTI6OmJsYWtlMmI6OlZhckJsYWtlMmI6OnVwZG\
F0ZTo6aDIyNTAyYzM1YjhiM2EyNmE9VTxtZDU6Ok1kNSBhcyBkaWdlc3Q6OmZpeGVkOjpGaXhlZE91\
dHB1dERpcnR5Pjo6ZmluYWxpemVfaW50b19kaXJ0eTo6aDI3Mzk0OTRiMmNmODFlMjU+XDxzaGEzOj\
pLZWNjYWsyMjQgYXMgZGlnZXN0OjpmaXhlZDo6Rml4ZWRPdXRwdXREaXJ0eT46OmZpbmFsaXplX2lu\
dG9fZGlydHk6OmgwMDJmYzdlMzJkMTczN2U0P1w8c2hhMzo6S2VjY2FrMjU2IGFzIGRpZ2VzdDo6Zm\
l4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+OjpmaW5hbGl6ZV9pbnRvX2RpcnR5OjpoNjQzODI3OTBlYmE2\
MzUzMUBbPHNoYTM6OlNoYTNfMjI0IGFzIGRpZ2VzdDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+Oj\
pmaW5hbGl6ZV9pbnRvX2RpcnR5OjpoZWI2NzkzZWE1NjFkNDVlMEFbPHNoYTM6OlNoYTNfMjU2IGFz\
IGRpZ2VzdDo6Zml4ZWQ6OkZpeGVkT3V0cHV0RGlydHk+OjpmaW5hbGl6ZV9pbnRvX2RpcnR5OjpoYm\
M5ZTdhOTg0ODNmZjg2YUIGZGlnZXN0Qz5kZW5vX3N0ZF93YXNtX2NyeXB0bzo6RGlnZXN0Q29udGV4\
dDo6dXBkYXRlOjpoYjdlYTNiN2NkMjE0OTNmYURuZ2VuZXJpY19hcnJheTo6aW1wbHM6OjxpbXBsIG\
NvcmU6OmNsb25lOjpDbG9uZSBmb3IgZ2VuZXJpY19hcnJheTo6R2VuZXJpY0FycmF5PFQsTj4+Ojpj\
bG9uZTo6aDM5NTdhYzJmNzMyZWM4OTRFbmdlbmVyaWNfYXJyYXk6OmltcGxzOjo8aW1wbCBjb3JlOj\
pjbG9uZTo6Q2xvbmUgZm9yIGdlbmVyaWNfYXJyYXk6OkdlbmVyaWNBcnJheTxULE4+Pjo6Y2xvbmU6\
OmhkZWVjMGM1Nzg2M2Y4NDU0Rm5nZW5lcmljX2FycmF5OjppbXBsczo6PGltcGwgY29yZTo6Y2xvbm\
U6OkNsb25lIGZvciBnZW5lcmljX2FycmF5OjpHZW5lcmljQXJyYXk8VCxOPj46OmNsb25lOjpoNjNk\
YThlYjYyYTliOTcxM0duZ2VuZXJpY19hcnJheTo6aW1wbHM6OjxpbXBsIGNvcmU6OmNsb25lOjpDbG\
9uZSBmb3IgZ2VuZXJpY19hcnJheTo6R2VuZXJpY0FycmF5PFQsTj4+OjpjbG9uZTo6aDkwNDk2YWM3\
ZTI4NDc1NTJIbmdlbmVyaWNfYXJyYXk6OmltcGxzOjo8aW1wbCBjb3JlOjpjbG9uZTo6Q2xvbmUgZm\
9yIGdlbmVyaWNfYXJyYXk6OkdlbmVyaWNBcnJheTxULE4+Pjo6Y2xvbmU6Omg2MTEzOTkwZjljNThj\
YzMzSW5nZW5lcmljX2FycmF5OjppbXBsczo6PGltcGwgY29yZTo6Y2xvbmU6OkNsb25lIGZvciBnZW\
5lcmljX2FycmF5OjpHZW5lcmljQXJyYXk8VCxOPj46OmNsb25lOjpoZDYwODQ5NTllYjY0YjQ3OEpd\
PHNoYTM6OlNoYWtlMTI4IGFzIGRpZ2VzdDo6eG9mOjpFeHRlbmRhYmxlT3V0cHV0RGlydHk+OjpmaW\
5hbGl6ZV94b2ZfZGlydHk6Omg1MjMxNTEzODA5MzQ5ZjZjS108c2hhMzo6U2hha2UyNTYgYXMgZGln\
ZXN0Ojp4b2Y6OkV4dGVuZGFibGVPdXRwdXREaXJ0eT46OmZpbmFsaXplX3hvZl9kaXJ0eTo6aDk4Mz\
liN2M5YzNjNDY5Y2VMG2RpZ2VzdGNvbnRleHRfZGlnZXN0QW5kRHJvcE0tanNfc3lzOjpVaW50OEFy\
cmF5Ojp0b192ZWM6Omg1Y2U2YjY2NDY0MTIxMWMzTj93YXNtX2JpbmRnZW46OmNvbnZlcnQ6OmNsb3\
N1cmVzOjppbnZva2UzX211dDo6aGJjZWViODU0YzdiMThlYTZPFGRpZ2VzdGNvbnRleHRfZGlnZXN0\
UBxkaWdlc3Rjb250ZXh0X2RpZ2VzdEFuZFJlc2V0URFkaWdlc3Rjb250ZXh0X25ld1IuY29yZTo6cm\
VzdWx0Ojp1bndyYXBfZmFpbGVkOjpoZTg3YzRkYTQ4NzQ2ZTg5NlNQPGFycmF5dmVjOjplcnJvcnM6\
OkNhcGFjaXR5RXJyb3I8VD4gYXMgY29yZTo6Zm10OjpEZWJ1Zz46OmZtdDo6aDc4ZTEwNjA4MTVjMT\
kwOTVUUDxhcnJheXZlYzo6ZXJyb3JzOjpDYXBhY2l0eUVycm9yPFQ+IGFzIGNvcmU6OmZtdDo6RGVi\
dWc+OjpmbXQ6Omg5YTdkOThjNTFmYzVmY2U1VT9jb3JlOjpzbGljZTo6aW5kZXg6OnNsaWNlX2VuZF\
9pbmRleF9sZW5fZmFpbDo6aDdlZmIwZjAwZmJjYzkyOGJWQWNvcmU6OnNsaWNlOjppbmRleDo6c2xp\
Y2Vfc3RhcnRfaW5kZXhfbGVuX2ZhaWw6Omg3MDg2MDViYjhmZWJkMmY0Vz1jb3JlOjpzbGljZTo6aW\
5kZXg6OnNsaWNlX2luZGV4X29yZGVyX2ZhaWw6Omg5OThlNjA1YjRhZjk0YjdiWE5jb3JlOjpzbGlj\
ZTo6PGltcGwgW1RdPjo6Y29weV9mcm9tX3NsaWNlOjpsZW5fbWlzbWF0Y2hfZmFpbDo6aGMxZDE4Zm\
UxZDU4NWMzZTFZNmNvcmU6OnBhbmlja2luZzo6cGFuaWNfYm91bmRzX2NoZWNrOjpoYWFlYzg4OWJh\
MThkZDY4NVo3Z2VuZXJpY19hcnJheTo6ZnJvbV9pdGVyX2xlbmd0aF9mYWlsOjpoMjU2MTVmNzUzMj\
ViMTgzZls3c3RkOjpwYW5pY2tpbmc6OnJ1c3RfcGFuaWNfd2l0aF9ob29rOjpoMmQ5MDc5NDI3YTJk\
OTk2YVwuY29yZTo6b3B0aW9uOjpleHBlY3RfZmFpbGVkOjpoNWE5NDhjNTQ5YWU1Mzc0YV0YX193Ym\
dfZGlnZXN0Y29udGV4dF9mcmVlXgZtZW1jbXBfQ2NvcmU6OmZtdDo6Rm9ybWF0dGVyOjpwYWRfaW50\
ZWdyYWw6OndyaXRlX3ByZWZpeDo6aDQ3ZmE5MWE3YWZmOTRmNWJgKWNvcmU6OnBhbmlja2luZzo6cG\
FuaWM6OmgzOGNhYzcxMGI1MDQ4Y2EwYQZtZW1jcHliEXJ1c3RfYmVnaW5fdW53aW5kYxRkaWdlc3Rj\
b250ZXh0X3VwZGF0ZWQtY29yZTo6cGFuaWNraW5nOjpwYW5pY19mbXQ6OmgxZmVhNjIzNzU1ZmZmZW\
Q3ZUlzdGQ6OnN5c19jb21tb246OmJhY2t0cmFjZTo6X19ydXN0X2VuZF9zaG9ydF9iYWNrdHJhY2U6\
Omg5MWU3MTE2MDdkOTFiZTUyZgZtZW1zZXRnEV9fd2JpbmRnZW5fbWFsbG9jaD93YXNtX2JpbmRnZW\
46OmNvbnZlcnQ6OmNsb3N1cmVzOjppbnZva2U0X211dDo6aGY3ZGRhZDU4NmMzNWE2NDBpP3dhc21f\
YmluZGdlbjo6Y29udmVydDo6Y2xvc3VyZXM6Omludm9rZTNfbXV0OjpoNTQwYmUwOTk2MTZkNzI4MG\
o/d2FzbV9iaW5kZ2VuOjpjb252ZXJ0OjpjbG9zdXJlczo6aW52b2tlM19tdXQ6Omg0YTEzOTg3Mzhh\
MGQ3NWJkaz93YXNtX2JpbmRnZW46OmNvbnZlcnQ6OmNsb3N1cmVzOjppbnZva2UzX211dDo6aDFmY2\
Y1ZjljZjA5Mzg1M2RsP3dhc21fYmluZGdlbjo6Y29udmVydDo6Y2xvc3VyZXM6Omludm9rZTNfbXV0\
OjpoMGZiMzM3NzZkYmI4NGFiYW0/d2FzbV9iaW5kZ2VuOjpjb252ZXJ0OjpjbG9zdXJlczo6aW52b2\
tlM19tdXQ6OmgyMzkwZjRhNTFkMDQ3MmE5bj93YXNtX2JpbmRnZW46OmNvbnZlcnQ6OmNsb3N1cmVz\
OjppbnZva2UzX211dDo6aDM1ZTYzNTIzNDE5ODU1MjdvP3dhc21fYmluZGdlbjo6Y29udmVydDo6Y2\
xvc3VyZXM6Omludm9rZTNfbXV0OjpoM2E2NmRkYTVjY2RkZjE4NnA/d2FzbV9iaW5kZ2VuOjpjb252\
ZXJ0OjpjbG9zdXJlczo6aW52b2tlMl9tdXQ6Omg5NGEwYjM1MTEwMThkNjI3cUNzdGQ6OnBhbmlja2\
luZzo6YmVnaW5fcGFuaWNfaGFuZGxlcjo6e3tjbG9zdXJlfX06Omg0ZTQ5ZjM1MGQ5ZjRkZTM2chJf\
X3diaW5kZ2VuX3JlYWxsb2NzP3dhc21fYmluZGdlbjo6Y29udmVydDo6Y2xvc3VyZXM6Omludm9rZT\
FfbXV0OjpoMmE0YWVhM2VhM2EyMjZhM3RFPGJsb2NrX3BhZGRpbmc6OlBhZEVycm9yIGFzIGNvcmU6\
OmZtdDo6RGVidWc+OjpmbXQ6Omg3MGZjZDBmNWVhZmM1MTRmdTJjb3JlOjpvcHRpb246Ok9wdGlvbj\
xUPjo6dW53cmFwOjpoNTg4NDZlYTljYjc2NjZmMXYwPCZUIGFzIGNvcmU6OmZtdDo6RGVidWc+Ojpm\
bXQ6OmhkNjBjYTNmZTQ4MDBlM2NldzI8JlQgYXMgY29yZTo6Zm10OjpEaXNwbGF5Pjo6Zm10OjpoOG\
VjZDI2Mjc5MTBhMjE4OXhOPEkgYXMgY29yZTo6aXRlcjo6dHJhaXRzOjpjb2xsZWN0OjpJbnRvSXRl\
cmF0b3I+OjppbnRvX2l0ZXI6OmgzZTMwODVmZjc3OGI5ZTFleS1jb3JlOjpzbGljZTo6cmF3Ojpmcm\
9tX3JlZjo6aGZlNjZiNjMzZTBkMGM3N2R6LWNvcmU6OnNsaWNlOjpyYXc6OmZyb21fcmVmOjpoYTA5\
OGI4MGJkZTAyODBkM3sPX193YmluZGdlbl9mcmVlfDRhbGxvYzo6cmF3X3ZlYzo6Y2FwYWNpdHlfb3\
ZlcmZsb3c6OmhkNjEyZTdlZmExMmMzN2RmfTNhcnJheXZlYzo6YXJyYXl2ZWM6OmV4dGVuZF9wYW5p\
Yzo6aDM1OTExZTY0NzIzZTlkOWR+OWNvcmU6Om9wczo6ZnVuY3Rpb246OkZuT25jZTo6Y2FsbF9vbm\
NlOjpoZGRlOTUzNDE1ODJlOGEyYX8fX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlcoABTmNv\
cmU6OmZtdDo6bnVtOjppbXA6OjxpbXBsIGNvcmU6OmZtdDo6RGlzcGxheSBmb3IgdTMyPjo6Zm10Oj\
poZGM0MTczNmM1M2ZjNzk3NIEBMXdhc21fYmluZGdlbjo6X19ydDo6dGhyb3dfbnVsbDo6aDQzYTIw\
NDMzNTE3ZjdhYTGCATJ3YXNtX2JpbmRnZW46Ol9fcnQ6OmJvcnJvd19mYWlsOjpoZjM2YjBlNjMzMT\
dlY2Q5ZoMBKndhc21fYmluZGdlbjo6dGhyb3dfc3RyOjpoZjUxYjAyYmU3YzJjODgwY4QBKndhc21f\
YmluZGdlbjo6dGhyb3dfdmFsOjpoMjU1NTUyOGM3MzYxMTdiYYUBMTxUIGFzIGNvcmU6OmFueTo6QW\
55Pjo6dHlwZV9pZDo6aDJkNDcxYjk2YmM0Y2JjZmOGAQpydXN0X3BhbmljhwE3c3RkOjphbGxvYzo6\
ZGVmYXVsdF9hbGxvY19lcnJvcl9ob29rOjpoMGVjY2RhYzI0ZmRhMzc4ZogBb2NvcmU6OnB0cjo6ZH\
JvcF9pbl9wbGFjZTwmY29yZTo6aXRlcjo6YWRhcHRlcnM6OmNvcGllZDo6Q29waWVkPGNvcmU6OnNs\
aWNlOjppdGVyOjpJdGVyPHU4Pj4+OjpoZjdiZDA0MzdjM2U4ODYzOQDvgICAAAlwcm9kdWNlcnMCCG\
xhbmd1YWdlAQRSdXN0AAxwcm9jZXNzZWQtYnkDBXJ1c3RjHTEuNTQuMCAoYTE3OGQwMzIyIDIwMjEt\
MDctMjYpBndhbHJ1cwYwLjE5LjAMd2FzbS1iaW5kZ2VuBjAuMi43NA==\
");
const heap = new Array(32).fill(undefined);
heap.push(undefined, null, true, false);
function getObject(idx) {
    return heap[idx];
}
let heap_next = heap.length;
function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}
function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}
function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];
    heap[idx] = obj;
    return idx;
}
let cachedTextDecoder = new TextDecoder("utf-8", {
    ignoreBOM: true,
    fatal: true
});
cachedTextDecoder.decode();
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
let WASM_VECTOR_LEN = 0;
let cachedTextEncoder = new TextEncoder("utf-8");
const encodeString = function(arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
};
function passStringToWasm0(arg, malloc, realloc) {
    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }
    let len = arg.length;
    let ptr = malloc(len);
    const mem = getUint8Memory0();
    let offset = 0;
    for(; offset < len; offset++){
        const code = arg.charCodeAt(offset);
        if (code > 127) break;
        mem[ptr + offset] = code;
    }
    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);
        offset += ret.written;
    }
    WASM_VECTOR_LEN = offset;
    return ptr;
}
function isLikeNone(x) {
    return x === undefined || x === null;
}
let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}
function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function digest1(algorithm, data1, length) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        var ptr0 = passStringToWasm0(algorithm, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.digest(retptr, ptr0, len0, addHeapObject(data1), !isLikeNone(length), isLikeNone(length) ? 0 : length);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r11 = getInt32Memory0()[retptr / 4 + 1];
        var v1 = getArrayU8FromWasm0(r0, r11).slice();
        wasm.__wbindgen_free(r0, r11 * 1);
        return v1;
    } finally{
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}
const DigestContextFinalization = new FinalizationRegistry((ptr)=>wasm.__wbg_digestcontext_free(ptr)
);
class DigestContext {
    static __wrap(ptr) {
        const obj = Object.create(DigestContext.prototype);
        obj.ptr = ptr;
        DigestContextFinalization.register(obj, obj.ptr, obj);
        return obj;
    }
    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;
        DigestContextFinalization.unregister(this);
        return ptr;
    }
    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_digestcontext_free(ptr);
    }
    constructor(algorithm1){
        var ptr0 = passStringToWasm0(algorithm1, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.digestcontext_new(ptr0, len0);
        return DigestContext.__wrap(ret);
    }
    update(data) {
        wasm.digestcontext_update(this.ptr, addHeapObject(data));
    }
    digest(length) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.digestcontext_digest(retptr, this.ptr, !isLikeNone(length), isLikeNone(length) ? 0 : length);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r11 = getInt32Memory0()[retptr / 4 + 1];
            var v0 = getArrayU8FromWasm0(r0, r11).slice();
            wasm.__wbindgen_free(r0, r11 * 1);
            return v0;
        } finally{
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    digestAndReset(length) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.digestcontext_digestAndReset(retptr, this.ptr, !isLikeNone(length), isLikeNone(length) ? 0 : length);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r12 = getInt32Memory0()[retptr / 4 + 1];
            var v0 = getArrayU8FromWasm0(r0, r12).slice();
            wasm.__wbindgen_free(r0, r12 * 1);
            return v0;
        } finally{
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    digestAndDrop(length) {
        try {
            const ptr = this.__destroy_into_raw();
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.digestcontext_digestAndDrop(retptr, ptr, !isLikeNone(length), isLikeNone(length) ? 0 : length);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r13 = getInt32Memory0()[retptr / 4 + 1];
            var v0 = getArrayU8FromWasm0(r0, r13).slice();
            wasm.__wbindgen_free(r0, r13 * 1);
            return v0;
        } finally{
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    reset() {
        wasm.digestcontext_reset(this.ptr);
    }
    clone() {
        var ret1 = wasm.digestcontext_clone(this.ptr);
        return DigestContext.__wrap(ret1);
    }
}
const imports = {
    __wbindgen_placeholder__: {
        __wbg_new_f85dbdfb9cdbe2ec: function(arg0, arg1) {
            var ret2 = new TypeError(getStringFromWasm0(arg0, arg1));
            return addHeapObject(ret2);
        },
        __wbindgen_object_drop_ref: function(arg0) {
            takeObject(arg0);
        },
        __wbg_byteLength_e0515bc94cfc5dee: function(arg0) {
            var ret2 = getObject(arg0).byteLength;
            return ret2;
        },
        __wbg_byteOffset_77eec84716a2e737: function(arg0) {
            var ret2 = getObject(arg0).byteOffset;
            return ret2;
        },
        __wbg_buffer_1c5918a4ab656ff7: function(arg0) {
            var ret2 = getObject(arg0).buffer;
            return addHeapObject(ret2);
        },
        __wbg_newwithbyteoffsetandlength_e57ad1f2ce812c03: function(arg0, arg1, arg2) {
            var ret2 = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
            return addHeapObject(ret2);
        },
        __wbg_length_2d56cb37075fcfb1: function(arg0) {
            var ret2 = getObject(arg0).length;
            return ret2;
        },
        __wbindgen_memory: function() {
            var ret2 = wasm.memory;
            return addHeapObject(ret2);
        },
        __wbg_buffer_9e184d6f785de5ed: function(arg0) {
            var ret2 = getObject(arg0).buffer;
            return addHeapObject(ret2);
        },
        __wbg_new_e8101319e4cf95fc: function(arg0) {
            var ret2 = new Uint8Array(getObject(arg0));
            return addHeapObject(ret2);
        },
        __wbg_set_e8ae7b27314e8b98: function(arg0, arg1, arg2) {
            getObject(arg0).set(getObject(arg1), arg2 >>> 0);
        },
        __wbindgen_throw: function(arg0, arg1) {
            throw new Error(getStringFromWasm0(arg0, arg1));
        },
        __wbindgen_rethrow: function(arg0) {
            throw takeObject(arg0);
        }
    }
};
const wasmModule = new WebAssembly.Module(data1);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
const wasm = wasmInstance.exports;
const _wasm = wasm;
const _wasmModule = wasmModule;
const _wasmInstance = wasmInstance;
const mod3 = function() {
    return {
        digest: digest1,
        DigestContext: DigestContext,
        _wasm: _wasm,
        _wasmModule: _wasmModule,
        _wasmInstance: _wasmInstance,
        _wasmBytes: data1
    };
}();
const digestAlgorithms = [
    "BLAKE2B-256",
    "BLAKE2B-384",
    "BLAKE2B",
    "BLAKE2S",
    "BLAKE3",
    "KECCAK-224",
    "KECCAK-256",
    "KECCAK-384",
    "KECCAK-512",
    "SHA-384",
    "SHA3-224",
    "SHA3-256",
    "SHA3-384",
    "SHA3-512",
    "SHAKE128",
    "SHAKE256",
    "RIPEMD-160",
    "SHA-224",
    "SHA-256",
    "SHA-512",
    "MD5",
    "SHA-1", 
];
const webCrypto = ((crypto)=>({
        getRandomValues: crypto.getRandomValues?.bind(crypto),
        randomUUID: crypto.randomUUID?.bind(crypto),
        subtle: {
            decrypt: crypto.subtle?.decrypt?.bind(crypto.subtle),
            deriveBits: crypto.subtle?.deriveBits?.bind(crypto.subtle),
            deriveKey: crypto.subtle?.deriveKey?.bind(crypto.subtle),
            digest: crypto.subtle?.digest?.bind(crypto.subtle),
            encrypt: crypto.subtle?.encrypt?.bind(crypto.subtle),
            exportKey: crypto.subtle?.exportKey?.bind(crypto.subtle),
            generateKey: crypto.subtle?.generateKey?.bind(crypto.subtle),
            importKey: crypto.subtle?.importKey?.bind(crypto.subtle),
            sign: crypto.subtle?.sign?.bind(crypto.subtle),
            unwrapKey: crypto.subtle?.unwrapKey?.bind(crypto.subtle),
            verify: crypto.subtle?.verify?.bind(crypto.subtle),
            wrapKey: crypto.subtle?.wrapKey?.bind(crypto.subtle)
        }
    })
)(globalThis.crypto);
const bufferSourceBytes = (data2)=>{
    let bytes;
    if (data2 instanceof Uint8Array) {
        bytes = data2;
    } else if (ArrayBuffer.isView(data2)) {
        bytes = new Uint8Array(data2.buffer, data2.byteOffset, data2.byteLength);
    } else if (data2 instanceof ArrayBuffer) {
        bytes = new Uint8Array(data2);
    }
    return bytes;
};
const stdCrypto = ((x)=>x
)({
    ...webCrypto,
    subtle: {
        ...webCrypto.subtle,
        async digest (algorithm, data) {
            const { name: name2 , length  } = normalizeAlgorithm(algorithm);
            const bytes = bufferSourceBytes(data);
            if (webCrypto.subtle?.digest && webCryptoDigestAlgorithms.includes(name2) && bytes) {
                return webCrypto.subtle.digest(algorithm, bytes);
            } else if (digestAlgorithms.includes(name2)) {
                if (bytes) {
                    return stdCrypto.subtle.digestSync(algorithm, bytes);
                } else if (data[Symbol.iterator]) {
                    return stdCrypto.subtle.digestSync(algorithm, data);
                } else if (data[Symbol.asyncIterator]) {
                    const context = new mod3.DigestContext(name2);
                    for await (const chunk of data){
                        const chunkBytes = bufferSourceBytes(chunk);
                        if (!chunkBytes) {
                            throw new TypeError("data contained chunk of the wrong type");
                        }
                        context.update(chunkBytes);
                    }
                    return context.digestAndDrop(length);
                } else {
                    throw new TypeError("data must be a BufferSource or [Async]Iterable<BufferSource>");
                }
            } else if (webCrypto.subtle?.digest) {
                return await webCrypto.subtle.digest(algorithm, data);
            } else {
                throw new TypeError(`unsupported digest algorithm: ${algorithm}`);
            }
        },
        digestSync (algorithm, data) {
            algorithm = normalizeAlgorithm(algorithm);
            const bytes = bufferSourceBytes(data);
            if (bytes) {
                return mod3.digest(algorithm.name, bytes, undefined);
            } else if (data[Symbol.iterator]) {
                const context = new mod3.DigestContext(algorithm.name);
                for (const chunk of data){
                    const chunkBytes = bufferSourceBytes(chunk);
                    if (!chunkBytes) {
                        throw new TypeError("data contained chunk of the wrong type");
                    }
                    context.update(chunkBytes);
                }
                return context.digestAndDrop(algorithm.length);
            } else {
                throw new TypeError("data must be a BufferSource or Iterable<BufferSource>");
            }
        }
    }
});
const webCryptoDigestAlgorithms = [
    "SHA-384",
    "SHA-256",
    "SHA-512",
    "SHA-1", 
];
const normalizeAlgorithm = (algorithm2)=>typeof algorithm2 === "string" ? {
        name: algorithm2.toUpperCase()
    } : {
        ...algorithm2,
        name: algorithm2.name.toUpperCase()
    }
;
var OpCode;
(function(OpCode1) {
    OpCode1[OpCode1["Continue"] = 0] = "Continue";
    OpCode1[OpCode1["TextFrame"] = 1] = "TextFrame";
    OpCode1[OpCode1["BinaryFrame"] = 2] = "BinaryFrame";
    OpCode1[OpCode1["Close"] = 8] = "Close";
    OpCode1[OpCode1["Ping"] = 9] = "Ping";
    OpCode1[OpCode1["Pong"] = 10] = "Pong";
})(OpCode || (OpCode = {
}));
function isWebSocketCloseEvent(a) {
    return hasOwnProperty(a, "code");
}
function isWebSocketPingEvent(a) {
    return Array.isArray(a) && a[0] === "ping" && a[1] instanceof Uint8Array;
}
function isWebSocketPongEvent(a) {
    return Array.isArray(a) && a[0] === "pong" && a[1] instanceof Uint8Array;
}
function unmask(payload, mask) {
    if (mask) {
        for(let i = 0, len = payload.length; i < len; i++){
            payload[i] ^= mask[i & 3];
        }
    }
}
async function writeFrame(frame, writer3) {
    const payloadLength = frame.payload.byteLength;
    let header;
    const hasMask = frame.mask ? 128 : 0;
    if (frame.mask && frame.mask.byteLength !== 4) {
        throw new Error("invalid mask. mask must be 4 bytes: length=" + frame.mask.byteLength);
    }
    if (payloadLength < 126) {
        header = new Uint8Array([
            128 | frame.opcode,
            hasMask | payloadLength
        ]);
    } else if (payloadLength < 65535) {
        header = new Uint8Array([
            128 | frame.opcode,
            hasMask | 126,
            payloadLength >>> 8,
            payloadLength & 255, 
        ]);
    } else {
        header = new Uint8Array([
            128 | frame.opcode,
            hasMask | 127,
            ...sliceLongToBytes(payloadLength), 
        ]);
    }
    if (frame.mask) {
        header = concat(header, frame.mask);
    }
    unmask(frame.payload, frame.mask);
    header = concat(header, frame.payload);
    const w = BufWriter.create(writer3);
    await w.write(header);
    await w.flush();
}
async function readFrame(buf) {
    let b = await buf.readByte();
    assert(b !== null);
    let isLastFrame = false;
    switch(b >>> 4){
        case 8:
            isLastFrame = true;
            break;
        case 0:
            isLastFrame = false;
            break;
        default:
            throw new Error("invalid signature");
    }
    const opcode = b & 15;
    b = await buf.readByte();
    assert(b !== null);
    const hasMask = b >>> 7;
    let payloadLength = b & 127;
    if (payloadLength === 126) {
        const l = await readShort(buf);
        assert(l !== null);
        payloadLength = l;
    } else if (payloadLength === 127) {
        const l = await readLong(buf);
        assert(l !== null);
        payloadLength = Number(l);
    }
    let mask;
    if (hasMask) {
        mask = new Uint8Array(4);
        assert(await buf.readFull(mask) !== null);
    }
    const payload = new Uint8Array(payloadLength);
    assert(await buf.readFull(payload) !== null);
    return {
        isLastFrame,
        opcode,
        mask,
        payload
    };
}
class WebSocketImpl {
    conn;
    mask;
    bufReader;
    bufWriter;
    sendQueue = [];
    constructor({ conn , bufReader , bufWriter , mask  }){
        this.conn = conn;
        this.mask = mask;
        this.bufReader = bufReader || new BufReader(conn);
        this.bufWriter = bufWriter || new BufWriter(conn);
    }
    async *[Symbol.asyncIterator]() {
        const decoder1 = new TextDecoder();
        let frames = [];
        let payloadsLength = 0;
        while(!this._isClosed){
            let frame;
            try {
                frame = await readFrame(this.bufReader);
            } catch  {
                this.ensureSocketClosed();
                break;
            }
            unmask(frame.payload, frame.mask);
            switch(frame.opcode){
                case OpCode.TextFrame:
                case OpCode.BinaryFrame:
                case OpCode.Continue:
                    frames.push(frame);
                    payloadsLength += frame.payload.length;
                    if (frame.isLastFrame) {
                        const concat1 = new Uint8Array(payloadsLength);
                        let offs = 0;
                        for (const frame1 of frames){
                            concat1.set(frame1.payload, offs);
                            offs += frame1.payload.length;
                        }
                        if (frames[0].opcode === OpCode.TextFrame) {
                            yield decoder1.decode(concat1);
                        } else {
                            yield concat1;
                        }
                        frames = [];
                        payloadsLength = 0;
                    }
                    break;
                case OpCode.Close:
                    {
                        const code = frame.payload[0] << 8 | frame.payload[1];
                        const reason = decoder1.decode(frame.payload.subarray(2, frame.payload.length));
                        await this.close(code, reason);
                        yield {
                            code,
                            reason
                        };
                        return;
                    }
                case OpCode.Ping:
                    await this.enqueue({
                        opcode: OpCode.Pong,
                        payload: frame.payload,
                        isLastFrame: true
                    });
                    yield [
                        "ping",
                        frame.payload
                    ];
                    break;
                case OpCode.Pong:
                    yield [
                        "pong",
                        frame.payload
                    ];
                    break;
                default:
            }
        }
    }
    dequeue() {
        const [entry] = this.sendQueue;
        if (!entry) return;
        if (this._isClosed) return;
        const { d , frame  } = entry;
        writeFrame(frame, this.bufWriter).then(()=>d.resolve()
        ).catch((e)=>d.reject(e)
        ).finally(()=>{
            this.sendQueue.shift();
            this.dequeue();
        });
    }
    enqueue(frame) {
        if (this._isClosed) {
            throw new Deno.errors.ConnectionReset("Socket has already been closed");
        }
        const d = deferred();
        this.sendQueue.push({
            d,
            frame
        });
        if (this.sendQueue.length === 1) {
            this.dequeue();
        }
        return d;
    }
    send(data) {
        const opcode = typeof data === "string" ? OpCode.TextFrame : OpCode.BinaryFrame;
        const payload = typeof data === "string" ? new TextEncoder().encode(data) : data;
        const isLastFrame = true;
        const frame = {
            isLastFrame: true,
            opcode,
            payload,
            mask: this.mask
        };
        return this.enqueue(frame);
    }
    ping(data = "") {
        const payload = typeof data === "string" ? new TextEncoder().encode(data) : data;
        const frame = {
            isLastFrame: true,
            opcode: OpCode.Ping,
            mask: this.mask,
            payload
        };
        return this.enqueue(frame);
    }
    _isClosed = false;
    get isClosed() {
        return this._isClosed;
    }
    async close(code = 1000, reason) {
        try {
            const header = [
                code >>> 8,
                code & 255
            ];
            let payload;
            if (reason) {
                const reasonBytes = new TextEncoder().encode(reason);
                payload = new Uint8Array(2 + reasonBytes.byteLength);
                payload.set(header);
                payload.set(reasonBytes, 2);
            } else {
                payload = new Uint8Array(header);
            }
            await this.enqueue({
                isLastFrame: true,
                opcode: OpCode.Close,
                mask: this.mask,
                payload
            });
        } catch (e) {
            throw e;
        } finally{
            this.ensureSocketClosed();
        }
    }
    closeForce() {
        this.ensureSocketClosed();
    }
    ensureSocketClosed() {
        if (this.isClosed) return;
        try {
            this.conn.close();
        } catch (e) {
            console.error(e);
        } finally{
            this._isClosed = true;
            const rest = this.sendQueue;
            this.sendQueue = [];
            rest.forEach((e)=>e.d.reject(new Deno.errors.ConnectionReset("Socket has already been closed"))
            );
        }
    }
}
function acceptable(req) {
    const upgrade = req.headers.get("upgrade");
    if (!upgrade || upgrade.toLowerCase() !== "websocket") {
        return false;
    }
    const secKey = req.headers.get("sec-websocket-key");
    return req.headers.has("sec-websocket-key") && typeof secKey === "string" && secKey.length > 0;
}
const kGUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
function createSecAccept(nonce) {
    return encode(stdCrypto.subtle.digestSync("SHA-1", new TextEncoder().encode(nonce + kGUID)));
}
async function acceptWebSocket(req) {
    const { conn: conn1 , headers , bufReader: bufReader1 , bufWriter: bufWriter1  } = req;
    if (acceptable(req)) {
        const sock = new WebSocketImpl({
            conn: conn1,
            bufReader: bufReader1,
            bufWriter: bufWriter1
        });
        const secKey = headers.get("sec-websocket-key");
        if (typeof secKey !== "string") {
            throw new Error("sec-websocket-key is not provided");
        }
        const secAccept = createSecAccept(secKey);
        const newHeaders = new Headers({
            Upgrade: "websocket",
            Connection: "Upgrade",
            "Sec-WebSocket-Accept": secAccept
        });
        const secProtocol = headers.get("sec-websocket-protocol");
        if (typeof secProtocol === "string") {
            newHeaders.set("Sec-WebSocket-Protocol", secProtocol);
        }
        const secVersion = headers.get("sec-websocket-version");
        if (typeof secVersion === "string") {
            newHeaders.set("Sec-WebSocket-Version", secVersion);
        }
        await writeResponse(bufWriter1, {
            status: 101,
            headers: newHeaders
        });
        return sock;
    }
    throw new Error("request is not acceptable");
}
const db = JSON.parse(`{
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/3gpp-ims+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpphal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpphalforms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/activity+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamcontrol+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-updatestreamparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomdeleted"]
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomsvc"]
  },
  "application/atsc-dwd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dwd"]
  },
  "application/atsc-dynamic-event-message": {
    "source": "iana"
  },
  "application/atsc-held+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["held"]
  },
  "application/atsc-rdt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/atsc-rsat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsat"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/bacnet-xdd+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xcs"]
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/captive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/cbor-seq": {
    "source": "iana"
  },
  "application/cccex": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ccxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdfx"]
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cellml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/clr": {
    "source": "iana"
  },
  "application/clue+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/clue_info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-payload": {
    "source": "iana"
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cose": {
    "source": "iana"
  },
  "application/cose-key": {
    "source": "iana"
  },
  "application/cose-key-set": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cstadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cwt": {
    "source": "iana"
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpd"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dicom+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/dns+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dns-message": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dbk"]
  },
  "application/dots+cbor": {
    "source": "iana"
  },
  "application/dskpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es","ecma"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/efi": {
    "source": "iana"
  },
  "application/elm+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/elm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.cap+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.ecall.msd": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.veds+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emma+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emotionml"]
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/epub+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/expect-ct-report+json": {
    "source": "iana",
    "compressible": true
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fdt"]
  },
  "application/fhir+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fhir+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/fido.trusted-apps+json": {
    "compressible": true
  },
  "application/fits": {
    "source": "iana"
  },
  "application/flexfec": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false
  },
  "application/framework-attributes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/geo+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["geojson"]
  },
  "application/geo+json-seq": {
    "source": "iana"
  },
  "application/geopackage+sqlite3": {
    "source": "iana"
  },
  "application/geoxacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/gltf-buffer": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gz"]
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/hjson": {
    "extensions": ["hjson"]
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["its"]
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js","mjs"]
  },
  "application/jf2feed+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jscalendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/kpml-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/lgr+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lgr"]
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lost+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lpf+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mathml-presentation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-deregister+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-envelope+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-protection-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-reception-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-schedule+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/media_control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mipc": {
    "source": "iana"
  },
  "application/missing-blocks+cbor-seq": {
    "source": "iana"
  },
  "application/mmt-aei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["maei"]
  },
  "application/mmt-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musd"]
  },
  "application/mods+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mrb-publish+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/msc-ivr+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msc-mixer+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mud+json": {
    "source": "iana",
    "compressible": true
  },
  "application/multipart-core": {
    "source": "iana"
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/n-quads": {
    "source": "iana",
    "extensions": ["nq"]
  },
  "application/n-triples": {
    "source": "iana",
    "extensions": ["nt"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-groupinfo": {
    "source": "iana",
    "charset": "US-ASCII"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/node": {
    "source": "iana",
    "extensions": ["cjs"]
  },
  "application/nss": {
    "source": "iana"
  },
  "application/oauth-authz-req+jwt": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/opc-nodeset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/oscore": {
    "source": "iana"
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p21+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/p2p-overlay+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["relo"]
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/passport": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pem-certificate-chain": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pidf-diff+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkcs8-encrypted": {
    "source": "iana"
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/ppsp-tracker+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/provenance+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["provx"]
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.cyn": {
    "source": "iana",
    "charset": "7-BIT"
  },
  "application/prs.hpub+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pskc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pskcxml"]
  },
  "application/pvd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raml+yaml": {
    "compressible": true,
    "extensions": ["raml"]
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf","owl"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/rls-services+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rs"]
  },
  "application/route-apd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rapd"]
  },
  "application/route-s-tsid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sls"]
  },
  "application/route-usd+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rusd"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-publication": {
    "source": "iana"
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/samlmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sarif+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sarif-external-properties+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sbe": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/secevent+jwt": {
    "source": "iana"
  },
  "application/senml+cbor": {
    "source": "iana"
  },
  "application/senml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["senmlx"]
  },
  "application/senml-etch+cbor": {
    "source": "iana"
  },
  "application/senml-etch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml-exi": {
    "source": "iana"
  },
  "application/sensml+cbor": {
    "source": "iana"
  },
  "application/sensml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sensml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sensmlx"]
  },
  "application/sensml-exi": {
    "source": "iana"
  },
  "application/sep+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana",
    "extensions": ["siv","sieve"]
  },
  "application/simple-filter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/sipc": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ssml"]
  },
  "application/stix+json": {
    "source": "iana",
    "compressible": true
  },
  "application/swid+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["swidtag"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/taxii+json": {
    "source": "iana",
    "compressible": true
  },
  "application/td+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tei","teicorpus"]
  },
  "application/tetra_isi": {
    "source": "iana"
  },
  "application/thraud+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/tlsrpt+gzip": {
    "source": "iana"
  },
  "application/tlsrpt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tnauthlist": {
    "source": "iana"
  },
  "application/toml": {
    "compressible": true,
    "extensions": ["toml"]
  },
  "application/trickle-ice-sdpfrag": {
    "source": "iana"
  },
  "application/trig": {
    "source": "iana",
    "extensions": ["trig"]
  },
  "application/ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttml"]
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/tzif": {
    "source": "iana"
  },
  "application/tzif-leap": {
    "source": "iana"
  },
  "application/ubjson": {
    "compressible": false,
    "extensions": ["ubj"]
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-ressheet+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rsheet"]
  },
  "application/urc-targetdesc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["td"]
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["1km"]
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    "source": "iana"
  },
  "application/vnd.3gpp.5gnas": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gmop+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gtpc": {
    "source": "iana"
  },
  "application/vnd.3gpp.interworking-data": {
    "source": "iana"
  },
  "application/vnd.3gpp.lpp": {
    "source": "iana"
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-payload": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ngap": {
    "source": "iana"
  },
  "application/vnd.3gpp.pfcp": {
    "source": "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.s1ap": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3lightssoftware.imagescal": {
    "source": "iana"
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata-pagedef": {
    "source": "iana"
  },
  "application/vnd.afpc.cmoca-cmresource": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-charset": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codedfont": {
    "source": "iana"
  },
  "application/vnd.afpc.foca-codepage": {
    "source": "iana"
  },
  "application/vnd.afpc.modca": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-cmtable": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-formdef": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-mediummap": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-objectcontainer": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-overlay": {
    "source": "iana"
  },
  "application/vnd.afpc.modca-pagesegment": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amadeus+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.amazon.mobi8-ebook": {
    "source": "iana"
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.android.ota": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.arrow.file": {
    "source": "iana"
  },
  "application/vnd.apache.arrow.stream": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.aplextor.warrp+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apothekende.reservation+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.keynote": {
    "source": "iana",
    "extensions": ["key"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.numbers": {
    "source": "iana",
    "extensions": ["numbers"]
  },
  "application/vnd.apple.pages": {
    "source": "iana",
    "extensions": ["pages"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artisan+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avalon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.avistar+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmml"]
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.banana-accounting": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.error": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bint.med-content": {
    "source": "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.blink-idb-value-wrapper": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.bpf": {
    "source": "iana"
  },
  "application/vnd.bpf3": {
    "source": "iana"
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.byu.uapi+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.capasystems-pg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdxml"]
  },
  "application/vnd.chess-pgn": {
    "source": "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.ciedi": {
    "source": "iana"
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csl"]
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.comicbook+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.comicbook-rar": {
    "source": "iana"
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.coreos.ignition+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wbs"]
  },
  "application/vnd.cryptii.pipe+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.crypto-shade-file": {
    "source": "iana"
  },
  "application/vnd.cryptomator.encrypted": {
    "source": "iana"
  },
  "application/vnd.cryptomator.vault": {
    "source": "iana"
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.cyclonedx+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cyclonedx+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.d3m-dataset": {
    "source": "iana"
  },
  "application/vnd.d3m-problem": {
    "source": "iana"
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.datapackage+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dataresource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dbf": {
    "source": "iana",
    "extensions": ["dbf"]
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume.movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbisl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecip.rlp": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.efi.img": {
    "source": "iana"
  },
  "application/vnd.efi.iso": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.espass-espass+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    "source": "iana"
  },
  "application/vnd.exstream-empower+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.exstream-package": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujifilm.fb.docuworks": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.binder": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujifilm.fb.jfi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.futoin+cbor": {
    "source": "iana"
  },
  "application/vnd.futoin+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.gentics.grd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.slides": {
    "source": "iana"
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.hdt": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyper+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyper-item+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.imagemeter.folder+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.imagemeter.image+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.iso11783-10+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las": {
    "source": "iana"
  },
  "application/vnd.las.las+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lasxml"]
  },
  "application/vnd.laszip": {
    "source": "iana"
  },
  "application/vnd.leap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lbe"]
  },
  "application/vnd.logipipe.circuit+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.loom": {
    "source": "iana"
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana",
    "extensions": ["mvt"]
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-outlook": {
    "compressible": false,
    "extensions": ["msg"]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-printschematicket+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nearst.inv+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nebumind.line": {
    "source": "iana"
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nimn": {
    "source": "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ac"]
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.ocf+cbor": {
    "source": "iana"
  },
  "application/vnd.oci.image.manifest.v1+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+cbor": {
    "source": "iana"
  },
  "application/vnd.oma.lwm2m+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+tlv": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-email+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-file+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.onepager": {
    "source": "iana"
  },
  "application/vnd.onepagertamp": {
    "source": "iana"
  },
  "application/vnd.onepagertamx": {
    "source": "iana"
  },
  "application/vnd.onepagertat": {
    "source": "iana"
  },
  "application/vnd.onepagertatp": {
    "source": "iana"
  },
  "application/vnd.onepagertatx": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["obgx"]
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openstreetmap.data+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osm"]
  },
  "application/vnd.opentimestamps.ots": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "iana",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "iana",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "iana",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "iana"
  },
  "application/vnd.patentdive": {
    "source": "iana"
  },
  "application/vnd.patientecommsdoc": {
    "source": "iana"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.psfs": {
    "source": "iana"
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quarantainenet": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.rar": {
    "source": "iana",
    "extensions": ["rar"]
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.resilient.logic": {
    "source": "iana"
  },
  "application/vnd.restful+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sar": {
    "source": "iana"
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.seis+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shade-save-file": {
    "source": "iana"
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.shootproof+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shopkick+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shp": {
    "source": "iana"
  },
  "application/vnd.shx": {
    "source": "iana"
  },
  "application/vnd.sigrok.session": {
    "source": "iana"
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.snesdev-page-table": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["fo"]
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sqlite3": {
    "source": "iana"
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wadl"]
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.sycle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["ddf"]
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tableschema+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.think-cell.ppttc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.tri.onesource": {
    "source": "iana"
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.vel+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.veritone.aion+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.veryant.thin": {
    "source": "iana"
  },
  "application/vnd.ves.encrypted": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.dpp": {
    "source": "iana"
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.youtube.yt": {
    "source": "iana"
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vxml"]
  },
  "application/voucher-cms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/wasm": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wasm"]
  },
  "application/watcherinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/webpush-options+json": {
    "source": "iana",
    "compressible": true
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-arj": {
    "compressible": false,
    "extensions": ["arj"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-keepass2": {
    "extensions": ["kdbx"]
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-pki-message": {
    "source": "iana"
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-virtualbox-hdd": {
    "compressible": true,
    "extensions": ["hdd"]
  },
  "application/x-virtualbox-ova": {
    "compressible": true,
    "extensions": ["ova"]
  },
  "application/x-virtualbox-ovf": {
    "compressible": true,
    "extensions": ["ovf"]
  },
  "application/x-virtualbox-vbox": {
    "compressible": true,
    "extensions": ["vbox"]
  },
  "application/x-virtualbox-vbox-extpack": {
    "compressible": false,
    "extensions": ["vbox-extpack"]
  },
  "application/x-virtualbox-vdi": {
    "compressible": true,
    "extensions": ["vdi"]
  },
  "application/x-virtualbox-vhd": {
    "compressible": true,
    "extensions": ["vhd"]
  },
  "application/x-virtualbox-vmdk": {
    "compressible": true,
    "extensions": ["vmdk"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "iana",
    "extensions": ["der","crt","pem"]
  },
  "application/x-x509-ca-ra-cert": {
    "source": "iana"
  },
  "application/x-x509-next-ca-cert": {
    "source": "iana"
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xaml+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xav"]
  },
  "application/xcap-caps+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xca"]
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xel"]
  },
  "application/xcap-error+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-ns+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xns"]
  },
  "application/xcon-conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xenc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/xliff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd","rng"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xmpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xsl","xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yang-data+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yin+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "application/zstd": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana",
    "compressible": false,
    "extensions": ["3gpp"]
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/aac": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana",
    "extensions": ["amr"]
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/flexfec": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/melp": {
    "source": "iana"
  },
  "audio/melp1200": {
    "source": "iana"
  },
  "audio/melp2400": {
    "source": "iana"
  },
  "audio/melp600": {
    "source": "iana"
  },
  "audio/mhas": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana",
    "extensions": ["mxmf"]
  },
  "audio/mp3": {
    "compressible": false,
    "extensions": ["mp3"]
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["m4a","mp4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx","opus"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/scip": {
    "source": "iana"
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sofa": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tetra_acelp": {
    "source": "iana"
  },
  "audio/tetra_acelp_bb": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/tsvcis": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/usac": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dts.uhd": {
    "source": "iana"
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.presonus.multitrack": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/collection": {
    "source": "iana",
    "extensions": ["ttc"]
  },
  "font/otf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["otf"]
  },
  "font/sfnt": {
    "source": "iana"
  },
  "font/ttf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttf"]
  },
  "font/woff": {
    "source": "iana",
    "extensions": ["woff"]
  },
  "font/woff2": {
    "source": "iana",
    "extensions": ["woff2"]
  },
  "image/aces": {
    "source": "iana",
    "extensions": ["exr"]
  },
  "image/apng": {
    "compressible": false,
    "extensions": ["apng"]
  },
  "image/avci": {
    "source": "iana"
  },
  "image/avcs": {
    "source": "iana"
  },
  "image/avif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["avif"]
  },
  "image/bmp": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/dicom-rle": {
    "source": "iana",
    "extensions": ["drle"]
  },
  "image/emf": {
    "source": "iana",
    "extensions": ["emf"]
  },
  "image/fits": {
    "source": "iana",
    "extensions": ["fits"]
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/heic": {
    "source": "iana",
    "extensions": ["heic"]
  },
  "image/heic-sequence": {
    "source": "iana",
    "extensions": ["heics"]
  },
  "image/heif": {
    "source": "iana",
    "extensions": ["heif"]
  },
  "image/heif-sequence": {
    "source": "iana",
    "extensions": ["heifs"]
  },
  "image/hej2k": {
    "source": "iana",
    "extensions": ["hej2"]
  },
  "image/hsj2": {
    "source": "iana",
    "extensions": ["hsj2"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jls": {
    "source": "iana",
    "extensions": ["jls"]
  },
  "image/jp2": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jp2","jpg2"]
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jph": {
    "source": "iana",
    "extensions": ["jph"]
  },
  "image/jphc": {
    "source": "iana",
    "extensions": ["jhc"]
  },
  "image/jpm": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpm"]
  },
  "image/jpx": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpx","jpf"]
  },
  "image/jxr": {
    "source": "iana",
    "extensions": ["jxr"]
  },
  "image/jxra": {
    "source": "iana",
    "extensions": ["jxra"]
  },
  "image/jxrs": {
    "source": "iana",
    "extensions": ["jxrs"]
  },
  "image/jxs": {
    "source": "iana",
    "extensions": ["jxs"]
  },
  "image/jxsc": {
    "source": "iana",
    "extensions": ["jxsc"]
  },
  "image/jxsi": {
    "source": "iana",
    "extensions": ["jxsi"]
  },
  "image/jxss": {
    "source": "iana",
    "extensions": ["jxss"]
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/ktx2": {
    "source": "iana",
    "extensions": ["ktx2"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana",
    "extensions": ["pti"]
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana",
    "extensions": ["t38"]
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tif","tiff"]
  },
  "image/tiff-fx": {
    "source": "iana",
    "extensions": ["tfx"]
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana",
    "extensions": ["azv"]
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana",
    "extensions": ["ico"]
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-dds": {
    "extensions": ["dds"]
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.pco.b16": {
    "source": "iana",
    "extensions": ["b16"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana",
    "extensions": ["tap"]
  },
  "image/vnd.valve.source.texture": {
    "source": "iana",
    "extensions": ["vtf"]
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana",
    "extensions": ["pcx"]
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/wmf": {
    "source": "iana",
    "extensions": ["wmf"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana",
    "extensions": [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana",
    "extensions": ["u8msg"]
  },
  "message/global-delivery-status": {
    "source": "iana",
    "extensions": ["u8dsn"]
  },
  "message/global-disposition-notification": {
    "source": "iana",
    "extensions": ["u8mdn"]
  },
  "message/global-headers": {
    "source": "iana",
    "extensions": ["u8hdr"]
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana",
    "extensions": ["wsc"]
  },
  "model/3mf": {
    "source": "iana",
    "extensions": ["3mf"]
  },
  "model/e57": {
    "source": "iana"
  },
  "model/gltf+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gltf"]
  },
  "model/gltf-binary": {
    "source": "iana",
    "compressible": true,
    "extensions": ["glb"]
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/mtl": {
    "source": "iana",
    "extensions": ["mtl"]
  },
  "model/obj": {
    "source": "iana",
    "extensions": ["obj"]
  },
  "model/step+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["stpz"]
  },
  "model/step-xml+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["stpxz"]
  },
  "model/stl": {
    "source": "iana",
    "extensions": ["stl"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana",
    "extensions": ["ogex"]
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana",
    "extensions": ["x_b"]
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana",
    "extensions": ["x_t"]
  },
  "model/vnd.pytha.pyox": {
    "source": "iana"
  },
  "model/vnd.rosette.annotated-data-model": {
    "source": "iana"
  },
  "model/vnd.sap.vds": {
    "source": "iana",
    "extensions": ["vds"]
  },
  "model/vnd.usdz+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["usdz"]
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana",
    "extensions": ["bsp"]
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana",
    "extensions": ["x3db"]
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana",
    "extensions": ["x3dv"]
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana"
  },
  "multipart/multilingual": {
    "source": "iana"
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/vnd.bint.med-plus": {
    "source": "iana"
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/cql": {
    "source": "iana"
  },
  "text/cql-expression": {
    "source": "iana"
  },
  "text/cql-identifier": {
    "source": "iana"
  },
  "text/css": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/fhirpath": {
    "source": "iana"
  },
  "text/flexfec": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/gff3": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "compressible": true,
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana",
    "compressible": true,
    "extensions": ["markdown","md"]
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mdx": {
    "compressible": true,
    "extensions": ["mdx"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/prs.prop.logic": {
    "source": "iana"
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/shaclc": {
    "source": "iana"
  },
  "text/shex": {
    "source": "iana",
    "extensions": ["shex"]
  },
  "text/slim": {
    "extensions": ["slim","slm"]
  },
  "text/spdx": {
    "source": "iana",
    "extensions": ["spdx"]
  },
  "text/strings": {
    "source": "iana"
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.ascii-art": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.ficlab.flt": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.gml": {
    "source": "iana"
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.hans": {
    "source": "iana"
  },
  "text/vnd.hgl": {
    "source": "iana"
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.senx.warpscript": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sosi": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana",
    "charset": "UTF-8"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-org": {
    "compressible": true,
    "extensions": ["org"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "compressible": true,
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "video/3gpp": {
    "source": "iana",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "iana"
  },
  "video/3gpp2": {
    "source": "iana",
    "extensions": ["3g2"]
  },
  "video/av1": {
    "source": "iana"
  },
  "video/bmpeg": {
    "source": "iana"
  },
  "video/bt656": {
    "source": "iana"
  },
  "video/celb": {
    "source": "iana"
  },
  "video/dv": {
    "source": "iana"
  },
  "video/encaprtp": {
    "source": "iana"
  },
  "video/ffv1": {
    "source": "iana"
  },
  "video/flexfec": {
    "source": "iana"
  },
  "video/h261": {
    "source": "iana",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "iana",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "iana"
  },
  "video/h263-2000": {
    "source": "iana"
  },
  "video/h264": {
    "source": "iana",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "iana"
  },
  "video/h264-svc": {
    "source": "iana"
  },
  "video/h265": {
    "source": "iana"
  },
  "video/iso.segment": {
    "source": "iana",
    "extensions": ["m4s"]
  },
  "video/jpeg": {
    "source": "iana",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "iana"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/mj2": {
    "source": "iana",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "iana"
  },
  "video/mp2p": {
    "source": "iana"
  },
  "video/mp2t": {
    "source": "iana",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "iana"
  },
  "video/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "iana"
  },
  "video/mpv": {
    "source": "iana"
  },
  "video/nv": {
    "source": "iana"
  },
  "video/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "iana"
  },
  "video/pointer": {
    "source": "iana"
  },
  "video/quicktime": {
    "source": "iana",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raptorfec": {
    "source": "iana"
  },
  "video/raw": {
    "source": "iana"
  },
  "video/rtp-enc-aescm128": {
    "source": "iana"
  },
  "video/rtploopback": {
    "source": "iana"
  },
  "video/rtx": {
    "source": "iana"
  },
  "video/scip": {
    "source": "iana"
  },
  "video/smpte291": {
    "source": "iana"
  },
  "video/smpte292m": {
    "source": "iana"
  },
  "video/ulpfec": {
    "source": "iana"
  },
  "video/vc1": {
    "source": "iana"
  },
  "video/vc2": {
    "source": "iana"
  },
  "video/vnd.cctv": {
    "source": "iana"
  },
  "video/vnd.dece.hd": {
    "source": "iana",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "iana",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "iana"
  },
  "video/vnd.dece.pd": {
    "source": "iana",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "iana",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "iana",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dvb.file": {
    "source": "iana",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "iana",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "iana"
  },
  "video/vnd.motorola.video": {
    "source": "iana"
  },
  "video/vnd.motorola.videop": {
    "source": "iana"
  },
  "video/vnd.mpegurl": {
    "source": "iana",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "iana",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "iana"
  },
  "video/vnd.nokia.mp4vr": {
    "source": "iana"
  },
  "video/vnd.nokia.videovoip": {
    "source": "iana"
  },
  "video/vnd.objectvideo": {
    "source": "iana"
  },
  "video/vnd.radgamettools.bink": {
    "source": "iana"
  },
  "video/vnd.radgamettools.smacker": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "iana"
  },
  "video/vnd.sealed.swf": {
    "source": "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "iana"
  },
  "video/vnd.uvvu.mp4": {
    "source": "iana",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "iana",
    "extensions": ["viv"]
  },
  "video/vnd.youtube.yt": {
    "source": "iana"
  },
  "video/vp8": {
    "source": "iana"
  },
  "video/vp9": {
    "source": "iana"
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}`);
const EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
const TEXT_TYPE_REGEXP = /^text\//i;
const extensions = new Map();
const types1 = new Map();
function populateMaps(extensions1, types1) {
    const preference = [
        "nginx",
        "apache",
        undefined,
        "iana"
    ];
    for (const type of Object.keys(db)){
        const mime = db[type];
        const exts = mime.extensions;
        if (!exts || !exts.length) {
            continue;
        }
        extensions1.set(type, exts);
        for (const ext of exts){
            const current = types1.get(ext);
            if (current) {
                const from = preference.indexOf(db[current].source);
                const to = preference.indexOf(mime.source);
                if (current !== "application/octet-stream" && (from > to || from === to && current.substr(0, 12) === "application/")) {
                    continue;
                }
            }
            types1.set(ext, type);
        }
    }
}
populateMaps(extensions, types1);
function charset(type) {
    const m = EXTRACT_TYPE_REGEXP.exec(type);
    if (!m) {
        return undefined;
    }
    const [match] = m;
    const mime = db[match.toLowerCase()];
    if (mime && mime.charset) {
        return mime.charset;
    }
    if (TEXT_TYPE_REGEXP.test(match)) {
        return "UTF-8";
    }
    return undefined;
}
function lookup(path1) {
    const extension = extname2("x." + path1).toLowerCase().substr(1);
    return types1.get(extension);
}
function contentType(str1) {
    let mime = str1.includes("/") ? str1 : lookup(str1);
    if (!mime) {
        return undefined;
    }
    if (!mime.includes("charset")) {
        const cs = charset(mime);
        if (cs) {
            mime += `; charset=${cs.toLowerCase()}`;
        }
    }
    return mime;
}
function extension(type) {
    const match = EXTRACT_TYPE_REGEXP.exec(type);
    if (!match) {
        return undefined;
    }
    const exts = extensions.get(match[1].toLowerCase());
    if (!exts || !exts.length) {
        return undefined;
    }
    return exts[0];
}
function lexer(str1) {
    const tokens = [];
    let i = 0;
    while(i < str1.length){
        const __char = str1[i];
        if (__char === "*" || __char === "+" || __char === "?") {
            tokens.push({
                type: "MODIFIER",
                index: i,
                value: str1[i++]
            });
            continue;
        }
        if (__char === "\\") {
            tokens.push({
                type: "ESCAPED_CHAR",
                index: i++,
                value: str1[i++]
            });
            continue;
        }
        if (__char === "{") {
            tokens.push({
                type: "OPEN",
                index: i,
                value: str1[i++]
            });
            continue;
        }
        if (__char === "}") {
            tokens.push({
                type: "CLOSE",
                index: i,
                value: str1[i++]
            });
            continue;
        }
        if (__char === ":") {
            let name2 = "";
            let j = i + 1;
            while(j < str1.length){
                const code = str1.charCodeAt(j);
                if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122 || code === 95) {
                    name2 += str1[j++];
                    continue;
                }
                break;
            }
            if (!name2) throw new TypeError(`Missing parameter name at ${i}`);
            tokens.push({
                type: "NAME",
                index: i,
                value: name2
            });
            i = j;
            continue;
        }
        if (__char === "(") {
            let count = 1;
            let pattern = "";
            let j = i + 1;
            if (str1[j] === "?") {
                throw new TypeError(`Pattern cannot start with "?" at ${j}`);
            }
            while(j < str1.length){
                if (str1[j] === "\\") {
                    pattern += str1[j++] + str1[j++];
                    continue;
                }
                if (str1[j] === ")") {
                    count--;
                    if (count === 0) {
                        j++;
                        break;
                    }
                } else if (str1[j] === "(") {
                    count++;
                    if (str1[j + 1] !== "?") {
                        throw new TypeError(`Capturing groups are not allowed at ${j}`);
                    }
                }
                pattern += str1[j++];
            }
            if (count) throw new TypeError(`Unbalanced pattern at ${i}`);
            if (!pattern) throw new TypeError(`Missing pattern at ${i}`);
            tokens.push({
                type: "PATTERN",
                index: i,
                value: pattern
            });
            i = j;
            continue;
        }
        tokens.push({
            type: "CHAR",
            index: i,
            value: str1[i++]
        });
    }
    tokens.push({
        type: "END",
        index: i,
        value: ""
    });
    return tokens;
}
function parse3(str1, options2 = {
}) {
    const tokens = lexer(str1);
    const { prefixes ="./"  } = options2;
    const defaultPattern = `[^${escapeString(options2.delimiter || "/#?")}]+?`;
    const result = [];
    let key = 0;
    let i = 0;
    let path1 = "";
    const tryConsume = (type)=>{
        if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;
    };
    const mustConsume = (type)=>{
        const value1 = tryConsume(type);
        if (value1 !== undefined) return value1;
        const { type: nextType , index  } = tokens[i];
        throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);
    };
    const consumeText = ()=>{
        let result1 = "";
        let value1;
        while(value1 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")){
            result1 += value1;
        }
        return result1;
    };
    while(i < tokens.length){
        const __char = tryConsume("CHAR");
        const name2 = tryConsume("NAME");
        const pattern = tryConsume("PATTERN");
        if (name2 || pattern) {
            let prefix = __char || "";
            if (prefixes.indexOf(prefix) === -1) {
                path1 += prefix;
                prefix = "";
            }
            if (path1) {
                result.push(path1);
                path1 = "";
            }
            result.push({
                name: name2 || key++,
                prefix,
                suffix: "",
                pattern: pattern || defaultPattern,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        const value1 = __char || tryConsume("ESCAPED_CHAR");
        if (value1) {
            path1 += value1;
            continue;
        }
        if (path1) {
            result.push(path1);
            path1 = "";
        }
        const open = tryConsume("OPEN");
        if (open) {
            const prefix = consumeText();
            const name3 = tryConsume("NAME") || "";
            const pattern1 = tryConsume("PATTERN") || "";
            const suffix = consumeText();
            mustConsume("CLOSE");
            result.push({
                name: name3 || (pattern1 ? key++ : ""),
                pattern: name3 && !pattern1 ? defaultPattern : pattern1,
                prefix,
                suffix,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        mustConsume("END");
    }
    return result;
}
function compile1(str1, options2) {
    return tokensToFunction(parse3(str1, options2), options2);
}
function tokensToFunction(tokens, options2 = {
}) {
    const reFlags = flags(options2);
    const { encode: encode1 = (x)=>x
     , validate =true  } = options2;
    const matches = tokens.map((token)=>{
        if (typeof token === "object") {
            return new RegExp(`^(?:${token.pattern})$`, reFlags);
        }
    });
    return (data2)=>{
        let path1 = "";
        for(let i = 0; i < tokens.length; i++){
            const token = tokens[i];
            if (typeof token === "string") {
                path1 += token;
                continue;
            }
            const value1 = data2 ? data2[token.name] : undefined;
            const optional = token.modifier === "?" || token.modifier === "*";
            const repeat = token.modifier === "*" || token.modifier === "+";
            if (Array.isArray(value1)) {
                if (!repeat) {
                    throw new TypeError(`Expected "${token.name}" to not repeat, but got an array`);
                }
                if (value1.length === 0) {
                    if (optional) continue;
                    throw new TypeError(`Expected "${token.name}" to not be empty`);
                }
                for(let j = 0; j < value1.length; j++){
                    const segment = encode1(value1[j], token);
                    if (validate && !matches[i].test(segment)) {
                        throw new TypeError(`Expected all "${token.name}" to match "${token.pattern}", but got "${segment}"`);
                    }
                    path1 += token.prefix + segment + token.suffix;
                }
                continue;
            }
            if (typeof value1 === "string" || typeof value1 === "number") {
                const segment = encode1(String(value1), token);
                if (validate && !matches[i].test(segment)) {
                    throw new TypeError(`Expected "${token.name}" to match "${token.pattern}", but got "${segment}"`);
                }
                path1 += token.prefix + segment + token.suffix;
                continue;
            }
            if (optional) continue;
            const typeOfMessage = repeat ? "an array" : "a string";
            throw new TypeError(`Expected "${token.name}" to be ${typeOfMessage}`);
        }
        return path1;
    };
}
function escapeString(str1) {
    return str1.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options2) {
    return options2 && options2.sensitive ? "" : "i";
}
function regexpToRegexp(path1, keys1) {
    if (!keys1) return path1;
    const groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
    let index = 0;
    let execResult = groupsRegex.exec(path1.source);
    while(execResult){
        keys1.push({
            name: execResult[1] || index++,
            prefix: "",
            suffix: "",
            modifier: "",
            pattern: ""
        });
        execResult = groupsRegex.exec(path1.source);
    }
    return path1;
}
function arrayToRegexp(paths, keys1, options2) {
    const parts = paths.map((path1)=>pathToRegexp(path1, keys1, options2).source
    );
    return new RegExp(`(?:${parts.join("|")})`, flags(options2));
}
function stringToRegexp(path1, keys1, options2) {
    return tokensToRegexp(parse3(path1, options2), keys1, options2);
}
function tokensToRegexp(tokens, keys1, options2 = {
}) {
    const { strict =false , start =true , end =true , encode: encode1 = (x)=>x
      } = options2;
    const endsWith = `[${escapeString(options2.endsWith || "")}]|$`;
    const delimiter3 = `[${escapeString(options2.delimiter || "/#?")}]`;
    let route = start ? "^" : "";
    for (const token of tokens){
        if (typeof token === "string") {
            route += escapeString(encode1(token));
        } else {
            const prefix = escapeString(encode1(token.prefix));
            const suffix = escapeString(encode1(token.suffix));
            if (token.pattern) {
                if (keys1) keys1.push(token);
                if (prefix || suffix) {
                    if (token.modifier === "+" || token.modifier === "*") {
                        const mod4 = token.modifier === "*" ? "?" : "";
                        route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod4}`;
                    } else {
                        route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;
                    }
                } else {
                    route += `(${token.pattern})${token.modifier}`;
                }
            } else {
                route += `(?:${prefix}${suffix})${token.modifier}`;
            }
        }
    }
    if (end) {
        if (!strict) route += `${delimiter3}?`;
        route += !options2.endsWith ? "$" : `(?=${endsWith})`;
    } else {
        const endToken = tokens[tokens.length - 1];
        const isEndDelimited = typeof endToken === "string" ? delimiter3.indexOf(endToken[endToken.length - 1]) > -1 : endToken === undefined;
        if (!strict) {
            route += `(?:${delimiter3}(?=${endsWith}))?`;
        }
        if (!isEndDelimited) {
            route += `(?=${delimiter3}|${endsWith})`;
        }
    }
    return new RegExp(route, flags(options2));
}
function pathToRegexp(path1, keys1, options2) {
    if (path1 instanceof RegExp) return regexpToRegexp(path1, keys1);
    if (Array.isArray(path1)) return arrayToRegexp(path1, keys1, options2);
    return stringToRegexp(path1, keys1, options2);
}
const errorStatusMap = {
    "BadRequest": 400,
    "Unauthorized": 401,
    "PaymentRequired": 402,
    "Forbidden": 403,
    "NotFound": 404,
    "MethodNotAllowed": 405,
    "NotAcceptable": 406,
    "ProxyAuthRequired": 407,
    "RequestTimeout": 408,
    "Conflict": 409,
    "Gone": 410,
    "LengthRequired": 411,
    "PreconditionFailed": 412,
    "RequestEntityTooLarge": 413,
    "RequestURITooLong": 414,
    "UnsupportedMediaType": 415,
    "RequestedRangeNotSatisfiable": 416,
    "ExpectationFailed": 417,
    "Teapot": 418,
    "MisdirectedRequest": 421,
    "UnprocessableEntity": 422,
    "Locked": 423,
    "FailedDependency": 424,
    "UpgradeRequired": 426,
    "PreconditionRequired": 428,
    "TooManyRequests": 429,
    "RequestHeaderFieldsTooLarge": 431,
    "UnavailableForLegalReasons": 451,
    "InternalServerError": 500,
    "NotImplemented": 501,
    "BadGateway": 502,
    "ServiceUnavailable": 503,
    "GatewayTimeout": 504,
    "HTTPVersionNotSupported": 505,
    "VariantAlsoNegotiates": 506,
    "InsufficientStorage": 507,
    "LoopDetected": 508,
    "NotExtended": 510,
    "NetworkAuthenticationRequired": 511
};
class HttpError extends Error {
    expose = false;
    status = Status.InternalServerError;
}
function createHttpErrorConstructor(status) {
    const name2 = `${Status[status]}Error`;
    const Ctor = class extends HttpError {
        constructor(message2){
            super(message2 || STATUS_TEXT.get(status));
            this.status = status;
            this.expose = status >= 400 && status < 500;
            Object.defineProperty(this, "name", {
                configurable: true,
                enumerable: false,
                value: name2,
                writable: true
            });
        }
    };
    return Ctor;
}
const httpErrors = {
};
for (const [key2, value1] of Object.entries(errorStatusMap)){
    httpErrors[key2] = createHttpErrorConstructor(value1);
}
function createHttpError(status = 500, message2) {
    return new httpErrors[Status[status]](message2);
}
const ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
const HTAB = "\t".charCodeAt(0);
const SPACE = " ".charCodeAt(0);
const CR1 = "\r".charCodeAt(0);
const LF1 = "\n".charCodeAt(0);
const UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
const UNMATCHED_SURROGATE_PAIR_REPLACE = "$1\uFFFD$2";
const BODY_TYPES = [
    "string",
    "number",
    "bigint",
    "boolean",
    "symbol"
];
function decodeComponent(text) {
    try {
        return decodeURIComponent(text);
    } catch  {
        return text;
    }
}
function encodeUrl(url) {
    return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
}
function bufferToHex(buffer) {
    const arr = Array.from(new Uint8Array(buffer));
    return arr.map((b)=>b.toString(16).padStart(2, "0")
    ).join("");
}
async function getRandomFilename(prefix = "", extension1 = "") {
    const buffer = await crypto.subtle.digest("SHA-1", crypto.getRandomValues(new Uint8Array(256)));
    return `${prefix}${bufferToHex(buffer)}${extension1 ? `.${extension1}` : ""}`;
}
async function getBoundary() {
    const buffer = await crypto.subtle.digest("SHA-1", crypto.getRandomValues(new Uint8Array(256)));
    return `oak_${bufferToHex(buffer)}`;
}
function isAsyncIterable(value3) {
    return typeof value3 === "object" && value3 !== null && Symbol.asyncIterator in value3 && typeof value3[Symbol.asyncIterator] === "function";
}
function isReader(value3) {
    return typeof value3 === "object" && value3 !== null && "read" in value3 && typeof value3.read === "function";
}
function isCloser(value3) {
    return typeof value3 === "object" && value3 != null && "close" in value3 && typeof value3["close"] === "function";
}
function isConn(value3) {
    return typeof value3 === "object" && value3 != null && "rid" in value3 && typeof value3.rid === "number" && "localAddr" in value3 && "remoteAddr" in value3;
}
function isListenTlsOptions(value3) {
    return typeof value3 === "object" && value3 !== null && "certFile" in value3 && "keyFile" in value3 && "port" in value3;
}
function readableStreamFromReader(reader1, options2 = {
}) {
    const { autoClose =true , chunkSize =16640 , strategy ,  } = options2;
    return new ReadableStream({
        async pull (controller) {
            const chunk = new Uint8Array(chunkSize);
            try {
                const read = await reader1.read(chunk);
                if (read === null) {
                    if (isCloser(reader1) && autoClose) {
                        reader1.close();
                    }
                    controller.close();
                    return;
                }
                controller.enqueue(chunk.subarray(0, read));
            } catch (e) {
                controller.error(e);
                if (isCloser(reader1)) {
                    reader1.close();
                }
            }
        },
        cancel () {
            if (isCloser(reader1) && autoClose) {
                reader1.close();
            }
        }
    }, strategy);
}
function isRedirectStatus(value3) {
    return [
        Status.MultipleChoices,
        Status.MovedPermanently,
        Status.Found,
        Status.SeeOther,
        Status.UseProxy,
        Status.TemporaryRedirect,
        Status.PermanentRedirect, 
    ].includes(value3);
}
function isHtml(value3) {
    return /^\s*<(?:!DOCTYPE|html|body)/i.test(value3);
}
function skipLWSPChar(u8) {
    const result = new Uint8Array(u8.length);
    let j = 0;
    for(let i = 0; i < u8.length; i++){
        if (u8[i] === SPACE || u8[i] === HTAB) continue;
        result[j++] = u8[i];
    }
    return result.slice(0, j);
}
function stripEol(value3) {
    if (value3[value3.byteLength - 1] == LF1) {
        let drop = 1;
        if (value3.byteLength > 1 && value3[value3.byteLength - 2] === CR1) {
            drop = 2;
        }
        return value3.subarray(0, value3.byteLength - drop);
    }
    return value3;
}
const UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
function resolvePath(rootPath, relativePath) {
    let path1 = relativePath;
    let root = rootPath;
    if (relativePath === undefined) {
        path1 = rootPath;
        root = ".";
    }
    if (path1 == null) {
        throw new TypeError("Argument relativePath is required.");
    }
    if (path1.includes("\0")) {
        throw createHttpError(400, "Malicious Path");
    }
    if (isAbsolute2(path1)) {
        throw createHttpError(400, "Malicious Path");
    }
    if (UP_PATH_REGEXP.test(normalize2("." + sep2 + path1))) {
        throw createHttpError(403);
    }
    return normalize2(join2(root, path1));
}
class Uint8ArrayTransformStream extends TransformStream {
    constructor(){
        const init = {
            async transform (chunk, controller) {
                chunk = await chunk;
                switch(typeof chunk){
                    case "object":
                        if (chunk === null) {
                            controller.terminate();
                        } else if (ArrayBuffer.isView(chunk)) {
                            controller.enqueue(new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength));
                        } else if (Array.isArray(chunk) && chunk.every((value3)=>typeof value3 === "number"
                        )) {
                            controller.enqueue(new Uint8Array(chunk));
                        } else if (typeof chunk.valueOf === "function" && chunk.valueOf() !== chunk) {
                            this.transform(chunk.valueOf(), controller);
                        } else if ("toJSON" in chunk) {
                            this.transform(JSON.stringify(chunk), controller);
                        }
                        break;
                    case "symbol":
                        controller.error(new TypeError("Cannot transform a symbol to a Uint8Array"));
                        break;
                    case "undefined":
                        controller.error(new TypeError("Cannot transform undefined to a Uint8Array"));
                        break;
                    default:
                        controller.enqueue(this.encoder.encode(String(chunk)));
                }
            },
            encoder: new TextEncoder()
        };
        super(init);
    }
}
const replacements = {
    "/": "_",
    "+": "-",
    "=": ""
};
const encoder1 = new TextEncoder();
function encodeBase64Safe(data2) {
    return mod.encode(data2).replace(/\/|\+|=/g, (c)=>replacements[c]
    );
}
function importKey(key1) {
    if (typeof key1 === "string") {
        key1 = encoder1.encode(key1);
    } else if (Array.isArray(key1) || key1 instanceof ArrayBuffer) {
        key1 = new Uint8Array(key1);
    }
    return globalThis.crypto.subtle.importKey("raw", key1, {
        name: "HMAC",
        hash: {
            name: "SHA-256"
        }
    }, true, [
        "sign",
        "verify"
    ]);
}
function sign(data2, key1) {
    if (typeof data2 === "string") {
        data2 = encoder1.encode(data2);
    } else if (Array.isArray(data2)) {
        data2 = Uint8Array.from(data2);
    }
    return crypto.subtle.sign("HMAC", key1, data2);
}
const DomResponse = Response;
const serveHttp = "serveHttp" in Deno ? Deno.serveHttp.bind(Deno) : undefined;
const maybeUpgradeWebSocket = "upgradeWebSocket" in Deno ? Deno.upgradeWebSocket.bind(Deno) : undefined;
function hasNativeHttp() {
    return !!serveHttp;
}
class NativeRequest {
    #conn;
    #reject;
    #request;
    #requestPromise;
    #resolve;
    #resolved = false;
    #upgradeWebSocket;
    constructor(requestEvent, options2 = {
    }){
        const { conn: conn1  } = options2;
        this.#conn = conn1;
        this.#upgradeWebSocket = "upgradeWebSocket" in options2 ? options2["upgradeWebSocket"] : maybeUpgradeWebSocket;
        this.#request = requestEvent.request;
        const p1 = new Promise((resolve3, reject)=>{
            this.#resolve = resolve3;
            this.#reject = reject;
        });
        this.#requestPromise = requestEvent.respondWith(p1);
    }
    get body() {
        return this.#request.body;
    }
    get donePromise() {
        return this.#requestPromise;
    }
    get headers() {
        return this.#request.headers;
    }
    get method() {
        return this.#request.method;
    }
    get remoteAddr() {
        return this.#conn?.remoteAddr?.hostname;
    }
    get request() {
        return this.#request;
    }
    get url() {
        try {
            const url = new URL(this.#request.url);
            return this.#request.url.replace(url.origin, "");
        } catch  {
        }
        return this.#request.url;
    }
    get rawUrl() {
        return this.#request.url;
    }
    error(reason) {
        if (this.#resolved) {
            throw new Error("Request already responded to.");
        }
        this.#reject(reason);
        this.#resolved = true;
    }
    respond(response) {
        if (this.#resolved) {
            throw new Error("Request already responded to.");
        }
        this.#resolve(response);
        this.#resolved = true;
        return this.#requestPromise;
    }
    upgrade(options) {
        if (this.#resolved) {
            throw new Error("Request already responded to.");
        }
        if (!this.#upgradeWebSocket) {
            throw new TypeError("Upgrading web sockets not supported.");
        }
        const { response: response2 , websocket  } = this.#upgradeWebSocket(this.#request, options);
        this.#resolve(response2);
        this.#resolved = true;
        return websocket;
    }
}
class HttpServerNative {
    #app;
    #closed = false;
    #listener;
    #options;
    constructor(app1, options3){
        if (!("serveHttp" in Deno)) {
            throw new Error("The native bindings for serving HTTP are not available.");
        }
        this.#app = app1;
        this.#options = options3;
    }
    get app() {
        return this.#app;
    }
    get closed() {
        return this.#closed;
    }
    close() {
        this.#closed = true;
        if (this.#listener) {
            this.#listener.close();
            this.#listener = undefined;
        }
    }
    listen() {
        return this.#listener = isListenTlsOptions(this.#options) ? Deno.listenTls(this.#options) : Deno.listen(this.#options);
    }
    [Symbol.asyncIterator]() {
        const start = (controller)=>{
            const server = this;
            async function serve1(conn2) {
                const httpConn = serveHttp(conn2);
                while(true){
                    try {
                        const requestEvent1 = await httpConn.nextRequest();
                        if (requestEvent1 === null) {
                            return;
                        }
                        const nativeRequest = new NativeRequest(requestEvent1, {
                            conn: conn2
                        });
                        controller.enqueue(nativeRequest);
                        await nativeRequest.donePromise;
                    } catch (error) {
                        server.app.dispatchEvent(new ErrorEvent("error", {
                            error
                        }));
                    }
                    if (server.closed) {
                        httpConn.close();
                        controller.close();
                    }
                }
            }
            const listener1 = this.#listener;
            assert1(listener1);
            async function accept() {
                while(true){
                    try {
                        const conn2 = await listener1.accept();
                        serve1(conn2);
                    } catch (error) {
                        if (!server.closed) {
                            server.app.dispatchEvent(new ErrorEvent("error", {
                                error
                            }));
                        }
                    }
                    if (server.closed) {
                        controller.close();
                        return;
                    }
                }
            }
            accept();
        };
        const stream = new ReadableStream({
            start
        });
        return stream[Symbol.asyncIterator]();
    }
}
const SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
const TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
const TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
class MediaType {
    type;
    subtype;
    suffix;
    constructor(type1, subtype, suffix){
        this.type = type1;
        this.subtype = subtype;
        this.suffix = suffix;
    }
}
function format3(obj) {
    const { subtype: subtype1 , suffix: suffix1 , type: type1  } = obj;
    if (!TYPE_NAME_REGEXP.test(type1)) {
        throw new TypeError("Invalid type.");
    }
    if (!SUBTYPE_NAME_REGEXP.test(subtype1)) {
        throw new TypeError("Invalid subtype.");
    }
    let str1 = `${type1}/${subtype1}`;
    if (suffix1) {
        if (!TYPE_NAME_REGEXP.test(suffix1)) {
            throw new TypeError("Invalid suffix.");
        }
        str1 += `+${suffix1}`;
    }
    return str1;
}
function parse4(str1) {
    const match = TYPE_REGEXP.exec(str1.toLowerCase());
    if (!match) {
        throw new TypeError("Invalid media type.");
    }
    let [, type1, subtype1] = match;
    let suffix1;
    const idx = subtype1.lastIndexOf("+");
    if (idx !== -1) {
        suffix1 = subtype1.substr(idx + 1);
        subtype1 = subtype1.substr(0, idx);
    }
    return new MediaType(type1, subtype1, suffix1);
}
function mimeMatch(expected, actual) {
    if (expected === undefined) {
        return false;
    }
    const actualParts = actual.split("/");
    const expectedParts = expected.split("/");
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
        return false;
    }
    const [actualType, actualSubtype] = actualParts;
    const [expectedType, expectedSubtype] = expectedParts;
    if (expectedType !== "*" && expectedType !== actualType) {
        return false;
    }
    if (expectedSubtype.substr(0, 2) === "*+") {
        return expectedSubtype.length <= actualSubtype.length + 1 && expectedSubtype.substr(1) === actualSubtype.substr(1 - expectedSubtype.length);
    }
    if (expectedSubtype !== "*" && expectedSubtype !== actualSubtype) {
        return false;
    }
    return true;
}
function normalize3(type1) {
    if (type1 === "urlencoded") {
        return "application/x-www-form-urlencoded";
    } else if (type1 === "multipart") {
        return "multipart/*";
    } else if (type1[0] === "+") {
        return `*/*${type1}`;
    }
    return type1.includes("/") ? type1 : lookup(type1);
}
function normalizeType(value3) {
    try {
        const val = value3.split(";");
        const type1 = parse4(val[0]);
        return format3(type1);
    } catch  {
        return;
    }
}
function isMediaType(value3, types1) {
    const val = normalizeType(value3);
    if (!val) {
        return false;
    }
    if (!types1.length) {
        return val;
    }
    for (const type1 of types1){
        if (mimeMatch(normalize3(type1), val)) {
            return type1[0] === "+" || type1.includes("*") ? val : type1;
        }
    }
    return false;
}
const MIN_BUF_SIZE1 = 16;
const CR2 = "\r".charCodeAt(0);
const LF2 = "\n".charCodeAt(0);
class BufferFullError1 extends Error {
    partial;
    name = "BufferFullError";
    constructor(partial2){
        super("Buffer full");
        this.partial = partial2;
    }
}
class BufReader1 {
    #buffer;
    #reader;
    #posRead = 0;
    #posWrite = 0;
    #eof = false;
    async #fill() {
        if (this.#posRead > 0) {
            this.#buffer.copyWithin(0, this.#posRead, this.#posWrite);
            this.#posWrite -= this.#posRead;
            this.#posRead = 0;
        }
        if (this.#posWrite >= this.#buffer.byteLength) {
            throw Error("bufio: tried to fill full buffer");
        }
        for(let i = 100; i > 0; i--){
            const rr = await this.#reader.read(this.#buffer.subarray(this.#posWrite));
            if (rr === null) {
                this.#eof = true;
                return;
            }
            assert1(rr >= 0, "negative read");
            this.#posWrite += rr;
            if (rr > 0) {
                return;
            }
        }
        throw new Error(`No progress after ${100} read() calls`);
    }
     #reset(buffer, reader) {
        this.#buffer = buffer;
        this.#reader = reader;
        this.#eof = false;
    }
    constructor(rd2, size4 = 4096){
        if (size4 < 16) {
            size4 = MIN_BUF_SIZE1;
        }
        this.#reset(new Uint8Array(size4), rd2);
    }
    buffered() {
        return this.#posWrite - this.#posRead;
    }
    async readLine(strip = true) {
        let line;
        try {
            line = await this.readSlice(LF2);
        } catch (err) {
            let { partial: partial3  } = err;
            assert1(partial3 instanceof Uint8Array, "Caught error from `readSlice()` without `partial` property");
            if (!(err instanceof BufferFullError1)) {
                throw err;
            }
            if (!this.#eof && partial3.byteLength > 0 && partial3[partial3.byteLength - 1] === CR2) {
                assert1(this.#posRead > 0, "Tried to rewind past start of buffer");
                this.#posRead--;
                partial3 = partial3.subarray(0, partial3.byteLength - 1);
            }
            return {
                bytes: partial3,
                eol: this.#eof
            };
        }
        if (line === null) {
            return null;
        }
        if (line.byteLength === 0) {
            return {
                bytes: line,
                eol: true
            };
        }
        if (strip) {
            line = stripEol(line);
        }
        return {
            bytes: line,
            eol: true
        };
    }
    async readSlice(delim) {
        let s1 = 0;
        let slice;
        while(true){
            let i = this.#buffer.subarray(this.#posRead + s1, this.#posWrite).indexOf(delim);
            if (i >= 0) {
                i += s1;
                slice = this.#buffer.subarray(this.#posRead, this.#posRead + i + 1);
                this.#posRead += i + 1;
                break;
            }
            if (this.#eof) {
                if (this.#posRead === this.#posWrite) {
                    return null;
                }
                slice = this.#buffer.subarray(this.#posRead, this.#posWrite);
                this.#posRead = this.#posWrite;
                break;
            }
            if (this.buffered() >= this.#buffer.byteLength) {
                this.#posRead = this.#posWrite;
                const oldbuf = this.#buffer;
                const newbuf = this.#buffer.slice(0);
                this.#buffer = newbuf;
                throw new BufferFullError1(oldbuf);
            }
            s1 = this.#posWrite - this.#posRead;
            try {
                await this.#fill();
            } catch (err) {
                err.partial = slice;
                throw err;
            }
        }
        return slice;
    }
}
const COLON = ":".charCodeAt(0);
const HTAB1 = "\t".charCodeAt(0);
const SPACE1 = " ".charCodeAt(0);
const decoder1 = new TextDecoder();
function toParamRegExp(attributePattern, flags1) {
    return new RegExp(`(?:^|;)\\s*${attributePattern}\\s*=\\s*` + `(` + `[^";\\s][^;\\s]*` + `|` + `"(?:[^"\\\\]|\\\\"?)+"?` + `)`, flags1);
}
async function readHeaders(body) {
    const headers = {
    };
    let readResult = await body.readLine();
    while(readResult){
        const { bytes  } = readResult;
        if (!bytes.length) {
            return headers;
        }
        let i = bytes.indexOf(COLON);
        if (i === -1) {
            throw new httpErrors.BadRequest(`Malformed header: ${decoder1.decode(bytes)}`);
        }
        const key1 = decoder1.decode(bytes.subarray(0, i)).trim().toLowerCase();
        if (key1 === "") {
            throw new httpErrors.BadRequest("Invalid header key.");
        }
        i++;
        while(i < bytes.byteLength && (bytes[i] === SPACE1 || bytes[i] === HTAB1)){
            i++;
        }
        const value3 = decoder1.decode(bytes.subarray(i)).trim();
        headers[key1] = value3;
        readResult = await body.readLine();
    }
    throw new httpErrors.BadRequest("Unexpected end of body reached.");
}
function unquote(value3) {
    if (value3.startsWith(`"`)) {
        const parts = value3.slice(1).split(`\\"`);
        for(let i = 0; i < parts.length; ++i){
            const quoteIndex = parts[i].indexOf(`"`);
            if (quoteIndex !== -1) {
                parts[i] = parts[i].slice(0, quoteIndex);
                parts.length = i + 1;
            }
            parts[i] = parts[i].replace(/\\(.)/g, "$1");
        }
        value3 = parts.join(`"`);
    }
    return value3;
}
let needsEncodingFixup = false;
function fixupEncoding(value3) {
    if (needsEncodingFixup && /[\x80-\xff]/.test(value3)) {
        value3 = textDecode("utf-8", value3);
        if (needsEncodingFixup) {
            value3 = textDecode("iso-8859-1", value3);
        }
    }
    return value3;
}
const FILENAME_STAR_REGEX = toParamRegExp("filename\\*", "i");
const FILENAME_START_ITER_REGEX = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
const FILENAME_REGEX = toParamRegExp("filename", "i");
function rfc2047decode(value3) {
    if (!value3.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value3)) {
        return value3;
    }
    return value3.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, (_, charset1, encoding, text)=>{
        if (encoding === "q" || encoding === "Q") {
            text = text.replace(/_/g, " ");
            text = text.replace(/=([0-9a-fA-F]{2})/g, (_1, hex)=>String.fromCharCode(parseInt(hex, 16))
            );
            return textDecode(charset1, text);
        }
        try {
            text = atob(text);
        } catch  {
        }
        return textDecode(charset1, text);
    });
}
function rfc2231getParam(header) {
    const matches = [];
    let match;
    while(match = FILENAME_START_ITER_REGEX.exec(header)){
        const [, ns, quote, part] = match;
        const n = parseInt(ns, 10);
        if (n in matches) {
            if (n === 0) {
                break;
            }
            continue;
        }
        matches[n] = [
            quote,
            part
        ];
    }
    const parts = [];
    for(let n = 0; n < matches.length; ++n){
        if (!(n in matches)) {
            break;
        }
        let [quote, part] = matches[n];
        part = unquote(part);
        if (quote) {
            part = unescape(part);
            if (n === 0) {
                part = rfc5987decode(part);
            }
        }
        parts.push(part);
    }
    return parts.join("");
}
function rfc5987decode(value3) {
    const encodingEnd = value3.indexOf(`'`);
    if (encodingEnd === -1) {
        return value3;
    }
    const encoding = value3.slice(0, encodingEnd);
    const langValue = value3.slice(encodingEnd + 1);
    return textDecode(encoding, langValue.replace(/^[^']*'/, ""));
}
function textDecode(encoding, value3) {
    if (encoding) {
        try {
            const decoder2 = new TextDecoder(encoding, {
                fatal: true
            });
            const bytes = Array.from(value3, (c)=>c.charCodeAt(0)
            );
            if (bytes.every((code)=>code <= 255
            )) {
                value3 = decoder2.decode(new Uint8Array(bytes));
                needsEncodingFixup = false;
            }
        } catch  {
        }
    }
    return value3;
}
function getFilename(header) {
    needsEncodingFixup = true;
    let matches = FILENAME_STAR_REGEX.exec(header);
    if (matches) {
        const [, filename] = matches;
        return fixupEncoding(rfc2047decode(rfc5987decode(unescape(unquote(filename)))));
    }
    const filename = rfc2231getParam(header);
    if (filename) {
        return fixupEncoding(rfc2047decode(filename));
    }
    matches = FILENAME_REGEX.exec(header);
    if (matches) {
        const [, filename1] = matches;
        return fixupEncoding(rfc2047decode(unquote(filename1)));
    }
    return "";
}
const decoder2 = new TextDecoder();
const encoder2 = new TextEncoder();
const BOUNDARY_PARAM_REGEX = toParamRegExp("boundary", "i");
const NAME_PARAM_REGEX = toParamRegExp("name", "i");
function append(a, b) {
    const ab1 = new Uint8Array(a.length + b.length);
    ab1.set(a, 0);
    ab1.set(b, a.length);
    return ab1;
}
function isEqual(a, b) {
    return equals(skipLWSPChar(a), b);
}
async function readToStartOrEnd(body, start, end) {
    let lineResult;
    while(lineResult = await body.readLine()){
        if (isEqual(lineResult.bytes, start)) {
            return true;
        }
        if (isEqual(lineResult.bytes, end)) {
            return false;
        }
    }
    throw new httpErrors.BadRequest("Unable to find multi-part boundary.");
}
async function* parts({ body , final: __final , part , maxFileSize , maxSize , outPath , prefix  }) {
    async function getFile(contentType1) {
        const ext = extension(contentType1);
        if (!ext) {
            throw new httpErrors.BadRequest(`Invalid media type for part: ${ext}`);
        }
        if (!outPath) {
            outPath = await Deno.makeTempDir();
        }
        const filename = `${outPath}/${await getRandomFilename(prefix, ext)}`;
        const file = await Deno.open(filename, {
            write: true,
            createNew: true
        });
        return [
            filename,
            file
        ];
    }
    while(true){
        const headers = await readHeaders(body);
        const contentType1 = headers["content-type"];
        const contentDisposition = headers["content-disposition"];
        if (!contentDisposition) {
            throw new httpErrors.BadRequest("Form data part missing content-disposition header");
        }
        if (!contentDisposition.match(/^form-data;/i)) {
            throw new httpErrors.BadRequest(`Unexpected content-disposition header: "${contentDisposition}"`);
        }
        const matches = NAME_PARAM_REGEX.exec(contentDisposition);
        if (!matches) {
            throw new httpErrors.BadRequest(`Unable to determine name of form body part`);
        }
        let [, name2] = matches;
        name2 = unquote(name2);
        if (contentType1) {
            const originalName = getFilename(contentDisposition);
            let byteLength = 0;
            let file;
            let filename;
            let buf;
            if (maxSize) {
                buf = new Uint8Array();
            } else {
                const result = await getFile(contentType1);
                filename = result[0];
                file = result[1];
            }
            while(true){
                const readResult = await body.readLine(false);
                if (!readResult) {
                    throw new httpErrors.BadRequest("Unexpected EOF reached");
                }
                const { bytes  } = readResult;
                const strippedBytes = stripEol(bytes);
                if (isEqual(strippedBytes, part) || isEqual(strippedBytes, __final)) {
                    if (file) {
                        const bytesDiff = bytes.length - strippedBytes.length;
                        if (bytesDiff) {
                            const originalBytesSize = await file.seek(-bytesDiff, Deno.SeekMode.Current);
                            await file.truncate(originalBytesSize);
                        }
                        file.close();
                    }
                    yield [
                        name2,
                        {
                            content: buf,
                            contentType: contentType1,
                            name: name2,
                            filename,
                            originalName
                        }, 
                    ];
                    if (isEqual(strippedBytes, __final)) {
                        return;
                    }
                    break;
                }
                byteLength += bytes.byteLength;
                if (byteLength > maxFileSize) {
                    if (file) {
                        file.close();
                    }
                    throw new httpErrors.RequestEntityTooLarge(`File size exceeds limit of ${maxFileSize} bytes.`);
                }
                if (buf) {
                    if (byteLength > maxSize) {
                        const result = await getFile(contentType1);
                        filename = result[0];
                        file = result[1];
                        await writeAll(file, buf);
                        buf = undefined;
                    } else {
                        buf = append(buf, bytes);
                    }
                }
                if (file) {
                    await writeAll(file, bytes);
                }
            }
        } else {
            const lines = [];
            while(true){
                const readResult = await body.readLine();
                if (!readResult) {
                    throw new httpErrors.BadRequest("Unexpected EOF reached");
                }
                const { bytes  } = readResult;
                if (isEqual(bytes, part) || isEqual(bytes, __final)) {
                    yield [
                        name2,
                        lines.join("\n")
                    ];
                    if (isEqual(bytes, __final)) {
                        return;
                    }
                    break;
                }
                lines.push(decoder2.decode(bytes));
            }
        }
    }
}
class FormDataReader {
    #body;
    #boundaryFinal;
    #boundaryPart;
    #reading = false;
    constructor(contentType1, body){
        const matches = contentType1.match(BOUNDARY_PARAM_REGEX);
        if (!matches) {
            throw new httpErrors.BadRequest(`Content type "${contentType1}" does not contain a valid boundary.`);
        }
        let [, boundary] = matches;
        boundary = unquote(boundary);
        this.#boundaryPart = encoder2.encode(`--${boundary}`);
        this.#boundaryFinal = encoder2.encode(`--${boundary}--`);
        this.#body = body;
    }
    async read(options = {
    }) {
        if (this.#reading) {
            throw new Error("Body is already being read.");
        }
        this.#reading = true;
        const { outPath , maxFileSize =10485760 , maxSize =0 , bufferSize =1048576 ,  } = options;
        const body1 = new BufReader1(this.#body, bufferSize);
        const result = {
            fields: {
            }
        };
        if (!await readToStartOrEnd(body1, this.#boundaryPart, this.#boundaryFinal)) {
            return result;
        }
        try {
            for await (const part of parts({
                body: body1,
                part: this.#boundaryPart,
                final: this.#boundaryFinal,
                maxFileSize,
                maxSize,
                outPath
            })){
                const [key1, value3] = part;
                if (typeof value3 === "string") {
                    result.fields[key1] = value3;
                } else {
                    if (!result.files) {
                        result.files = [];
                    }
                    result.files.push(value3);
                }
            }
        } catch (err) {
            if (err instanceof Deno.errors.PermissionDenied) {
                console.error(err.stack ? err.stack : `${err.name}: ${err.message}`);
            } else {
                throw err;
            }
        }
        return result;
    }
    async *stream(options = {
    }) {
        if (this.#reading) {
            throw new Error("Body is already being read.");
        }
        this.#reading = true;
        const { outPath , maxFileSize =10485760 , maxSize =0 , bufferSize =32000 ,  } = options;
        const body1 = new BufReader1(this.#body, bufferSize);
        if (!await readToStartOrEnd(body1, this.#boundaryPart, this.#boundaryFinal)) {
            return;
        }
        try {
            for await (const part of parts({
                body: body1,
                part: this.#boundaryPart,
                final: this.#boundaryFinal,
                maxFileSize,
                maxSize,
                outPath
            })){
                yield part;
            }
        } catch (err) {
            if (err instanceof Deno.errors.PermissionDenied) {
                console.error(err.stack ? err.stack : `${err.name}: ${err.message}`);
            } else {
                throw err;
            }
        }
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({
        })}`;
    }
}
const defaultBodyContentTypes = {
    json: [
        "json",
        "application/*+json",
        "application/csp-report"
    ],
    form: [
        "urlencoded"
    ],
    formData: [
        "multipart"
    ],
    text: [
        "text"
    ]
};
function resolveType(contentType2, contentTypes) {
    const contentTypesJson = [
        ...defaultBodyContentTypes.json,
        ...contentTypes.json ?? [], 
    ];
    const contentTypesForm = [
        ...defaultBodyContentTypes.form,
        ...contentTypes.form ?? [], 
    ];
    const contentTypesFormData = [
        ...defaultBodyContentTypes.formData,
        ...contentTypes.formData ?? [], 
    ];
    const contentTypesText = [
        ...defaultBodyContentTypes.text,
        ...contentTypes.text ?? [], 
    ];
    if (contentTypes.bytes && isMediaType(contentType2, contentTypes.bytes)) {
        return "bytes";
    } else if (isMediaType(contentType2, contentTypesJson)) {
        return "json";
    } else if (isMediaType(contentType2, contentTypesForm)) {
        return "form";
    } else if (isMediaType(contentType2, contentTypesFormData)) {
        return "form-data";
    } else if (isMediaType(contentType2, contentTypesText)) {
        return "text";
    }
    return "bytes";
}
const decoder3 = new TextDecoder();
function bodyAsReader(body1) {
    return body1 instanceof ReadableStream ? readerFromStreamReader(body1.getReader()) : body1 ?? new Buffer();
}
function bodyAsStream(body1) {
    return body1 instanceof ReadableStream ? body1 : readableStreamFromReader(body1);
}
class RequestBody {
    #formDataReader;
    #stream;
    #has;
    #readAllBody;
    #request;
    #type;
     #parse(type) {
        switch(type){
            case "form":
                this.#type = "bytes";
                return async ()=>new URLSearchParams(decoder3.decode(await this.#valuePromise()).replace(/\+/g, " "))
                ;
            case "form-data":
                this.#type = "form-data";
                return ()=>{
                    const contentType2 = this.#request.headers.get("content-type");
                    assert1(contentType2);
                    return this.#formDataReader ?? (this.#formDataReader = new FormDataReader(contentType2, bodyAsReader(this.#request.body)));
                };
            case "json":
                this.#type = "bytes";
                return async ()=>JSON.parse(decoder3.decode(await this.#valuePromise()))
                ;
            case "bytes":
                this.#type = "bytes";
                return ()=>this.#valuePromise()
                ;
            case "text":
                this.#type = "bytes";
                return async ()=>decoder3.decode(await this.#valuePromise())
                ;
            default:
                throw new TypeError(`Invalid body type: "${type}"`);
        }
    }
     #validateGetArgs(type, contentTypes) {
        if (type === "reader" && this.#type && this.#type !== "reader") {
            throw new TypeError(`Body already consumed as "${this.#type}" and cannot be returned as a reader.`);
        }
        if (type === "stream" && this.#type && this.#type !== "stream") {
            throw new TypeError(`Body already consumed as "${this.#type}" and cannot be returned as a stream.`);
        }
        if (type === "form-data" && this.#type && this.#type !== "form-data") {
            throw new TypeError(`Body already consumed as "${this.#type}" and cannot be returned as a stream.`);
        }
        if (this.#type === "reader" && type !== "reader") {
            throw new TypeError("Body already consumed as a reader and can only be returned as a reader.");
        }
        if (this.#type === "stream" && type !== "stream") {
            throw new TypeError("Body already consumed as a stream and can only be returned as a stream.");
        }
        if (this.#type === "form-data" && type !== "form-data") {
            throw new TypeError("Body already consumed as form data and can only be returned as form data.");
        }
        if (type && Object.keys(contentTypes).length) {
            throw new TypeError(`"type" and "contentTypes" cannot be specified at the same time`);
        }
    }
     #valuePromise() {
        return this.#readAllBody ?? (this.#readAllBody = this.#request instanceof Request ? this.#request.arrayBuffer().then((ab1)=>new Uint8Array(ab1)
        ) : readAll(this.#request.body));
    }
    constructor(request1){
        this.#request = request1;
    }
    get({ type , contentTypes ={
    }  }) {
        this.#validateGetArgs(type, contentTypes);
        if (type === "reader") {
            this.#type = "reader";
            return {
                type,
                value: bodyAsReader(this.#request.body)
            };
        }
        if (type === "stream") {
            if (!this.#request.body) {
                this.#type = "undefined";
                throw new TypeError(`Body is undefined and cannot be returned as "stream".`);
            }
            this.#type = "stream";
            const streams = (this.#stream ?? bodyAsStream(this.#request.body)).tee();
            this.#stream = streams[1];
            return {
                type,
                value: streams[0]
            };
        }
        if (!this.has()) {
            this.#type = "undefined";
        } else if (!this.#type) {
            const encoding = this.#request.headers.get("content-encoding") ?? "identity";
            if (encoding !== "identity") {
                throw new httpErrors.UnsupportedMediaType(`Unsupported content-encoding: ${encoding}`);
            }
        }
        if (this.#type === "undefined") {
            if (type && type !== "undefined") {
                throw new TypeError(`Body is undefined and cannot be returned as "${type}".`);
            }
            return {
                type: "undefined",
                value: undefined
            };
        }
        if (!type) {
            const contentType2 = this.#request.headers.get("content-type");
            assert1(contentType2, "The Content-Type header is missing from the request");
            type = resolveType(contentType2, contentTypes);
        }
        assert1(type);
        const body1 = Object.create(null);
        Object.defineProperties(body1, {
            type: {
                value: type,
                configurable: true,
                enumerable: true
            },
            value: {
                get: this.#parse(type),
                configurable: true,
                enumerable: true
            }
        });
        return body1;
    }
    has() {
        return this.#has !== undefined ? this.#has : this.#has = this.#request.body != null && (this.#request.headers.has("transfer-encoding") || !!parseInt(this.#request.headers.get("content-length") ?? "", 10)) || this.#request.body instanceof ReadableStream;
    }
}
function compareSpecs(a, b) {
    return b.q - a.q || (b.s ?? 0) - (a.s ?? 0) || (a.o ?? 0) - (b.o ?? 0) || a.i - b.i || 0;
}
function isQuality(spec) {
    return spec.q > 0;
}
const SIMPLE_CHARSET_REGEXP = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
function parseCharset(str1, i) {
    const match = SIMPLE_CHARSET_REGEXP.exec(str1);
    if (!match) {
        return;
    }
    const [, charset1] = match;
    let q = 1;
    if (match[2]) {
        const params = match[2].split(";");
        for (const param of params){
            const [key1, value3] = param.trim().split("=");
            if (key1 === "q") {
                q = parseFloat(value3);
                break;
            }
        }
    }
    return {
        charset: charset1,
        q,
        i
    };
}
function parseAcceptCharset(accept) {
    const accepts = accept.split(",");
    const result = [];
    for(let i = 0; i < accepts.length; i++){
        const charset1 = parseCharset(accepts[i].trim(), i);
        if (charset1) {
            result.push(charset1);
        }
    }
    return result;
}
function specify(charset1, spec, i) {
    let s1 = 0;
    if (spec.charset.toLowerCase() === charset1.toLocaleLowerCase()) {
        s1 |= 1;
    } else if (spec.charset !== "*") {
        return;
    }
    return {
        i,
        o: spec.i,
        q: spec.q,
        s: s1
    };
}
function getCharsetPriority(charset1, accepted, index) {
    let priority = {
        i: -1,
        o: -1,
        q: 0,
        s: 0
    };
    for (const accepts of accepted){
        const spec = specify(charset1, accepts, index);
        if (spec && ((priority.s ?? 0) - (spec.s ?? 0) || priority.q - spec.q || (priority.o ?? 0) - (spec.o ?? 0)) < 0) {
            priority = spec;
        }
    }
    return priority;
}
function preferredCharsets(accept = "*", provided) {
    const accepts = parseAcceptCharset(accept);
    if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map((spec)=>spec.charset
        );
    }
    const priorities = provided.map((type2, index)=>getCharsetPriority(type2, accepts, index)
    );
    return priorities.filter(isQuality).sort(compareSpecs).map((priority)=>provided[priorities.indexOf(priority)]
    );
}
const simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
function parseEncoding(str1, i) {
    const match = simpleEncodingRegExp.exec(str1);
    if (!match) {
        return undefined;
    }
    const encoding = match[1];
    let q = 1;
    if (match[2]) {
        const params = match[2].split(";");
        for (const param of params){
            const p1 = param.trim().split("=");
            if (p1[0] === "q") {
                q = parseFloat(p1[1]);
                break;
            }
        }
    }
    return {
        encoding,
        q,
        i
    };
}
function specify1(encoding, spec, i = -1) {
    if (!spec.encoding) {
        return;
    }
    let s1 = 0;
    if (spec.encoding.toLocaleLowerCase() === encoding.toLocaleLowerCase()) {
        s1 = 1;
    } else if (spec.encoding !== "*") {
        return;
    }
    return {
        i,
        o: spec.i,
        q: spec.q,
        s: s1
    };
}
function parseAcceptEncoding(accept) {
    const accepts = accept.split(",");
    const parsedAccepts = [];
    let hasIdentity = false;
    let minQuality = 1;
    for(let i = 0; i < accepts.length; i++){
        const encoding = parseEncoding(accepts[i].trim(), i);
        if (encoding) {
            parsedAccepts.push(encoding);
            hasIdentity = hasIdentity || !!specify1("identity", encoding);
            minQuality = Math.min(minQuality, encoding.q || 1);
        }
    }
    if (!hasIdentity) {
        parsedAccepts.push({
            encoding: "identity",
            q: minQuality,
            i: accepts.length - 1
        });
    }
    return parsedAccepts;
}
function getEncodingPriority(encoding, accepted, index) {
    let priority = {
        o: -1,
        q: 0,
        s: 0,
        i: 0
    };
    for (const s1 of accepted){
        const spec = specify1(encoding, s1, index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
            priority = spec;
        }
    }
    return priority;
}
function preferredEncodings(accept, provided) {
    const accepts = parseAcceptEncoding(accept);
    if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map((spec)=>spec.encoding
        );
    }
    const priorities = provided.map((type2, index)=>getEncodingPriority(type2, accepts, index)
    );
    return priorities.filter(isQuality).sort(compareSpecs).map((priority)=>provided[priorities.indexOf(priority)]
    );
}
const SIMPLE_LANGUAGE_REGEXP = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
function parseLanguage(str1, i) {
    const match = SIMPLE_LANGUAGE_REGEXP.exec(str1);
    if (!match) {
        return undefined;
    }
    const [, prefix, suffix1] = match;
    const full = suffix1 ? `${prefix}-${suffix1}` : prefix;
    let q = 1;
    if (match[3]) {
        const params = match[3].split(";");
        for (const param of params){
            const [key1, value3] = param.trim().split("=");
            if (key1 === "q") {
                q = parseFloat(value3);
                break;
            }
        }
    }
    return {
        prefix,
        suffix: suffix1,
        full,
        q,
        i
    };
}
function parseAcceptLanguage(accept) {
    const accepts = accept.split(",");
    const result = [];
    for(let i = 0; i < accepts.length; i++){
        const language = parseLanguage(accepts[i].trim(), i);
        if (language) {
            result.push(language);
        }
    }
    return result;
}
function specify2(language, spec, i) {
    const p1 = parseLanguage(language, i);
    if (!p1) {
        return undefined;
    }
    let s1 = 0;
    if (spec.full.toLowerCase() === p1.full.toLowerCase()) {
        s1 |= 4;
    } else if (spec.prefix.toLowerCase() === p1.prefix.toLowerCase()) {
        s1 |= 2;
    } else if (spec.full.toLowerCase() === p1.prefix.toLowerCase()) {
        s1 |= 1;
    } else if (spec.full !== "*") {
        return;
    }
    return {
        i,
        o: spec.i,
        q: spec.q,
        s: s1
    };
}
function getLanguagePriority(language, accepted, index) {
    let priority = {
        i: -1,
        o: -1,
        q: 0,
        s: 0
    };
    for (const accepts of accepted){
        const spec = specify2(language, accepts, index);
        if (spec && ((priority.s ?? 0) - (spec.s ?? 0) || priority.q - spec.q || (priority.o ?? 0) - (spec.o ?? 0)) < 0) {
            priority = spec;
        }
    }
    return priority;
}
function preferredLanguages(accept = "*", provided) {
    const accepts = parseAcceptLanguage(accept);
    if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map((spec)=>spec.full
        );
    }
    const priorities = provided.map((type2, index)=>getLanguagePriority(type2, accepts, index)
    );
    return priorities.filter(isQuality).sort(compareSpecs).map((priority)=>provided[priorities.indexOf(priority)]
    );
}
const simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
function quoteCount(str1) {
    let count = 0;
    let index = 0;
    while((index = str1.indexOf(`"`, index)) !== -1){
        count++;
        index++;
    }
    return count;
}
function splitMediaTypes(accept) {
    const accepts = accept.split(",");
    let j = 0;
    for(let i = 1; i < accepts.length; i++){
        if (quoteCount(accepts[j]) % 2 === 0) {
            accepts[++j] = accepts[i];
        } else {
            accepts[j] += `,${accepts[i]}`;
        }
    }
    accepts.length = j + 1;
    return accepts;
}
function splitParameters(str1) {
    const parameters = str1.split(";");
    let j = 0;
    for(let i = 1; i < parameters.length; i++){
        if (quoteCount(parameters[j]) % 2 === 0) {
            parameters[++j] = parameters[i];
        } else {
            parameters[j] += `;${parameters[i]}`;
        }
    }
    parameters.length = j + 1;
    return parameters.map((p1)=>p1.trim()
    );
}
function splitKeyValuePair(str1) {
    const [key1, value3] = str1.split("=");
    return [
        key1.toLowerCase(),
        value3
    ];
}
function parseMediaType(str1, i) {
    const match = simpleMediaTypeRegExp.exec(str1);
    if (!match) {
        return;
    }
    const params = Object.create(null);
    let q = 1;
    const [, type2, subtype1, parameters] = match;
    if (parameters) {
        const kvps = splitParameters(parameters).map(splitKeyValuePair);
        for (const [key1, val] of kvps){
            const value3 = val && val[0] === `"` && val[val.length - 1] === `"` ? val.substr(1, val.length - 2) : val;
            if (key1 === "q" && value3) {
                q = parseFloat(value3);
                break;
            }
            params[key1] = value3;
        }
    }
    return {
        type: type2,
        subtype: subtype1,
        params,
        q,
        i
    };
}
function parseAccept(accept) {
    const accepts = splitMediaTypes(accept);
    const mediaTypes = [];
    for(let i = 0; i < accepts.length; i++){
        const mediaType = parseMediaType(accepts[i].trim(), i);
        if (mediaType) {
            mediaTypes.push(mediaType);
        }
    }
    return mediaTypes;
}
function getFullType(spec) {
    return `${spec.type}/${spec.subtype}`;
}
function specify3(type2, spec, index) {
    const p1 = parseMediaType(type2, index);
    if (!p1) {
        return;
    }
    let s1 = 0;
    if (spec.type.toLowerCase() === p1.type.toLowerCase()) {
        s1 |= 4;
    } else if (spec.type !== "*") {
        return;
    }
    if (spec.subtype.toLowerCase() === p1.subtype.toLowerCase()) {
        s1 |= 2;
    } else if (spec.subtype !== "*") {
        return;
    }
    const keys1 = Object.keys(spec.params);
    if (keys1.length) {
        if (keys1.every((key1)=>(spec.params[key1] || "").toLowerCase() === (p1.params[key1] || "").toLowerCase()
        )) {
            s1 |= 1;
        } else {
            return;
        }
    }
    return {
        i: index,
        o: spec.o,
        q: spec.q,
        s: s1
    };
}
function getMediaTypePriority(type2, accepted, index) {
    let priority = {
        o: -1,
        q: 0,
        s: 0,
        i: index
    };
    for (const accepts of accepted){
        const spec = specify3(type2, accepts, index);
        if (spec && ((priority.s || 0) - (spec.s || 0) || (priority.q || 0) - (spec.q || 0) || (priority.o || 0) - (spec.o || 0)) < 0) {
            priority = spec;
        }
    }
    return priority;
}
function preferredMediaTypes(accept, provided) {
    const accepts = parseAccept(accept === undefined ? "*/*" : accept || "");
    if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
    }
    const priorities = provided.map((type2, index)=>{
        return getMediaTypePriority(type2, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map((priority)=>provided[priorities.indexOf(priority)]
    );
}
class Request1 {
    #body;
    #proxy;
    #secure;
    #serverRequest;
    #url;
     #getRemoteAddr() {
        return this.#serverRequest instanceof NativeRequest ? this.#serverRequest.remoteAddr ?? "" : this.#serverRequest?.conn?.remoteAddr?.hostname ?? "";
    }
    get hasBody() {
        return this.#body.has();
    }
    get headers() {
        return this.#serverRequest.headers;
    }
    get ip() {
        return (this.#proxy ? this.ips[0] : this.#getRemoteAddr()) ?? "";
    }
    get ips() {
        return this.#proxy ? (this.#serverRequest.headers.get("x-forwarded-for") ?? this.#getRemoteAddr()).split(/\s*,\s*/) : [];
    }
    get method() {
        return this.#serverRequest.method;
    }
    get secure() {
        return this.#secure;
    }
    get originalRequest() {
        return this.#serverRequest;
    }
    get url() {
        if (!this.#url) {
            const serverRequest = this.#serverRequest;
            if (serverRequest instanceof NativeRequest && !this.#proxy) {
                try {
                    this.#url = new URL(serverRequest.rawUrl);
                    return this.#url;
                } catch  {
                }
            }
            let proto;
            let host;
            if (this.#proxy) {
                proto = serverRequest.headers.get("x-forwarded-proto")?.split(/\s*,\s*/, 1)[0] ?? "http";
                host = (serverRequest.headers.get("x-forwarded-host") ?? serverRequest.headers.get("host")) ?? "";
            } else {
                proto = this.#secure ? "https" : "http";
                host = serverRequest.headers.get("host") ?? "";
            }
            try {
                this.#url = new URL(`${proto}://${host}${serverRequest.url}`);
            } catch  {
                throw new TypeError(`The server request URL of "${proto}://${host}${serverRequest.url}" is invalid.`);
            }
        }
        return this.#url;
    }
    constructor(serverRequest, proxy1 = false, secure1 = false){
        this.#proxy = proxy1;
        this.#secure = secure1;
        this.#serverRequest = serverRequest;
        this.#body = new RequestBody(serverRequest instanceof NativeRequest ? serverRequest.request : serverRequest);
    }
    accepts(...types) {
        const acceptValue = this.#serverRequest.headers.get("Accept");
        if (!acceptValue) {
            return;
        }
        if (types.length) {
            return preferredMediaTypes(acceptValue, types)[0];
        }
        return preferredMediaTypes(acceptValue);
    }
    acceptsCharsets(...charsets) {
        const acceptCharsetValue = this.#serverRequest.headers.get("Accept-Charset");
        if (!acceptCharsetValue) {
            return;
        }
        if (charsets.length) {
            return preferredCharsets(acceptCharsetValue, charsets)[0];
        }
        return preferredCharsets(acceptCharsetValue);
    }
    acceptsEncodings(...encodings) {
        const acceptEncodingValue = this.#serverRequest.headers.get("Accept-Encoding");
        if (!acceptEncodingValue) {
            return;
        }
        if (encodings.length) {
            return preferredEncodings(acceptEncodingValue, encodings)[0];
        }
        return preferredEncodings(acceptEncodingValue);
    }
    acceptsLanguages(...langs) {
        const acceptLanguageValue = this.#serverRequest.headers.get("Accept-Language");
        if (!acceptLanguageValue) {
            return;
        }
        if (langs.length) {
            return preferredLanguages(acceptLanguageValue, langs)[0];
        }
        return preferredLanguages(acceptLanguageValue);
    }
    body(options = {
    }) {
        return this.#body.get(options);
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { hasBody , headers , ip , ips , method , secure: secure2 , url  } = this;
        return `${this.constructor.name} ${inspect({
            hasBody,
            headers,
            ip,
            ips,
            method,
            secure: secure2,
            url: url.toString()
        })}`;
    }
}
class AsyncIterableReader {
    #asyncIterator;
    #closed = false;
    #current;
    #processValue;
    constructor(asyncIterable, processValue){
        this.#asyncIterator = asyncIterable[Symbol.asyncIterator]();
        this.#processValue = processValue;
    }
     #close() {
        if (this.#asyncIterator.return) {
            this.#asyncIterator.return();
        }
        this.#asyncIterator = undefined;
        this.#closed = true;
    }
    async read(p) {
        if (this.#closed) {
            return null;
        }
        if (p.byteLength === 0) {
            this.#close();
            return 0;
        }
        if (!this.#current) {
            const { value: value3 , done  } = await this.#asyncIterator.next();
            if (done) {
                this.#close();
            }
            if (value3 !== undefined) {
                this.#current = this.#processValue(value3);
            }
        }
        if (!this.#current) {
            if (!this.#closed) {
                this.#close();
            }
            return null;
        }
        const len = copy(this.#current, p);
        if (len >= this.#current.byteLength) {
            this.#current = undefined;
        } else {
            this.#current = this.#current.slice(len);
        }
        return len;
    }
}
const REDIRECT_BACK = Symbol("redirect backwards");
const encoder3 = new TextEncoder();
function toUint8Array(body1) {
    let bodyText;
    if (BODY_TYPES.includes(typeof body1)) {
        bodyText = String(body1);
    } else {
        bodyText = JSON.stringify(body1);
    }
    return encoder3.encode(bodyText);
}
async function convertBodyToBodyInit(body1, type2) {
    let result;
    if (BODY_TYPES.includes(typeof body1)) {
        result = String(body1);
        type2 = type2 ?? (isHtml(result) ? "html" : "text/plain");
    } else if (isReader(body1)) {
        result = readableStreamFromReader(body1);
    } else if (ArrayBuffer.isView(body1) || body1 instanceof ArrayBuffer || body1 instanceof Blob || body1 instanceof URLSearchParams) {
        result = body1;
    } else if (body1 instanceof ReadableStream) {
        result = body1.pipeThrough(new Uint8ArrayTransformStream());
    } else if (body1 instanceof FormData) {
        result = body1;
        type2 = "multipart/form-data";
    } else if (body1 && typeof body1 === "object") {
        result = JSON.stringify(body1);
        type2 = type2 ?? "json";
    } else if (typeof body1 === "function") {
        const result1 = body1.call(null);
        return convertBodyToBodyInit(await result1, type2);
    } else if (body1) {
        throw new TypeError("Response body was set but could not be converted.");
    }
    return [
        result,
        type2
    ];
}
async function convertBodyToStdBody(body1, type2) {
    let result;
    if (BODY_TYPES.includes(typeof body1)) {
        const bodyText = String(body1);
        result = encoder3.encode(bodyText);
        type2 = type2 ?? (isHtml(bodyText) ? "html" : "text/plain");
    } else if (body1 instanceof Uint8Array || isReader(body1)) {
        result = body1;
    } else if (body1 instanceof ReadableStream) {
        result = readerFromStreamReader(body1.pipeThrough(new Uint8ArrayTransformStream()).getReader());
    } else if (isAsyncIterable(body1)) {
        result = new AsyncIterableReader(body1, toUint8Array);
    } else if (body1 && typeof body1 === "object") {
        result = encoder3.encode(JSON.stringify(body1));
        type2 = type2 ?? "json";
    } else if (typeof body1 === "function") {
        const result1 = body1.call(null);
        return convertBodyToStdBody(await result1, type2);
    } else if (body1) {
        throw new TypeError("Response body was set but could not be converted.");
    }
    return [
        result,
        type2
    ];
}
class Response1 {
    #body;
    #bodySet = false;
    #domResponse;
    #headers = new Headers();
    #request;
    #resources = [];
    #serverResponse;
    #status;
    #type;
    #writable = true;
    async #getBodyInit() {
        const [body1, type2] = await convertBodyToBodyInit(this.body, this.type);
        this.type = type2;
        return body1;
    }
    async #getStdBody() {
        const [body1, type2] = await convertBodyToStdBody(this.body, this.type);
        this.type = type2;
        return body1;
    }
     #setContentType() {
        if (this.type) {
            const contentTypeString = contentType(this.type);
            if (contentTypeString && !this.headers.has("Content-Type")) {
                this.headers.append("Content-Type", contentTypeString);
            }
        }
    }
    get body() {
        return this.#body;
    }
    set body(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#bodySet = true;
        this.#body = value;
    }
    get headers() {
        return this.#headers;
    }
    set headers(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#headers = value;
    }
    get status() {
        if (this.#status) {
            return this.#status;
        }
        return this.body != null ? Status.OK : this.#bodySet ? Status.NoContent : Status.NotFound;
    }
    set status(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#status = value;
    }
    get type() {
        return this.#type;
    }
    set type(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#type = value;
    }
    get writable() {
        return this.#writable;
    }
    constructor(request2){
        this.#request = request2;
    }
    addResource(rid) {
        this.#resources.push(rid);
    }
    destroy(closeResources = true) {
        this.#writable = false;
        this.#body = undefined;
        this.#serverResponse = undefined;
        this.#domResponse = undefined;
        if (closeResources) {
            for (const rid of this.#resources){
                Deno.close(rid);
            }
        }
    }
    redirect(url, alt = "/") {
        if (url === REDIRECT_BACK) {
            url = this.#request.headers.get("Referer") ?? String(alt);
        } else if (typeof url === "object") {
            url = String(url);
        }
        this.headers.set("Location", encodeUrl(url));
        if (!this.status || !isRedirectStatus(this.status)) {
            this.status = Status.Found;
        }
        if (this.#request.accepts("html")) {
            url = encodeURI(url);
            this.type = "text/html; charset=utf-8";
            this.body = `Redirecting to <a href="${url}">${url}</a>.`;
            return;
        }
        this.type = "text/plain; charset=utf-8";
        this.body = `Redirecting to ${url}.`;
    }
    async toDomResponse() {
        if (this.#domResponse) {
            return this.#domResponse;
        }
        const bodyInit = await this.#getBodyInit();
        this.#setContentType();
        const { headers  } = this;
        if (!(bodyInit || headers.has("Content-Type") || headers.has("Content-Length"))) {
            headers.append("Content-Length", "0");
        }
        this.#writable = false;
        const status = this.status;
        const responseInit = {
            headers,
            status,
            statusText: STATUS_TEXT.get(status)
        };
        return this.#domResponse = new DomResponse(bodyInit, responseInit);
    }
    async toServerResponse() {
        if (this.#serverResponse) {
            return this.#serverResponse;
        }
        const body1 = await this.#getStdBody();
        this.#setContentType();
        const { headers  } = this;
        if (!(body1 || headers.has("Content-Type") || headers.has("Content-Length"))) {
            headers.append("Content-Length", "0");
        }
        this.#writable = false;
        return this.#serverResponse = {
            body: body1,
            headers,
            status: this.status
        };
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { body: body1 , headers , status , type: type2 , writable  } = this;
        return `${this.constructor.name} ${inspect({
            body: body1,
            headers,
            status,
            type: type2,
            writable
        })}`;
    }
}
function isFileInfo(value3) {
    return Boolean(value3 && typeof value3 === "object" && "mtime" in value3 && "size" in value3);
}
function calcStatTag(entity) {
    const mtime = entity.mtime?.getTime().toString(16) ?? "0";
    const size5 = entity.size.toString(16);
    return `"${size5}-${mtime}"`;
}
const encoder4 = new TextEncoder();
async function calcEntityTag(entity) {
    if (entity.length === 0) {
        return `"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk="`;
    }
    if (typeof entity === "string") {
        entity = encoder4.encode(entity);
    }
    const hash = mod.encode(await crypto.subtle.digest("SHA-1", entity)).substring(0, 27);
    return `"${entity.length.toString(16)}-${hash}"`;
}
async function calculate(entity, options4 = {
}) {
    const weak = options4.weak ?? isFileInfo(entity);
    const tag = isFileInfo(entity) ? calcStatTag(entity) : await calcEntityTag(entity);
    return weak ? `W/${tag}` : tag;
}
async function ifNoneMatch(value3, entity, options4 = {
}) {
    if (value3.trim() === "*") {
        return false;
    }
    const etag = await calculate(entity, options4);
    const tags = value3.split(/\s*,\s*/);
    return !tags.includes(etag);
}
const ETAG_RE = /(?:W\/)?"[ !#-\x7E\x80-\xFF]+"/;
async function ifRange(value3, mtime, entity) {
    if (value3) {
        const matches1 = value3.match(ETAG_RE);
        if (matches1) {
            const [match] = matches1;
            if (await calculate(entity) === match) {
                return true;
            }
        } else {
            return new Date(value3).getTime() >= mtime;
        }
    }
    return false;
}
function parseRange(value3, size5) {
    const ranges = [];
    const [unit, rangesStr] = value3.split("=");
    if (unit !== "bytes") {
        throw createHttpError(Status.RequestedRangeNotSatisfiable);
    }
    for (const range of rangesStr.split(/\s*,\s+/)){
        const item = range.split("-");
        if (item.length !== 2) {
            throw createHttpError(Status.RequestedRangeNotSatisfiable);
        }
        const [startStr, endStr] = item;
        let start;
        let end;
        try {
            if (startStr === "") {
                start = size5 - parseInt(endStr, 10) - 1;
                end = size5 - 1;
            } else if (endStr === "") {
                start = parseInt(startStr, 10);
                end = size5 - 1;
            } else {
                start = parseInt(startStr, 10);
                end = parseInt(endStr, 10);
            }
        } catch  {
            throw createHttpError();
        }
        if (start < 0 || start >= size5 || end < 0 || end >= size5 || start > end) {
            throw createHttpError(Status.RequestedRangeNotSatisfiable);
        }
        ranges.push({
            start,
            end
        });
    }
    return ranges;
}
async function readRange(file, range) {
    let length = range.end - range.start + 1;
    assert1(length);
    await file.seek(range.start, Deno.SeekMode.Start);
    const result = new Uint8Array(length);
    let off = 0;
    while(length){
        const p2 = new Uint8Array(Math.min(length, 16640));
        const nread = await file.read(p2);
        assert1(nread !== null, "Unexpected EOF encountered when reading a range.");
        assert1(nread > 0, "Unexpected read of 0 bytes while reading a range.");
        copy(p2, result, off);
        off += nread;
        length -= nread;
        assert1(length >= 0, "Unexpected length remaining.");
    }
    return result;
}
const encoder5 = new TextEncoder();
class MultiPartStream extends ReadableStream {
    #contentLength;
    #postscript;
    #preamble;
    constructor(file, type2, ranges, size5, boundary1){
        super({
            pull: async (controller)=>{
                const range = ranges.shift();
                if (!range) {
                    controller.enqueue(this.#postscript);
                    controller.close();
                    if (!(file instanceof Uint8Array)) {
                        file.close();
                    }
                    return;
                }
                let bytes;
                if (file instanceof Uint8Array) {
                    bytes = file.subarray(range.start, range.end + 1);
                } else {
                    bytes = await readRange(file, range);
                }
                const rangeHeader = encoder5.encode(`Content-Range: ${range.start}-${range.end}/${size5}\n\n`);
                controller.enqueue(concat(this.#preamble, rangeHeader, bytes));
            }
        });
        const resolvedType = contentType(type2);
        if (!resolvedType) {
            throw new TypeError(`Could not resolve media type for "${type2}"`);
        }
        this.#preamble = encoder5.encode(`\n--${boundary1}\nContent-Type: ${resolvedType}\n`);
        this.#postscript = encoder5.encode(`\n--${boundary1}--\n`);
        this.#contentLength = ranges.reduce((prev, { start , end  })=>{
            return prev + this.#preamble.length + String(start).length + String(end).length + String(size5).length + 20 + (end - start);
        }, this.#postscript.length);
    }
    contentLength() {
        return this.#contentLength;
    }
}
const BOUNDARY = await getBoundary();
function isHidden(path1) {
    const pathArr = path1.split("/");
    for (const segment of pathArr){
        if (segment[0] === "." && segment !== "." && segment !== "..") {
            return true;
        }
        return false;
    }
}
async function exists(path1) {
    try {
        return (await Deno.stat(path1)).isFile;
    } catch  {
        return false;
    }
}
async function getEntity(path1, mtime, stats, maxbuffer, response2) {
    let body1;
    let entity;
    const file1 = await Deno.open(path1, {
        read: true
    });
    if (stats.size < maxbuffer) {
        const buffer = await readAll(file1);
        file1.close();
        body1 = entity = buffer;
    } else {
        response2.addResource(file1.rid);
        body1 = file1;
        entity = {
            mtime: new Date(mtime),
            size: stats.size
        };
    }
    return [
        body1,
        entity
    ];
}
async function sendRange(response2, body1, range, size6) {
    const ranges1 = parseRange(range, size6);
    if (ranges1.length === 0) {
        throw createHttpError(Status.RequestedRangeNotSatisfiable);
    }
    response2.status = Status.PartialContent;
    if (ranges1.length === 1) {
        const [byteRange] = ranges1;
        response2.headers.set("Content-Length", String(byteRange.end - byteRange.start + 1));
        response2.headers.set("Content-Range", `bytes ${byteRange.start}-${byteRange.end}/${size6}`);
        if (body1 instanceof Uint8Array) {
            response2.body = body1.slice(byteRange.start, byteRange.end + 1);
        } else {
            await body1.seek(byteRange.start, Deno.SeekMode.Start);
            response2.body = new LimitedReader(body1, byteRange.end - byteRange.start + 1);
        }
    } else {
        assert1(response2.type);
        response2.headers.set("content-type", `multipart/byteranges; boundary=${BOUNDARY}`);
        const multipartBody = new MultiPartStream(body1, response2.type, ranges1, size6, BOUNDARY);
        response2.headers.set("content-length", String(multipartBody.contentLength()));
        response2.body = multipartBody;
    }
}
async function send({ request: request3 , response: response2  }, path1, options4 = {
    root: ""
}) {
    const { brotli =true , contentTypes ={
    } , extensions: extensions1 , format: format4 = true , gzip =true , hidden =false , immutable =false , index , maxbuffer =1048576 , maxage =0 , root ,  } = options4;
    const trailingSlash = path1[path1.length - 1] === "/";
    path1 = decodeComponent(path1.substr(parse2(path1).root.length));
    if (index && trailingSlash) {
        path1 += index;
    }
    if (!hidden && isHidden(path1)) {
        throw createHttpError(403);
    }
    path1 = resolvePath(root, path1);
    let encodingExt = "";
    if (brotli && request3.acceptsEncodings("br", "identity") === "br" && await exists(`${path1}.br`)) {
        path1 = `${path1}.br`;
        response2.headers.set("Content-Encoding", "br");
        response2.headers.delete("Content-Length");
        encodingExt = ".br";
    } else if (gzip && request3.acceptsEncodings("gzip", "identity") === "gzip" && await exists(`${path1}.gz`)) {
        path1 = `${path1}.gz`;
        response2.headers.set("Content-Encoding", "gzip");
        response2.headers.delete("Content-Length");
        encodingExt = ".gz";
    }
    if (extensions1 && !/\.[^/]*$/.exec(path1)) {
        for (let ext of extensions1){
            if (!/^\./.exec(ext)) {
                ext = `.${ext}`;
            }
            if (await exists(`${path1}${ext}`)) {
                path1 += ext;
                break;
            }
        }
    }
    let stats;
    try {
        stats = await Deno.stat(path1);
        if (stats.isDirectory) {
            if (format4 && index) {
                path1 += `/${index}`;
                stats = await Deno.stat(path1);
            } else {
                return;
            }
        }
    } catch (err) {
        if (err instanceof Deno.errors.NotFound) {
            throw createHttpError(404, err.message);
        }
        throw createHttpError(500, err.message);
    }
    let mtime = null;
    if (response2.headers.has("Last-Modified")) {
        mtime = new Date(response2.headers.get("Last-Modified")).getTime();
    } else if (stats.mtime) {
        mtime = stats.mtime.getTime();
        mtime -= mtime % 1000;
        response2.headers.set("Last-Modified", new Date(mtime).toUTCString());
    }
    if (!response2.headers.has("Cache-Control")) {
        const directives = [
            `max-age=${maxage / 1000 | 0}`
        ];
        if (immutable) {
            directives.push("immutable");
        }
        response2.headers.set("Cache-Control", directives.join(","));
    }
    if (!response2.type) {
        response2.type = encodingExt !== "" ? extname2(basename2(path1, encodingExt)) : contentTypes[extname2(path1)] ?? extname2(path1);
    }
    let entity = null;
    let body1 = null;
    if (request3.headers.has("If-None-Match") && mtime) {
        [body1, entity] = await getEntity(path1, mtime, stats, maxbuffer, response2);
        if (!await ifNoneMatch(request3.headers.get("If-None-Match"), entity)) {
            response2.headers.set("ETag", await calculate(entity));
            response2.status = 304;
            return path1;
        }
    }
    if (request3.headers.has("If-Modified-Since") && mtime) {
        const ifModifiedSince = new Date(request3.headers.get("If-Modified-Since"));
        if (ifModifiedSince.getTime() >= mtime) {
            response2.status = 304;
            return path1;
        }
    }
    if (!body1 || !entity) {
        [body1, entity] = await getEntity(path1, mtime ?? 0, stats, maxbuffer, response2);
    }
    if (request3.headers.has("If-Range") && mtime && await ifRange(request3.headers.get("If-Range"), mtime, entity) && request3.headers.has("Range")) {
        await sendRange(response2, body1, request3.headers.get("Range"), stats.size);
        return path1;
    }
    if (request3.headers.has("Range")) {
        await sendRange(response2, body1, request3.headers.get("Range"), stats.size);
        return path1;
    }
    response2.headers.set("Content-Length", String(stats.size));
    response2.body = body1;
    if (!response2.headers.has("ETag")) {
        response2.headers.set("ETag", await calculate(entity));
    }
    if (!response2.headers.has("Accept-Ranges")) {
        response2.headers.set("Accept-Ranges", "bytes");
    }
    return path1;
}
const encoder6 = new TextEncoder();
class CloseEvent1 extends Event {
    constructor(eventInit){
        super("close", eventInit);
    }
}
class ServerSentEvent extends Event {
    #data;
    #id;
    #type;
    constructor(type3, data2, { replacer , space , ...eventInit1 } = {
    }){
        super(type3, eventInit1);
        this.#type = type3;
        try {
            this.#data = typeof data2 === "string" ? data2 : JSON.stringify(data2, replacer, space);
        } catch (e) {
            assert1(e instanceof Error);
            throw new TypeError(`data could not be coerced into a serialized string.\n  ${e.message}`);
        }
        const { id: id1  } = eventInit1;
        this.#id = id1;
    }
    get data() {
        return this.#data;
    }
    get id() {
        return this.#id;
    }
    toString() {
        const data3 = `data: ${this.#data.split("\n").join("\ndata: ")}\n`;
        return `${this.#type === "__message" ? "" : `event: ${this.#type}\n`}${this.#id ? `id: ${String(this.#id)}\n` : ""}${data3}\n`;
    }
}
const response2 = `HTTP/1.1 200 OK\n`;
const responseHeaders = new Headers([
    [
        "Connection",
        "Keep-Alive"
    ],
    [
        "Content-Type",
        "text/event-stream"
    ],
    [
        "Cache-Control",
        "no-cache"
    ],
    [
        "Keep-Alive",
        `timeout=${Number.MAX_SAFE_INTEGER}`
    ], 
]);
class SSEStreamTarget extends EventTarget {
    #closed = false;
    #context;
    #controller;
    #keepAliveId;
     #error(error) {
        console.log("error", error);
        this.dispatchEvent(new CloseEvent1({
            cancelable: false
        }));
        const errorEvent = new ErrorEvent("error", {
            error
        });
        this.dispatchEvent(errorEvent);
        this.#context.app.dispatchEvent(errorEvent);
    }
     #push(payload) {
        if (!this.#controller) {
            this.#error(new Error("The controller has not been set."));
            return;
        }
        if (this.#closed) {
            return;
        }
        this.#controller.enqueue(encoder6.encode(payload));
    }
    get closed() {
        return this.#closed;
    }
    constructor(context2, { headers , keepAlive =false  } = {
    }){
        super();
        this.#context = context2;
        context2.response.body = new ReadableStream({
            start: (controller)=>{
                this.#controller = controller;
            },
            cancel: (error)=>{
                if (error instanceof Error && error.message.includes("connection closed")) {
                    this.close();
                } else {
                    this.#error(error);
                }
            }
        });
        if (headers) {
            for (const [key1, value3] of headers){
                context2.response.headers.set(key1, value3);
            }
        }
        for (const [key1, value3] of responseHeaders){
            context2.response.headers.set(key1, value3);
        }
        this.addEventListener("close", ()=>{
            this.#closed = true;
            if (this.#keepAliveId != null) {
                clearInterval(this.#keepAliveId);
                this.#keepAliveId = undefined;
            }
            if (this.#controller) {
                try {
                    this.#controller.close();
                } catch  {
                }
            }
        });
        if (keepAlive) {
            const interval = typeof keepAlive === "number" ? keepAlive : 30000;
            this.#keepAliveId = setInterval(()=>{
                this.dispatchComment("keep-alive comment");
            }, interval);
        }
    }
    close() {
        this.dispatchEvent(new CloseEvent1({
            cancelable: false
        }));
        return Promise.resolve();
    }
    dispatchComment(comment) {
        this.#push(`: ${comment.split("\n").join("\n: ")}\n\n`);
        return true;
    }
    dispatchMessage(data) {
        const event = new ServerSentEvent("__message", data);
        return this.dispatchEvent(event);
    }
    dispatchEvent(event) {
        const dispatched = super.dispatchEvent(event);
        if (dispatched && event instanceof ServerSentEvent) {
            this.#push(String(event));
        }
        return dispatched;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({
            "#closed": this.#closed,
            "#context": this.#context
        })}`;
    }
}
class SSEStdLibTarget extends EventTarget {
    #app;
    #closed = false;
    #keepAliveId;
    #prev = Promise.resolve();
    #ready;
    #serverRequest;
    #writer;
    async #send(payload, prev) {
        if (this.#closed) {
            return;
        }
        if (this.#ready !== true) {
            await this.#ready;
            this.#ready = true;
        }
        try {
            await prev;
            await this.#writer.write(encoder6.encode(payload));
            await this.#writer.flush();
        } catch (error) {
            this.dispatchEvent(new CloseEvent1({
                cancelable: false
            }));
            const errorEvent = new ErrorEvent("error", {
                error
            });
            this.dispatchEvent(errorEvent);
            this.#app.dispatchEvent(errorEvent);
        }
    }
    async #setup(overrideHeaders) {
        const headers1 = new Headers(responseHeaders);
        if (overrideHeaders) {
            for (const [key2, value4] of overrideHeaders){
                headers1.set(key2, value4);
            }
        }
        let payload = response2;
        for (const [key2, value4] of headers1){
            payload += `${key2}: ${value4}\n`;
        }
        payload += `\n`;
        try {
            await this.#writer.write(encoder6.encode(payload));
            await this.#writer.flush();
        } catch (error) {
            this.dispatchEvent(new CloseEvent1({
                cancelable: false
            }));
            const errorEvent = new ErrorEvent("error", {
                error
            });
            this.dispatchEvent(errorEvent);
            this.#app.dispatchEvent(errorEvent);
            throw error;
        }
    }
    get closed() {
        return this.#closed;
    }
    constructor(context1, { headers: headers1 , keepAlive: keepAlive1 = false  } = {
    }){
        super();
        this.#app = context1.app;
        assert1(!(context1.request.originalRequest instanceof NativeRequest));
        this.#serverRequest = context1.request.originalRequest;
        this.#writer = this.#serverRequest.w;
        this.addEventListener("close", ()=>{
            this.#closed = true;
            if (this.#keepAliveId != null) {
                clearInterval(this.#keepAliveId);
                this.#keepAliveId = undefined;
            }
            try {
                this.#serverRequest.conn.close();
            } catch (error) {
                if (!(error instanceof Deno.errors.BadResource)) {
                    const errorEvent = new ErrorEvent("error", {
                        error
                    });
                    this.dispatchEvent(errorEvent);
                    this.#app.dispatchEvent(errorEvent);
                }
            }
        });
        if (keepAlive1) {
            const interval = typeof keepAlive1 === "number" ? keepAlive1 : 30000;
            this.#keepAliveId = setInterval(()=>{
                this.dispatchComment("keep-alive comment");
            }, interval);
        }
        this.#ready = this.#setup(headers1);
    }
    async close() {
        if (this.#ready !== true) {
            await this.#ready;
        }
        await this.#prev;
        this.dispatchEvent(new CloseEvent1({
            cancelable: false
        }));
    }
    dispatchComment(comment) {
        this.#prev = this.#send(`: ${comment.split("\n").join("\n: ")}\n\n`, this.#prev);
        return true;
    }
    dispatchMessage(data) {
        const event = new ServerSentEvent("__message", data);
        return this.dispatchEvent(event);
    }
    dispatchEvent(event) {
        const dispatched = super.dispatchEvent(event);
        if (dispatched && event instanceof ServerSentEvent) {
            this.#prev = this.#send(String(event), this.#prev);
        }
        return dispatched;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({
            "closed": this.closed
        })}`;
    }
}
class WebSocketShim extends EventTarget {
    #binaryType = "blob";
    #protocol = "";
    #readyState = WebSocket.CONNECTING;
    #socket;
    #url;
    #wasClean = false;
     #getBinaryData(data) {
        if (this.#binaryType === "arraybuffer") {
            return data.buffer;
        }
        return new Blob([
            data
        ]);
    }
     #listen() {
        queueMicrotask(async ()=>{
            for await (const event of this.#socket){
                if (this.#readyState === WebSocket.CONNECTING) {
                    this.#readyState = WebSocket.OPEN;
                    this.dispatchEvent(new Event("open", {
                        cancelable: false
                    }));
                }
                if (this.#readyState === WebSocket.CLOSING && !isWebSocketCloseEvent(event)) {
                    const error = new Error("Received an event while closing.");
                    this.dispatchEvent(new ErrorEvent("error", {
                        error,
                        cancelable: false
                    }));
                }
                if (isWebSocketCloseEvent(event)) {
                    this.#readyState = WebSocket.CLOSED;
                    const { code , reason  } = event;
                    const wasClean = this.#wasClean;
                    this.dispatchEvent(new CloseEvent("close", {
                        code,
                        reason,
                        wasClean,
                        cancelable: false
                    }));
                    return;
                } else if (isWebSocketPingEvent(event) || isWebSocketPongEvent(event)) {
                    const [type4, data3] = event;
                    this.dispatchEvent(new MessageEvent("message", {
                        data: type4,
                        cancelable: false
                    }));
                    this.dispatchEvent(new MessageEvent("message", {
                        data: data3,
                        cancelable: false
                    }));
                } else {
                    const data3 = typeof event === "string" ? event : this.#getBinaryData(event);
                    this.dispatchEvent(new MessageEvent("message", {
                        data: data3,
                        cancelable: false
                    }));
                }
                if (this.#readyState === WebSocket.CLOSED) {
                    return;
                }
            }
        });
    }
    get binaryType() {
        return this.#binaryType;
    }
    set binaryType(value) {
        this.#binaryType = value;
    }
    get bufferedAmount() {
        return 0;
    }
    get extensions() {
        return "";
    }
    onclose = null;
    onerror = null;
    onmessage = null;
    onopen = null;
    get protocol() {
        return this.#protocol;
    }
    get readyState() {
        return this.#readyState;
    }
    get url() {
        return this.#url;
    }
    constructor(socket, url, protocol = ""){
        super();
        this.#protocol = protocol;
        this.#socket = socket;
        this.#url = url;
        this.#listen();
    }
    close(code, reason) {
        queueMicrotask(async ()=>{
            try {
                this.#readyState = WebSocket.CLOSING;
                await this.#socket.close(code, reason);
                this.#wasClean = true;
            } catch (error) {
                this.dispatchEvent(new ErrorEvent("error", {
                    error
                }));
            }
        });
    }
    send(data) {
        queueMicrotask(async ()=>{
            try {
                let d;
                if (typeof data === "string") {
                    d = data;
                } else if (data instanceof Blob) {
                    d = new Uint8Array(await data.arrayBuffer());
                } else if (ArrayBuffer.isView(data)) {
                    d = new Uint8Array(data.buffer);
                } else {
                    d = new Uint8Array(data);
                }
                await this.#socket.send(d);
            } catch (error) {
                this.dispatchEvent(new ErrorEvent("error", {
                    error,
                    cancelable: false
                }));
            }
        });
    }
    dispatchEvent(event) {
        if (event.type === "error" && this.onerror) {
            this.onerror.call(this, event);
        } else if (event.type === "close" && event instanceof CloseEvent && this.onclose) {
            this.onclose.call(this, event);
        } else if (event.type === "message" && event instanceof MessageEvent && this.onmessage) {
            this.onmessage.call(this, event);
        } else if (event.type === "open" && this.onopen) {
            this.onopen.call(this, event);
        }
        if (!event.defaultPrevented) {
            return super.dispatchEvent(event);
        } else {
            return false;
        }
    }
    get CLOSED() {
        return WebSocket.CLOSED;
    }
    get CLOSING() {
        return WebSocket.CLOSING;
    }
    get CONNECTING() {
        return WebSocket.CONNECTING;
    }
    get OPEN() {
        return WebSocket.OPEN;
    }
}
class Context {
    #socket;
    #sse;
    app;
    cookies;
    get isUpgradable() {
        return acceptable(this.request);
    }
    respond;
    request;
    response;
    get socket() {
        return this.#socket;
    }
    state;
    constructor(app2, serverRequest1, state1, secure2 = false){
        this.app = app2;
        this.state = state1;
        this.request = new Request1(serverRequest1, app2.proxy, secure2);
        this.respond = true;
        this.response = new Response1(this.request);
        this.cookies = new Cookies(this.request, this.response, {
            keys: this.app.keys,
            secure: this.request.secure
        });
    }
    assert(condition, errorStatus = 500, message, props) {
        if (condition) {
            return;
        }
        const err = createHttpError(errorStatus, message);
        if (props) {
            Object.assign(err, props);
        }
        throw err;
    }
    send(options) {
        const { path: path1 = this.request.url.pathname , ...sendOptions } = options;
        return send(this, path1, sendOptions);
    }
    sendEvents(options) {
        if (!this.#sse) {
            if (this.request.originalRequest instanceof NativeRequest) {
                this.#sse = new SSEStreamTarget(this, options);
            } else {
                this.respond = false;
                this.#sse = new SSEStdLibTarget(this, options);
            }
        }
        return this.#sse;
    }
    throw(errorStatus, message, props) {
        const err = createHttpError(errorStatus, message);
        if (props) {
            Object.assign(err, props);
        }
        throw err;
    }
    async upgrade(options) {
        if (this.#socket) {
            return this.#socket;
        }
        if (this.request.originalRequest instanceof NativeRequest) {
            this.#socket = this.request.originalRequest.upgrade(options);
        } else {
            const { conn: conn2 , r: bufReader1 , w: bufWriter1 , headers: headers2  } = this.request.originalRequest;
            this.#socket = new WebSocketShim(await acceptWebSocket({
                conn: conn2,
                bufReader: bufReader1,
                bufWriter: bufWriter1,
                headers: headers2
            }), this.request.url.toString(), options?.protocol);
        }
        this.respond = false;
        return this.#socket;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { app: app3 , cookies , isUpgradable , respond , request: request4 , response: response3 , socket: socket1 , state: state1 ,  } = this;
        return `${this.constructor.name} ${inspect({
            app: app3,
            cookies,
            isUpgradable,
            respond,
            request: request4,
            response: response3,
            socket: socket1,
            state: state1
        })}`;
    }
}
class HttpServerStd {
    #options;
    #server;
    constructor(_app, options4){
        this.#options = options4;
    }
    close() {
        if (this.#server) {
            this.#server.close();
        }
    }
    listen() {
        this.#server = isListenTlsOptions(this.#options) ? serveTLS(this.#options) : serve(this.#options);
        return this.#server.listener;
    }
    [Symbol.asyncIterator]() {
        assert1(this.#server);
        return this.#server[Symbol.asyncIterator]();
    }
}
function compareArrayBuffer(a, b) {
    assert1(a.byteLength === b.byteLength, "ArrayBuffer lengths must match.");
    const va = new DataView(a);
    const vb = new DataView(b);
    const length = va.byteLength;
    let out = 0;
    let i = -1;
    while(++i < length){
        out |= va.getUint8(i) ^ vb.getUint8(i);
    }
    return out === 0;
}
async function compare(a, b) {
    const key2 = new Uint8Array(32);
    globalThis.crypto.getRandomValues(key2);
    const cryptoKey = await importKey(key2);
    const ah = await sign(a, cryptoKey);
    const bh = await sign(b, cryptoKey);
    return compareArrayBuffer(ah, bh);
}
class KeyStack {
    #cryptoKeys = new Map();
    #keys;
    async #toCryptoKey(key) {
        if (!this.#cryptoKeys.has(key)) {
            this.#cryptoKeys.set(key, await importKey(key));
        }
        return this.#cryptoKeys.get(key);
    }
    get length() {
        return this.#keys.length;
    }
    constructor(keys1){
        if (!(0 in keys1)) {
            throw new TypeError("keys must contain at least one value");
        }
        this.#keys = keys1;
    }
    async sign(data) {
        const key3 = await this.#toCryptoKey(this.#keys[0]);
        return encodeBase64Safe(await sign(data, key3));
    }
    async verify(data, digest) {
        return await this.indexOf(data, digest) > -1;
    }
    async indexOf(data, digest) {
        for(let i = 0; i < this.#keys.length; i++){
            const cryptoKey = await this.#toCryptoKey(this.#keys[i]);
            if (await compare(digest, encodeBase64Safe(await sign(data, cryptoKey)))) {
                return i;
            }
        }
        return -1;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({
            length: this.length
        })}`;
    }
}
function compose(middleware) {
    return function composedMiddleware(context2, next) {
        let index = -1;
        async function dispatch(i) {
            if (i <= index) {
                throw new Error("next() called multiple times.");
            }
            index = i;
            let fn = middleware[i];
            if (i === middleware.length) {
                fn = next;
            }
            if (!fn) {
                return;
            }
            await fn(context2, dispatch.bind(null, i + 1));
        }
        return dispatch(0);
    };
}
const objectCloneMemo = new WeakMap();
function cloneArrayBuffer(srcBuffer, srcByteOffset, srcLength, _cloneConstructor) {
    return srcBuffer.slice(srcByteOffset, srcByteOffset + srcLength);
}
function cloneValue(value4) {
    switch(typeof value4){
        case "number":
        case "string":
        case "boolean":
        case "undefined":
        case "bigint":
            return value4;
        case "object":
            {
                if (objectCloneMemo.has(value4)) {
                    return objectCloneMemo.get(value4);
                }
                if (value4 === null) {
                    return value4;
                }
                if (value4 instanceof Date) {
                    return new Date(value4.valueOf());
                }
                if (value4 instanceof RegExp) {
                    return new RegExp(value4);
                }
                if (value4 instanceof SharedArrayBuffer) {
                    return value4;
                }
                if (value4 instanceof ArrayBuffer) {
                    const cloned = cloneArrayBuffer(value4, 0, value4.byteLength, ArrayBuffer);
                    objectCloneMemo.set(value4, cloned);
                    return cloned;
                }
                if (ArrayBuffer.isView(value4)) {
                    const clonedBuffer = cloneValue(value4.buffer);
                    let length;
                    if (value4 instanceof DataView) {
                        length = value4.byteLength;
                    } else {
                        length = value4.length;
                    }
                    return new value4.constructor(clonedBuffer, value4.byteOffset, length);
                }
                if (value4 instanceof Map) {
                    const clonedMap = new Map();
                    objectCloneMemo.set(value4, clonedMap);
                    value4.forEach((v, k)=>{
                        clonedMap.set(cloneValue(k), cloneValue(v));
                    });
                    return clonedMap;
                }
                if (value4 instanceof Set) {
                    const clonedSet = new Set([
                        ...value4
                    ].map(cloneValue));
                    objectCloneMemo.set(value4, clonedSet);
                    return clonedSet;
                }
                const clonedObj = {
                };
                objectCloneMemo.set(value4, clonedObj);
                const sourceKeys = Object.getOwnPropertyNames(value4);
                for (const key3 of sourceKeys){
                    clonedObj[key3] = cloneValue(value4[key3]);
                }
                Reflect.setPrototypeOf(clonedObj, Reflect.getPrototypeOf(value4));
                return clonedObj;
            }
        case "symbol":
        case "function":
        default:
            throw new DOMException("Uncloneable value in stream", "DataCloneError");
    }
}
const core = Deno?.core;
const structuredClone = globalThis.structuredClone;
function sc(value4) {
    return structuredClone ? structuredClone(value4) : core ? core.deserialize(core.serialize(value4)) : cloneValue(value4);
}
function cloneState(state1) {
    const clone = {
    };
    for (const [key3, value4] of Object.entries(state1)){
        try {
            const clonedValue = sc(value4);
            clone[key3] = clonedValue;
        } catch  {
        }
    }
    return clone;
}
const ADDR_REGEXP = /^\[?([^\]]*)\]?:([0-9]{1,5})$/;
class ApplicationErrorEvent extends ErrorEvent {
    context;
    constructor(eventInitDict){
        super("error", eventInitDict);
        this.context = eventInitDict.context;
    }
}
function logErrorListener({ error , context: context3  }) {
    if (error instanceof Error) {
        console.error(`[uncaught oak error]: ${error.name} - ${error.message}`);
    } else {
        console.error(`[uncaught oak error]\n`, error);
    }
    if (context3) {
        let url1;
        try {
            url1 = context3.request.url.toString();
        } catch  {
            url1 = "[malformed url]";
        }
        console.error(`\nrequest:`, {
            url: url1,
            method: context3.request.method,
            hasBody: context3.request.hasBody
        });
        console.error(`response:`, {
            status: context3.response.status,
            type: context3.response.type,
            hasBody: !!context3.response.body,
            writable: context3.response.writable
        });
    }
    if (error instanceof Error && error.stack) {
        console.error(`\n${error.stack.split("\n").slice(1).join("\n")}`);
    }
}
class ApplicationListenEvent extends Event {
    hostname;
    listener;
    port;
    secure;
    serverType;
    constructor(eventInitDict1){
        super("listen", eventInitDict1);
        this.hostname = eventInitDict1.hostname;
        this.listener = eventInitDict1.listener;
        this.port = eventInitDict1.port;
        this.secure = eventInitDict1.secure;
        this.serverType = eventInitDict1.serverType;
    }
}
class Application extends EventTarget {
    #composedMiddleware;
    #contextState;
    #eventHandler;
    #keys;
    #middleware = [];
    #serverConstructor;
    get keys() {
        return this.#keys;
    }
    set keys(keys) {
        if (!keys) {
            this.#keys = undefined;
            return;
        } else if (Array.isArray(keys)) {
            this.#keys = new KeyStack(keys);
        } else {
            this.#keys = keys;
        }
    }
    proxy;
    state;
    constructor(options5 = {
    }){
        super();
        const { state: state2 , keys: keys3 , proxy: proxy2 , serverConstructor =hasNativeHttp() ? HttpServerNative : HttpServerStd , contextState ="clone" , logErrors =true ,  } = options5;
        this.proxy = proxy2 ?? false;
        this.keys = keys3;
        this.state = state2 ?? {
        };
        this.#serverConstructor = serverConstructor;
        this.#contextState = contextState;
        if (logErrors) {
            this.addEventListener("error", logErrorListener);
        }
    }
     #getComposed() {
        if (!this.#composedMiddleware) {
            this.#composedMiddleware = compose(this.#middleware);
        }
        return this.#composedMiddleware;
    }
     #getContextState() {
        switch(this.#contextState){
            case "alias":
                return this.state;
            case "clone":
                return cloneState(this.state);
            case "empty":
                return {
                };
            case "prototype":
                return Object.create(this.state);
        }
    }
     #handleError(context, error) {
        if (!(error instanceof Error)) {
            error = new Error(`non-error thrown: ${JSON.stringify(error)}`);
        }
        const { message: message3  } = error;
        this.dispatchEvent(new ApplicationErrorEvent({
            context,
            message: message3,
            error
        }));
        if (!context.response.writable) {
            return;
        }
        for (const key3 of [
            ...context.response.headers.keys()
        ]){
            context.response.headers.delete(key3);
        }
        if (error.headers && error.headers instanceof Headers) {
            for (const [key4, value4] of error.headers){
                context.response.headers.set(key4, value4);
            }
        }
        context.response.type = "text";
        const status = context.response.status = Deno.errors && error instanceof Deno.errors.NotFound ? 404 : error.status && typeof error.status === "number" ? error.status : 500;
        context.response.body = error.expose ? error.message : STATUS_TEXT.get(status);
    }
    async #handleRequest(request, secure, state) {
        const context3 = new Context(this, request, this.#getContextState(), secure);
        let resolve3;
        const handlingPromise = new Promise((res)=>resolve3 = res
        );
        state.handling.add(handlingPromise);
        if (!state.closing && !state.closed) {
            try {
                await this.#getComposed()(context3);
            } catch (err) {
                this.#handleError(context3, err);
            }
        }
        if (context3.respond === false) {
            context3.response.destroy();
            resolve3();
            state.handling.delete(handlingPromise);
            return;
        }
        let closeResources = true;
        let response3;
        try {
            if (request instanceof NativeRequest) {
                closeResources = false;
                response3 = await context3.response.toDomResponse();
            } else {
                response3 = await context3.response.toServerResponse();
            }
        } catch (err) {
            this.#handleError(context3, err);
            if (request instanceof NativeRequest) {
                response3 = await context3.response.toDomResponse();
            } else {
                response3 = await context3.response.toServerResponse();
            }
        }
        assert1(response3);
        try {
            await request.respond(response3);
        } catch (err) {
            this.#handleError(context3, err);
        } finally{
            context3.response.destroy(closeResources);
            resolve3();
            state.handling.delete(handlingPromise);
            if (state.closing) {
                state.server.close();
                state.closed = true;
            }
        }
    }
    addEventListener(type, listener, options) {
        super.addEventListener(type, listener, options);
    }
    fetchEventHandler({ proxy =true , secure =true  } = {
    }) {
        if (this.#eventHandler) {
            return this.#eventHandler;
        }
        this.proxy = proxy;
        return this.#eventHandler = {
            handleEvent: async (requestEvent1)=>{
                let resolve3;
                let reject;
                const responsePromise = new Promise((res, rej)=>{
                    resolve3 = res;
                    reject = rej;
                });
                const respondedPromise = requestEvent1.respondWith(responsePromise);
                const response3 = await this.handle(requestEvent1.request, undefined, secure);
                if (response3) {
                    resolve3(response3);
                } else {
                    reject(new Error("No response returned from app handler."));
                }
                try {
                    await respondedPromise;
                } catch (error) {
                    this.dispatchEvent(new ApplicationErrorEvent({
                        error
                    }));
                }
            }
        };
    }
    handle = async (request4, secureOrConn, secure4 = false)=>{
        if (!this.#middleware.length) {
            throw new TypeError("There is no middleware to process requests.");
        }
        let contextRequest;
        if (request4 instanceof Request) {
            assert1(isConn(secureOrConn) || typeof secureOrConn === "undefined");
            contextRequest = new NativeRequest({
                request: request4,
                respondWith () {
                    return Promise.resolve(undefined);
                }
            }, {
                conn: secureOrConn
            });
        } else {
            assert1(typeof secureOrConn === "boolean" || typeof secureOrConn === "undefined");
            secure4 = secureOrConn ?? false;
            contextRequest = request4;
        }
        const context3 = new Context(this, contextRequest, this.#getContextState(), secure4);
        try {
            await this.#getComposed()(context3);
        } catch (err) {
            this.#handleError(context3, err);
        }
        if (context3.respond === false) {
            context3.response.destroy();
            return;
        }
        try {
            const response3 = contextRequest instanceof NativeRequest ? await context3.response.toDomResponse() : await context3.response.toServerResponse();
            context3.response.destroy(false);
            return response3;
        } catch (err) {
            this.#handleError(context3, err);
            throw err;
        }
    };
    async listen(options) {
        if (!this.#middleware.length) {
            throw new TypeError("There is no middleware to process requests.");
        }
        if (typeof options === "string") {
            const match = ADDR_REGEXP.exec(options);
            if (!match) {
                throw TypeError(`Invalid address passed: "${options}"`);
            }
            const [, hostname, portStr] = match;
            options = {
                hostname,
                port: parseInt(portStr, 10)
            };
        }
        const server = new this.#serverConstructor(this, options);
        const { signal  } = options;
        const state3 = {
            closed: false,
            closing: false,
            handling: new Set(),
            server
        };
        if (signal) {
            signal.addEventListener("abort", ()=>{
                if (!state3.handling.size) {
                    server.close();
                    state3.closed = true;
                }
                state3.closing = true;
            });
        }
        const { secure: secure4 = false  } = options;
        const serverType = server instanceof HttpServerStd ? "std" : server instanceof HttpServerNative ? "native" : "custom";
        const listener2 = server.listen();
        const { hostname , port  } = listener2.addr;
        this.dispatchEvent(new ApplicationListenEvent({
            hostname,
            listener: listener2,
            port,
            secure: secure4,
            serverType
        }));
        try {
            for await (const request4 of server){
                this.#handleRequest(request4, secure4, state3);
            }
            await Promise.all(state3.handling);
        } catch (error) {
            const message3 = error instanceof Error ? error.message : "Application Error";
            this.dispatchEvent(new ApplicationErrorEvent({
                message: message3,
                error
            }));
        }
    }
    use(...middleware) {
        this.#middleware.push(...middleware);
        this.#composedMiddleware = undefined;
        return this;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { keys: keys4 , proxy: proxy3 , state: state3  } = this;
        return `${this.constructor.name} ${inspect({
            "#middleware": this.#middleware,
            keys: keys4,
            proxy: proxy3,
            state: state3
        })}`;
    }
}
function toUrl(url1, params = {
}, options6) {
    const tokens = parse3(url1);
    let replace = {
    };
    if (tokens.some((token)=>typeof token === "object"
    )) {
        replace = params;
    } else {
        options6 = params;
    }
    const toPath = compile1(url1, options6);
    const replaced = toPath(replace);
    if (options6 && options6.query) {
        const url2 = new URL(replaced, "http://oak");
        if (typeof options6.query === "string") {
            url2.search = options6.query;
        } else {
            url2.search = String(options6.query instanceof URLSearchParams ? options6.query : new URLSearchParams(options6.query));
        }
        return `${url2.pathname}${url2.search}${url2.hash}`;
    }
    return replaced;
}
class Layer {
    #opts;
    #paramNames = [];
    #regexp;
    methods;
    name;
    path;
    stack;
    constructor(path2, methods1, middleware1, { name: name2 , ...opts } = {
    }){
        this.#opts = opts;
        this.name = name2;
        this.methods = [
            ...methods1
        ];
        if (this.methods.includes("GET")) {
            this.methods.unshift("HEAD");
        }
        this.stack = Array.isArray(middleware1) ? middleware1.slice() : [
            middleware1
        ];
        this.path = path2;
        this.#regexp = pathToRegexp(path2, this.#paramNames, this.#opts);
    }
    clone() {
        return new Layer(this.path, this.methods, this.stack, {
            name: this.name,
            ...this.#opts
        });
    }
    match(path) {
        return this.#regexp.test(path);
    }
    params(captures, existingParams = {
    }) {
        const params = existingParams;
        for(let i = 0; i < captures.length; i++){
            if (this.#paramNames[i]) {
                const c = captures[i];
                params[this.#paramNames[i].name] = c ? decodeComponent(c) : c;
            }
        }
        return params;
    }
    captures(path) {
        if (this.#opts.ignoreCaptures) {
            return [];
        }
        return path.match(this.#regexp)?.slice(1) ?? [];
    }
    url(params = {
    }, options) {
        const url1 = this.path.replace(/\(\.\*\)/g, "");
        return toUrl(url1, params, options);
    }
    param(param, fn) {
        const stack = this.stack;
        const params = this.#paramNames;
        const middleware1 = function(ctx, next) {
            const p2 = ctx.params[param];
            assert1(p2);
            return fn.call(this, p2, ctx, next);
        };
        middleware1.param = param;
        const names = params.map((p2)=>p2.name
        );
        const x = names.indexOf(param);
        if (x >= 0) {
            for(let i = 0; i < stack.length; i++){
                const fn = stack[i];
                if (!fn.param || names.indexOf(fn.param) > x) {
                    stack.splice(i, 0, middleware1);
                    break;
                }
            }
        }
        return this;
    }
    setPrefix(prefix) {
        if (this.path) {
            this.path = this.path !== "/" || this.#opts.strict === true ? `${prefix}${this.path}` : prefix;
            this.#paramNames = [];
            this.#regexp = pathToRegexp(this.path, this.#paramNames, this.#opts);
        }
        return this;
    }
    toJSON() {
        return {
            methods: [
                ...this.methods
            ],
            middleware: [
                ...this.stack
            ],
            paramNames: this.#paramNames.map((key3)=>key3.name
            ),
            path: this.path,
            regexp: this.#regexp,
            options: {
                ...this.#opts
            }
        };
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({
            methods: this.methods,
            middleware: this.stack,
            options: this.#opts,
            paramNames: this.#paramNames.map((key3)=>key3.name
            ),
            path: this.path,
            regexp: this.#regexp
        })}`;
    }
}
class Router {
    #opts;
    #methods;
    #params = {
    };
    #stack = [];
     #match(path, method) {
        const matches1 = {
            path: [],
            pathAndMethod: [],
            route: false
        };
        for (const route of this.#stack){
            if (route.match(path)) {
                matches1.path.push(route);
                if (route.methods.length === 0 || route.methods.includes(method)) {
                    matches1.pathAndMethod.push(route);
                    if (route.methods.length) {
                        matches1.route = true;
                    }
                }
            }
        }
        return matches1;
    }
     #register(path, middlewares, methods, options = {
    }) {
        if (Array.isArray(path)) {
            for (const p2 of path){
                this.#register(p2, middlewares, methods, options);
            }
            return;
        }
        let layerMiddlewares = [];
        for (const middleware1 of middlewares){
            if (!middleware1.router) {
                layerMiddlewares.push(middleware1);
                continue;
            }
            if (layerMiddlewares.length) {
                this.#addLayer(path, layerMiddlewares, methods, options);
                layerMiddlewares = [];
            }
            const router = middleware1.router.#clone();
            for (const layer of router.#stack){
                if (!options.ignorePrefix) {
                    layer.setPrefix(path);
                }
                if (this.#opts.prefix) {
                    layer.setPrefix(this.#opts.prefix);
                }
                this.#stack.push(layer);
            }
            for (const [param, mw] of Object.entries(this.#params)){
                router.param(param, mw);
            }
        }
        if (layerMiddlewares.length) {
            this.#addLayer(path, layerMiddlewares, methods, options);
        }
    }
     #addLayer(path, middlewares, methods, options = {
    }) {
        const { end , name: name3 , sensitive =this.#opts.sensitive , strict =this.#opts.strict , ignoreCaptures ,  } = options;
        const route = new Layer(path, methods, middlewares, {
            end,
            name: name3,
            sensitive,
            strict,
            ignoreCaptures
        });
        if (this.#opts.prefix) {
            route.setPrefix(this.#opts.prefix);
        }
        for (const [param, mw] of Object.entries(this.#params)){
            route.param(param, mw);
        }
        this.#stack.push(route);
    }
     #route(name) {
        for (const route of this.#stack){
            if (route.name === name) {
                return route;
            }
        }
    }
     #useVerb(nameOrPath, pathOrMiddleware, middleware, methods) {
        let name3 = undefined;
        let path3;
        if (typeof pathOrMiddleware === "string") {
            name3 = nameOrPath;
            path3 = pathOrMiddleware;
        } else {
            path3 = nameOrPath;
            middleware.unshift(pathOrMiddleware);
        }
        this.#register(path3, middleware, methods, {
            name: name3
        });
    }
     #clone() {
        const router = new Router(this.#opts);
        router.#methods = router.#methods.slice();
        router.#params = {
            ...this.#params
        };
        router.#stack = this.#stack.map((layer)=>layer.clone()
        );
        return router;
    }
    constructor(opts1 = {
    }){
        this.#opts = opts1;
        this.#methods = opts1.methods ?? [
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT", 
        ];
    }
    all(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "DELETE",
            "GET",
            "POST",
            "PUT"
        ]);
        return this;
    }
    allowedMethods(options = {
    }) {
        const implemented = this.#methods;
        const allowedMethods = async (context3, next)=>{
            const ctx = context3;
            await next();
            if (!ctx.response.status || ctx.response.status === Status.NotFound) {
                assert1(ctx.matched);
                const allowed = new Set();
                for (const route of ctx.matched){
                    for (const method of route.methods){
                        allowed.add(method);
                    }
                }
                const allowedStr = [
                    ...allowed
                ].join(", ");
                if (!implemented.includes(ctx.request.method)) {
                    if (options.throw) {
                        throw options.notImplemented ? options.notImplemented() : new httpErrors.NotImplemented();
                    } else {
                        ctx.response.status = Status.NotImplemented;
                        ctx.response.headers.set("Allowed", allowedStr);
                    }
                } else if (allowed.size) {
                    if (ctx.request.method === "OPTIONS") {
                        ctx.response.status = Status.OK;
                        ctx.response.headers.set("Allowed", allowedStr);
                    } else if (!allowed.has(ctx.request.method)) {
                        if (options.throw) {
                            throw options.methodNotAllowed ? options.methodNotAllowed() : new httpErrors.MethodNotAllowed();
                        } else {
                            ctx.response.status = Status.MethodNotAllowed;
                            ctx.response.headers.set("Allowed", allowedStr);
                        }
                    }
                }
            }
        };
        return allowedMethods;
    }
    delete(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "DELETE"
        ]);
        return this;
    }
    *entries() {
        for (const route of this.#stack){
            const value4 = route.toJSON();
            yield [
                value4,
                value4
            ];
        }
    }
    forEach(callback, thisArg = null) {
        for (const route of this.#stack){
            const value4 = route.toJSON();
            callback.call(thisArg, value4, value4, this);
        }
    }
    get(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "GET"
        ]);
        return this;
    }
    head(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "HEAD"
        ]);
        return this;
    }
    *keys() {
        for (const route of this.#stack){
            yield route.toJSON();
        }
    }
    options(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "OPTIONS"
        ]);
        return this;
    }
    param(param, middleware) {
        this.#params[param] = middleware;
        for (const route of this.#stack){
            route.param(param, middleware);
        }
        return this;
    }
    patch(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "PATCH"
        ]);
        return this;
    }
    post(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "POST"
        ]);
        return this;
    }
    prefix(prefix) {
        prefix = prefix.replace(/\/$/, "");
        this.#opts.prefix = prefix;
        for (const route of this.#stack){
            route.setPrefix(prefix);
        }
        return this;
    }
    put(nameOrPath, pathOrMiddleware, ...middleware) {
        this.#useVerb(nameOrPath, pathOrMiddleware, middleware, [
            "PUT"
        ]);
        return this;
    }
    redirect(source, destination, status = Status.Found) {
        if (source[0] !== "/") {
            const s1 = this.url(source);
            if (!s1) {
                throw new RangeError(`Could not resolve named route: "${source}"`);
            }
            source = s1;
        }
        if (typeof destination === "string") {
            if (destination[0] !== "/") {
                const d = this.url(destination);
                if (!d) {
                    try {
                        const url1 = new URL(destination);
                        destination = url1;
                    } catch  {
                        throw new RangeError(`Could not resolve named route: "${source}"`);
                    }
                } else {
                    destination = d;
                }
            }
        }
        this.all(source, async (ctx, next)=>{
            await next();
            ctx.response.redirect(destination);
            ctx.response.status = status;
        });
        return this;
    }
    routes() {
        const dispatch = (context3, next)=>{
            const ctx = context3;
            let pathname;
            let method;
            try {
                const { url: { pathname: p2  } , method: m  } = ctx.request;
                pathname = p2;
                method = m;
            } catch (e) {
                return Promise.reject(e);
            }
            const path3 = (this.#opts.routerPath ?? ctx.routerPath) ?? decodeURIComponent(pathname);
            const matches1 = this.#match(path3, method);
            if (ctx.matched) {
                ctx.matched.push(...matches1.path);
            } else {
                ctx.matched = [
                    ...matches1.path
                ];
            }
            ctx.router = this;
            if (!matches1.route) return next();
            const { pathAndMethod: matchedRoutes  } = matches1;
            const chain = matchedRoutes.reduce((prev, route)=>[
                    ...prev,
                    (ctx1, next1)=>{
                        ctx1.captures = route.captures(path3);
                        ctx1.params = route.params(ctx1.captures, ctx1.params);
                        ctx1.routeName = route.name;
                        return next1();
                    },
                    ...route.stack, 
                ]
            , []);
            return compose(chain)(ctx, next);
        };
        dispatch.router = this;
        return dispatch;
    }
    url(name, params, options) {
        const route = this.#route(name);
        if (route) {
            return route.url(params, options);
        }
    }
    use(pathOrMiddleware, ...middleware) {
        let path3;
        if (typeof pathOrMiddleware === "string" || Array.isArray(pathOrMiddleware)) {
            path3 = pathOrMiddleware;
        } else {
            middleware.unshift(pathOrMiddleware);
        }
        this.#register(path3 ?? "(.*)", middleware, [], {
            end: false,
            ignoreCaptures: !path3,
            ignorePrefix: !path3
        });
        return this;
    }
    *values() {
        for (const route of this.#stack){
            yield route.toJSON();
        }
    }
    *[Symbol.iterator]() {
        for (const route of this.#stack){
            yield route.toJSON();
        }
    }
    static url(path, params, options) {
        return toUrl(path, params, options);
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({
            "#params": this.#params,
            "#stack": this.#stack
        })}`;
    }
}
var exports = {
}, _dewExec = false;
function dew() {
    if (_dewExec) return exports;
    _dewExec = true;
    exports.__esModule = true;
    exports.extend = extend;
    exports.indexOf = indexOf;
    exports.escapeExpression = escapeExpression;
    exports.isEmpty = isEmpty;
    exports.createFrame = createFrame;
    exports.blockParams = blockParams;
    exports.appendContextPath = appendContextPath;
    var escape = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;'
    };
    var badChars = /[&<>"'`=]/g, possible = /[&<>"'`=]/;
    function escapeChar(chr) {
        return escape[chr];
    }
    function extend(obj) {
        for(var i = 1; i < arguments.length; i++){
            for(var key3 in arguments[i]){
                if (Object.prototype.hasOwnProperty.call(arguments[i], key3)) {
                    obj[key3] = arguments[i][key3];
                }
            }
        }
        return obj;
    }
    var toString = Object.prototype.toString;
    exports.toString = toString;
    var isFunction = function isFunction1(value4) {
        return typeof value4 === 'function';
    };
    if (isFunction(/x/)) {
        exports.isFunction = isFunction = function(value4) {
            return typeof value4 === 'function' && toString.call(value4) === '[object Function]';
        };
    }
    exports.isFunction = isFunction;
    var isArray = Array.isArray || function(value4) {
        return value4 && typeof value4 === 'object' ? toString.call(value4) === '[object Array]' : false;
    };
    exports.isArray = isArray;
    function indexOf(array, value4) {
        for(var i = 0, len = array.length; i < len; i++){
            if (array[i] === value4) {
                return i;
            }
        }
        return -1;
    }
    function escapeExpression(string) {
        if (typeof string !== 'string') {
            if (string && string.toHTML) {
                return string.toHTML();
            } else if (string == null) {
                return '';
            } else if (!string) {
                return string + '';
            }
            string = '' + string;
        }
        if (!possible.test(string)) {
            return string;
        }
        return string.replace(badChars, escapeChar);
    }
    function isEmpty(value4) {
        if (!value4 && value4 !== 0) {
            return true;
        } else if (isArray(value4) && value4.length === 0) {
            return true;
        } else {
            return false;
        }
    }
    function createFrame(object) {
        var frame = extend({
        }, object);
        frame._parent = object;
        return frame;
    }
    function blockParams(params, ids) {
        params.path = ids;
        return params;
    }
    function appendContextPath(contextPath, id1) {
        return (contextPath ? contextPath + '.' : '') + id1;
    }
    return exports;
}
var exports1 = {
}, _dewExec1 = false;
function dew1() {
    if (_dewExec1) return exports1;
    _dewExec1 = true;
    exports1.__esModule = true;
    var errorProps = [
        'description',
        'fileName',
        'lineNumber',
        'endLineNumber',
        'message',
        'name',
        'number',
        'stack'
    ];
    function Exception(message3, node) {
        var loc = node && node.loc, line = undefined, endLineNumber = undefined, column = undefined, endColumn = undefined;
        if (loc) {
            line = loc.start.line;
            endLineNumber = loc.end.line;
            column = loc.start.column;
            endColumn = loc.end.column;
            message3 += ' - ' + line + ':' + column;
        }
        var tmp = Error.prototype.constructor.call(this, message3);
        for(var idx = 0; idx < errorProps.length; idx++){
            this[errorProps[idx]] = tmp[errorProps[idx]];
        }
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, Exception);
        }
        try {
            if (loc) {
                this.lineNumber = line;
                this.endLineNumber = endLineNumber;
                if (Object.defineProperty) {
                    Object.defineProperty(this, 'column', {
                        value: column,
                        enumerable: true
                    });
                    Object.defineProperty(this, 'endColumn', {
                        value: endColumn,
                        enumerable: true
                    });
                } else {
                    this.column = column;
                    this.endColumn = endColumn;
                }
            }
        } catch (nop) {
        }
    }
    Exception.prototype = new Error();
    exports1['default'] = Exception;
    exports1 = exports1['default'];
    return exports1;
}
var exports2 = {
}, _dewExec2 = false;
function dew2() {
    if (_dewExec2) return exports2;
    _dewExec2 = true;
    exports2.__esModule = true;
    var _utils = dew();
    exports2['default'] = function(instance) {
        instance.registerHelper('blockHelperMissing', function(context3, options6) {
            var inverse = options6.inverse, fn = options6.fn;
            if (context3 === true) {
                return fn(this);
            } else if (context3 === false || context3 == null) {
                return inverse(this);
            } else if (_utils.isArray(context3)) {
                if (context3.length > 0) {
                    if (options6.ids) {
                        options6.ids = [
                            options6.name
                        ];
                    }
                    return instance.helpers.each(context3, options6);
                } else {
                    return inverse(this);
                }
            } else {
                if (options6.data && options6.ids) {
                    var data3 = _utils.createFrame(options6.data);
                    data3.contextPath = _utils.appendContextPath(options6.data.contextPath, options6.name);
                    options6 = {
                        data: data3
                    };
                }
                return fn(context3, options6);
            }
        });
    };
    exports2 = exports2['default'];
    return exports2;
}
var exports3 = {
}, _dewExec3 = false;
var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew3() {
    if (_dewExec3) return exports3;
    _dewExec3 = true;
    exports3.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _utils = dew();
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    exports3['default'] = function(instance) {
        instance.registerHelper('each', function(context3, options6) {
            if (!options6) {
                throw new _exception2['default']('Must pass iterator to #each');
            }
            var fn = options6.fn, inverse = options6.inverse, i = 0, ret2 = '', data4 = undefined, contextPath = undefined;
            if (options6.data && options6.ids) {
                contextPath = _utils.appendContextPath(options6.data.contextPath, options6.ids[0]) + '.';
            }
            if (_utils.isFunction(context3)) {
                context3 = context3.call(this);
            }
            if (options6.data) {
                data4 = _utils.createFrame(options6.data);
            }
            function execIteration(field, index, last) {
                if (data4) {
                    data4.key = field;
                    data4.index = index;
                    data4.first = index === 0;
                    data4.last = !!last;
                    if (contextPath) {
                        data4.contextPath = contextPath + field;
                    }
                }
                ret2 = ret2 + fn(context3[field], {
                    data: data4,
                    blockParams: _utils.blockParams([
                        context3[field],
                        field
                    ], [
                        contextPath + field,
                        null
                    ])
                });
            }
            if (context3 && typeof context3 === 'object') {
                if (_utils.isArray(context3)) {
                    for(var j = context3.length; i < j; i++){
                        if (i in context3) {
                            execIteration(i, i, i === context3.length - 1);
                        }
                    }
                } else if (_global.Symbol && context3[_global.Symbol.iterator]) {
                    var newContext = [];
                    var iterator = context3[_global.Symbol.iterator]();
                    for(var it = iterator.next(); !it.done; it = iterator.next()){
                        newContext.push(it.value);
                    }
                    context3 = newContext;
                    for(var j = context3.length; i < j; i++){
                        execIteration(i, i, i === context3.length - 1);
                    }
                } else {
                    (function() {
                        var priorKey = undefined;
                        Object.keys(context3).forEach(function(key4) {
                            if (priorKey !== undefined) {
                                execIteration(priorKey, i - 1);
                            }
                            priorKey = key4;
                            i++;
                        });
                        if (priorKey !== undefined) {
                            execIteration(priorKey, i - 1, true);
                        }
                    })();
                }
            }
            if (i === 0) {
                ret2 = inverse(this);
            }
            return ret2;
        });
    };
    exports3 = exports3['default'];
    return exports3;
}
var exports4 = {
}, _dewExec4 = false;
function dew4() {
    if (_dewExec4) return exports4;
    _dewExec4 = true;
    exports4.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    exports4['default'] = function(instance) {
        instance.registerHelper('helperMissing', function() {
            if (arguments.length === 1) {
                return undefined;
            } else {
                throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
            }
        });
    };
    exports4 = exports4['default'];
    return exports4;
}
var exports5 = {
}, _dewExec5 = false;
function dew5() {
    if (_dewExec5) return exports5;
    _dewExec5 = true;
    exports5.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _utils = dew();
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    exports5['default'] = function(instance) {
        instance.registerHelper('if', function(conditional, options6) {
            if (arguments.length != 2) {
                throw new _exception2['default']('#if requires exactly one argument');
            }
            if (_utils.isFunction(conditional)) {
                conditional = conditional.call(this);
            }
            if (!options6.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
                return options6.inverse(this);
            } else {
                return options6.fn(this);
            }
        });
        instance.registerHelper('unless', function(conditional, options6) {
            if (arguments.length != 2) {
                throw new _exception2['default']('#unless requires exactly one argument');
            }
            return instance.helpers['if'].call(this, conditional, {
                fn: options6.inverse,
                inverse: options6.fn,
                hash: options6.hash
            });
        });
    };
    exports5 = exports5['default'];
    return exports5;
}
var exports6 = {
}, _dewExec6 = false;
function dew6() {
    if (_dewExec6) return exports6;
    _dewExec6 = true;
    exports6.__esModule = true;
    exports6['default'] = function(instance) {
        instance.registerHelper('log', function() {
            var args = [
                undefined
            ], options6 = arguments[arguments.length - 1];
            for(var i = 0; i < arguments.length - 1; i++){
                args.push(arguments[i]);
            }
            var level = 1;
            if (options6.hash.level != null) {
                level = options6.hash.level;
            } else if (options6.data && options6.data.level != null) {
                level = options6.data.level;
            }
            args[0] = level;
            instance.log.apply(instance, args);
        });
    };
    exports6 = exports6['default'];
    return exports6;
}
var exports7 = {
}, _dewExec7 = false;
function dew7() {
    if (_dewExec7) return exports7;
    _dewExec7 = true;
    exports7.__esModule = true;
    exports7['default'] = function(instance) {
        instance.registerHelper('lookup', function(obj, field, options6) {
            if (!obj) {
                return obj;
            }
            return options6.lookupProperty(obj, field);
        });
    };
    exports7 = exports7['default'];
    return exports7;
}
var exports8 = {
}, _dewExec8 = false;
function dew8() {
    if (_dewExec8) return exports8;
    _dewExec8 = true;
    exports8.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _utils = dew();
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    exports8['default'] = function(instance) {
        instance.registerHelper('with', function(context3, options6) {
            if (arguments.length != 2) {
                throw new _exception2['default']('#with requires exactly one argument');
            }
            if (_utils.isFunction(context3)) {
                context3 = context3.call(this);
            }
            var fn = options6.fn;
            if (!_utils.isEmpty(context3)) {
                var data4 = options6.data;
                if (options6.data && options6.ids) {
                    data4 = _utils.createFrame(options6.data);
                    data4.contextPath = _utils.appendContextPath(options6.data.contextPath, options6.ids[0]);
                }
                return fn(context3, {
                    data: data4,
                    blockParams: _utils.blockParams([
                        context3
                    ], [
                        data4 && data4.contextPath
                    ])
                });
            } else {
                return options6.inverse(this);
            }
        });
    };
    exports8 = exports8['default'];
    return exports8;
}
var exports9 = {
}, _dewExec9 = false;
function dew9() {
    if (_dewExec9) return exports9;
    _dewExec9 = true;
    exports9.__esModule = true;
    exports9.registerDefaultHelpers = registerDefaultHelpers;
    exports9.moveHelperToHooks = moveHelperToHooks;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _helpersBlockHelperMissing = dew2();
    var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
    var _helpersEach = dew3();
    var _helpersEach2 = _interopRequireDefault(_helpersEach);
    var _helpersHelperMissing = dew4();
    var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
    var _helpersIf = dew5();
    var _helpersIf2 = _interopRequireDefault(_helpersIf);
    var _helpersLog = dew6();
    var _helpersLog2 = _interopRequireDefault(_helpersLog);
    var _helpersLookup = dew7();
    var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
    var _helpersWith = dew8();
    var _helpersWith2 = _interopRequireDefault(_helpersWith);
    function registerDefaultHelpers(instance) {
        _helpersBlockHelperMissing2['default'](instance);
        _helpersEach2['default'](instance);
        _helpersHelperMissing2['default'](instance);
        _helpersIf2['default'](instance);
        _helpersLog2['default'](instance);
        _helpersLookup2['default'](instance);
        _helpersWith2['default'](instance);
    }
    function moveHelperToHooks(instance, helperName, keepHelper) {
        if (instance.helpers[helperName]) {
            instance.hooks[helperName] = instance.helpers[helperName];
            if (!keepHelper) {
                delete instance.helpers[helperName];
            }
        }
    }
    return exports9;
}
var exports10 = {
}, _dewExec10 = false;
function dew10() {
    if (_dewExec10) return exports10;
    _dewExec10 = true;
    exports10.__esModule = true;
    var _utils = dew();
    exports10['default'] = function(instance) {
        instance.registerDecorator('inline', function(fn, props, container, options6) {
            var ret2 = fn;
            if (!props.partials) {
                props.partials = {
                };
                ret2 = function(context3, options7) {
                    var original = container.partials;
                    container.partials = _utils.extend({
                    }, original, props.partials);
                    var ret3 = fn(context3, options7);
                    container.partials = original;
                    return ret3;
                };
            }
            props.partials[options6.args[0]] = options6.fn;
            return ret2;
        });
    };
    exports10 = exports10['default'];
    return exports10;
}
var exports11 = {
}, _dewExec11 = false;
function dew11() {
    if (_dewExec11) return exports11;
    _dewExec11 = true;
    exports11.__esModule = true;
    exports11.registerDefaultDecorators = registerDefaultDecorators;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _decoratorsInline = dew10();
    var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
    function registerDefaultDecorators(instance) {
        _decoratorsInline2['default'](instance);
    }
    return exports11;
}
var exports12 = {
}, _dewExec12 = false;
function dew12() {
    if (_dewExec12) return exports12;
    _dewExec12 = true;
    exports12.__esModule = true;
    var _utils = dew();
    var logger = {
        methodMap: [
            'debug',
            'info',
            'warn',
            'error'
        ],
        level: 'info',
        lookupLevel: function lookupLevel(level) {
            if (typeof level === 'string') {
                var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
                if (levelMap >= 0) {
                    level = levelMap;
                } else {
                    level = parseInt(level, 10);
                }
            }
            return level;
        },
        log: function log(level) {
            level = logger.lookupLevel(level);
            if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
                var method = logger.methodMap[level];
                if (!console[method]) {
                    method = 'log';
                }
                for(var _len = arguments.length, message3 = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    message3[_key - 1] = arguments[_key];
                }
                console[method].apply(console, message3);
            }
        }
    };
    exports12['default'] = logger;
    exports12 = exports12['default'];
    return exports12;
}
var exports13 = {
}, _dewExec13 = false;
function dew13() {
    if (_dewExec13) return exports13;
    _dewExec13 = true;
    exports13.__esModule = true;
    exports13.createNewLookupObject = createNewLookupObject;
    var _utils = dew();
    function createNewLookupObject() {
        for(var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++){
            sources[_key] = arguments[_key];
        }
        return _utils.extend.apply(undefined, [
            Object.create(null)
        ].concat(sources));
    }
    return exports13;
}
var exports14 = {
}, _dewExec14 = false;
function dew14() {
    if (_dewExec14) return exports14;
    _dewExec14 = true;
    exports14.__esModule = true;
    exports14.createProtoAccessControl = createProtoAccessControl;
    exports14.resultIsAllowed = resultIsAllowed;
    exports14.resetLoggedProperties = resetLoggedProperties;
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {
            };
            if (obj != null) {
                for(var key4 in obj){
                    if (Object.prototype.hasOwnProperty.call(obj, key4)) newObj[key4] = obj[key4];
                }
            }
            newObj['default'] = obj;
            return newObj;
        }
    }
    var _createNewLookupObject = dew13();
    var _logger = dew12();
    var logger = _interopRequireWildcard(_logger);
    var loggedProperties = Object.create(null);
    function createProtoAccessControl(runtimeOptions) {
        var defaultMethodWhiteList = Object.create(null);
        defaultMethodWhiteList['constructor'] = false;
        defaultMethodWhiteList['__defineGetter__'] = false;
        defaultMethodWhiteList['__defineSetter__'] = false;
        defaultMethodWhiteList['__lookupGetter__'] = false;
        var defaultPropertyWhiteList = Object.create(null);
        defaultPropertyWhiteList['__proto__'] = false;
        return {
            properties: {
                whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
                defaultValue: runtimeOptions.allowProtoPropertiesByDefault
            },
            methods: {
                whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
                defaultValue: runtimeOptions.allowProtoMethodsByDefault
            }
        };
    }
    function resultIsAllowed(result, protoAccessControl, propertyName) {
        if (typeof result === 'function') {
            return checkWhiteList(protoAccessControl.methods, propertyName);
        } else {
            return checkWhiteList(protoAccessControl.properties, propertyName);
        }
    }
    function checkWhiteList(protoAccessControlForType, propertyName) {
        if (protoAccessControlForType.whitelist[propertyName] !== undefined) {
            return protoAccessControlForType.whitelist[propertyName] === true;
        }
        if (protoAccessControlForType.defaultValue !== undefined) {
            return protoAccessControlForType.defaultValue;
        }
        logUnexpecedPropertyAccessOnce(propertyName);
        return false;
    }
    function logUnexpecedPropertyAccessOnce(propertyName) {
        if (loggedProperties[propertyName] !== true) {
            loggedProperties[propertyName] = true;
            logger.log('error', 'Handlebars: Access has been denied to resolve the property "' + propertyName + '" because it is not an "own property" of its parent.\n' + 'You can add a runtime option to disable the check or this warning:\n' + 'See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');
        }
    }
    function resetLoggedProperties() {
        Object.keys(loggedProperties).forEach(function(propertyName) {
            delete loggedProperties[propertyName];
        });
    }
    return exports14;
}
var exports15 = {
}, _dewExec15 = false;
function dew15() {
    if (_dewExec15) return exports15;
    _dewExec15 = true;
    exports15.__esModule = true;
    exports15.HandlebarsEnvironment = HandlebarsEnvironment;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _utils = dew();
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    var _helpers = dew9();
    var _decorators = dew11();
    var _logger = dew12();
    var _logger2 = _interopRequireDefault(_logger);
    var _internalProtoAccess = dew14();
    var VERSION = '4.7.6';
    exports15.VERSION = VERSION;
    var COMPILER_REVISION = 8;
    exports15.COMPILER_REVISION = COMPILER_REVISION;
    var LAST_COMPATIBLE_COMPILER_REVISION = 7;
    exports15.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
    var REVISION_CHANGES = {
        1: '<= 1.0.rc.2',
        2: '== 1.0.0-rc.3',
        3: '== 1.0.0-rc.4',
        4: '== 1.x.x',
        5: '== 2.0.0-alpha.x',
        6: '>= 2.0.0-beta.1',
        7: '>= 4.0.0 <4.3.0',
        8: '>= 4.3.0'
    };
    exports15.REVISION_CHANGES = REVISION_CHANGES;
    var objectType = '[object Object]';
    function HandlebarsEnvironment(helpers, partials, decorators) {
        this.helpers = helpers || {
        };
        this.partials = partials || {
        };
        this.decorators = decorators || {
        };
        _helpers.registerDefaultHelpers(this);
        _decorators.registerDefaultDecorators(this);
    }
    HandlebarsEnvironment.prototype = {
        constructor: HandlebarsEnvironment,
        logger: _logger2['default'],
        log: _logger2['default'].log,
        registerHelper: function registerHelper(name3, fn) {
            if (_utils.toString.call(name3) === objectType) {
                if (fn) {
                    throw new _exception2['default']('Arg not supported with multiple helpers');
                }
                _utils.extend(this.helpers, name3);
            } else {
                this.helpers[name3] = fn;
            }
        },
        unregisterHelper: function unregisterHelper(name3) {
            delete this.helpers[name3];
        },
        registerPartial: function registerPartial(name3, partial3) {
            if (_utils.toString.call(name3) === objectType) {
                _utils.extend(this.partials, name3);
            } else {
                if (typeof partial3 === 'undefined') {
                    throw new _exception2['default']('Attempting to register a partial called "' + name3 + '" as undefined');
                }
                this.partials[name3] = partial3;
            }
        },
        unregisterPartial: function unregisterPartial(name3) {
            delete this.partials[name3];
        },
        registerDecorator: function registerDecorator(name3, fn) {
            if (_utils.toString.call(name3) === objectType) {
                if (fn) {
                    throw new _exception2['default']('Arg not supported with multiple decorators');
                }
                _utils.extend(this.decorators, name3);
            } else {
                this.decorators[name3] = fn;
            }
        },
        unregisterDecorator: function unregisterDecorator(name3) {
            delete this.decorators[name3];
        },
        resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
            _internalProtoAccess.resetLoggedProperties();
        }
    };
    var log = _logger2['default'].log;
    exports15.log = log;
    exports15.createFrame = _utils.createFrame;
    exports15.logger = _logger2['default'];
    return exports15;
}
var exports16 = {
}, _dewExec16 = false;
function dew16() {
    if (_dewExec16) return exports16;
    _dewExec16 = true;
    exports16.__esModule = true;
    function SafeString(string) {
        this.string = string;
    }
    SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
        return '' + this.string;
    };
    exports16['default'] = SafeString;
    exports16 = exports16['default'];
    return exports16;
}
var exports17 = {
}, _dewExec17 = false;
function dew17() {
    if (_dewExec17) return exports17;
    _dewExec17 = true;
    exports17.__esModule = true;
    exports17.wrapHelper = wrapHelper;
    function wrapHelper(helper, transformOptionsFn) {
        if (typeof helper !== 'function') {
            return helper;
        }
        var wrapper = function wrapper1() {
            var options6 = arguments[arguments.length - 1];
            arguments[arguments.length - 1] = transformOptionsFn(options6);
            return helper.apply(this, arguments);
        };
        return wrapper;
    }
    return exports17;
}
var exports18 = {
}, _dewExec18 = false;
function dew18() {
    if (_dewExec18) return exports18;
    _dewExec18 = true;
    exports18.__esModule = true;
    exports18.checkRevision = checkRevision;
    exports18.template = template;
    exports18.wrapProgram = wrapProgram;
    exports18.resolvePartial = resolvePartial;
    exports18.invokePartial = invokePartial;
    exports18.noop = noop2;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {
            };
            if (obj != null) {
                for(var key5 in obj){
                    if (Object.prototype.hasOwnProperty.call(obj, key5)) newObj[key5] = obj[key5];
                }
            }
            newObj['default'] = obj;
            return newObj;
        }
    }
    var _utils = dew();
    var Utils = _interopRequireWildcard(_utils);
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    var _base = dew15();
    var _helpers = dew9();
    var _internalWrapHelper = dew17();
    var _internalProtoAccess = dew14();
    function checkRevision(compilerInfo) {
        var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = _base.COMPILER_REVISION;
        if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
            return;
        }
        if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
            var runtimeVersions = _base.REVISION_CHANGES[currentRevision], compilerVersions = _base.REVISION_CHANGES[compilerRevision];
            throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
        } else {
            throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
        }
    }
    function template(templateSpec, env) {
        if (!env) {
            throw new _exception2['default']('No environment passed to template');
        }
        if (!templateSpec || !templateSpec.main) {
            throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
        }
        templateSpec.main.decorator = templateSpec.main_d;
        env.VM.checkRevision(templateSpec.compiler);
        var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;
        function invokePartialWrapper(partial3, context3, options6) {
            if (options6.hash) {
                context3 = Utils.extend({
                }, context3, options6.hash);
                if (options6.ids) {
                    options6.ids[0] = true;
                }
            }
            partial3 = env.VM.resolvePartial.call(this, partial3, context3, options6);
            var extendedOptions = Utils.extend({
            }, options6, {
                hooks: this.hooks,
                protoAccessControl: this.protoAccessControl
            });
            var result = env.VM.invokePartial.call(this, partial3, context3, extendedOptions);
            if (result == null && env.compile) {
                options6.partials[options6.name] = env.compile(partial3, templateSpec.compilerOptions, env);
                result = options6.partials[options6.name](context3, extendedOptions);
            }
            if (result != null) {
                if (options6.indent) {
                    var lines = result.split('\n');
                    for(var i = 0, l = lines.length; i < l; i++){
                        if (!lines[i] && i + 1 === l) {
                            break;
                        }
                        lines[i] = options6.indent + lines[i];
                    }
                    result = lines.join('\n');
                }
                return result;
            } else {
                throw new _exception2['default']('The partial ' + options6.name + ' could not be compiled when running in runtime-only mode');
            }
        }
        var container = {
            strict: function strict(obj, name3, loc) {
                if (!obj || !(name3 in obj)) {
                    throw new _exception2['default']('"' + name3 + '" not defined in ' + obj, {
                        loc: loc
                    });
                }
                return obj[name3];
            },
            lookupProperty: function lookupProperty(parent, propertyName) {
                var result = parent[propertyName];
                if (result == null) {
                    return result;
                }
                if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
                    return result;
                }
                if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {
                    return result;
                }
                return undefined;
            },
            lookup: function lookup1(depths, name3) {
                var len = depths.length;
                for(var i = 0; i < len; i++){
                    var result = depths[i] && container.lookupProperty(depths[i], name3);
                    if (result != null) {
                        return depths[i][name3];
                    }
                }
            },
            lambda: function lambda(current, context3) {
                return typeof current === 'function' ? current.call(context3) : current;
            },
            escapeExpression: Utils.escapeExpression,
            invokePartial: invokePartialWrapper,
            fn: function fn(i) {
                var ret2 = templateSpec[i];
                ret2.decorator = templateSpec[i + '_d'];
                return ret2;
            },
            programs: [],
            program: function program(i, data5, declaredBlockParams, blockParams, depths) {
                var programWrapper = this.programs[i], fn1 = this.fn(i);
                if (data5 || depths || blockParams || declaredBlockParams) {
                    programWrapper = wrapProgram(this, i, fn1, data5, declaredBlockParams, blockParams, depths);
                } else if (!programWrapper) {
                    programWrapper = this.programs[i] = wrapProgram(this, i, fn1);
                }
                return programWrapper;
            },
            data: function data5(value4, depth) {
                while(value4 && depth--){
                    value4 = value4._parent;
                }
                return value4;
            },
            mergeIfNeeded: function mergeIfNeeded(param, common) {
                var obj = param || common;
                if (param && common && param !== common) {
                    obj = Utils.extend({
                    }, common, param);
                }
                return obj;
            },
            nullContext: Object.seal({
            }),
            noop: env.VM.noop,
            compilerInfo: templateSpec.compiler
        };
        function ret2(context3) {
            var options6 = arguments.length <= 1 || arguments[1] === undefined ? {
            } : arguments[1];
            var data5 = options6.data;
            ret2._setup(options6);
            if (!options6.partial && templateSpec.useData) {
                data5 = initData(context3, data5);
            }
            var depths = undefined, blockParams = templateSpec.useBlockParams ? [] : undefined;
            if (templateSpec.useDepths) {
                if (options6.depths) {
                    depths = context3 != options6.depths[0] ? [
                        context3
                    ].concat(options6.depths) : options6.depths;
                } else {
                    depths = [
                        context3
                    ];
                }
            }
            function main(context4) {
                return '' + templateSpec.main(container, context4, container.helpers, container.partials, data5, blockParams, depths);
            }
            main = executeDecorators(templateSpec.main, main, container, options6.depths || [], data5, blockParams);
            return main(context3, options6);
        }
        ret2.isTop = true;
        ret2._setup = function(options6) {
            if (!options6.partial) {
                var mergedHelpers = Utils.extend({
                }, env.helpers, options6.helpers);
                wrapHelpersToPassLookupProperty(mergedHelpers, container);
                container.helpers = mergedHelpers;
                if (templateSpec.usePartial) {
                    container.partials = container.mergeIfNeeded(options6.partials, env.partials);
                }
                if (templateSpec.usePartial || templateSpec.useDecorators) {
                    container.decorators = Utils.extend({
                    }, env.decorators, options6.decorators);
                }
                container.hooks = {
                };
                container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options6);
                var keepHelperInHelpers = options6.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
                _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
                _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
            } else {
                container.protoAccessControl = options6.protoAccessControl;
                container.helpers = options6.helpers;
                container.partials = options6.partials;
                container.decorators = options6.decorators;
                container.hooks = options6.hooks;
            }
        };
        ret2._child = function(i, data5, blockParams, depths) {
            if (templateSpec.useBlockParams && !blockParams) {
                throw new _exception2['default']('must pass block params');
            }
            if (templateSpec.useDepths && !depths) {
                throw new _exception2['default']('must pass parent depths');
            }
            return wrapProgram(container, i, templateSpec[i], data5, 0, blockParams, depths);
        };
        return ret2;
    }
    function wrapProgram(container, i, fn, data5, declaredBlockParams, blockParams, depths) {
        function prog(context3) {
            var options6 = arguments.length <= 1 || arguments[1] === undefined ? {
            } : arguments[1];
            var currentDepths = depths;
            if (depths && context3 != depths[0] && !(context3 === container.nullContext && depths[0] === null)) {
                currentDepths = [
                    context3
                ].concat(depths);
            }
            return fn(container, context3, container.helpers, container.partials, options6.data || data5, blockParams && [
                options6.blockParams
            ].concat(blockParams), currentDepths);
        }
        prog = executeDecorators(fn, prog, container, depths, data5, blockParams);
        prog.program = i;
        prog.depth = depths ? depths.length : 0;
        prog.blockParams = declaredBlockParams || 0;
        return prog;
    }
    function resolvePartial(partial3, context3, options6) {
        if (!partial3) {
            if (options6.name === '@partial-block') {
                partial3 = options6.data['partial-block'];
            } else {
                partial3 = options6.partials[options6.name];
            }
        } else if (!partial3.call && !options6.name) {
            options6.name = partial3;
            partial3 = options6.partials[partial3];
        }
        return partial3;
    }
    function invokePartial(partial3, context3, options6) {
        var currentPartialBlock = options6.data && options6.data['partial-block'];
        options6.partial = true;
        if (options6.ids) {
            options6.data.contextPath = options6.ids[0] || options6.data.contextPath;
        }
        var partialBlock = undefined;
        if (options6.fn && options6.fn !== noop2) {
            (function() {
                options6.data = _base.createFrame(options6.data);
                var fn = options6.fn;
                partialBlock = options6.data['partial-block'] = function partialBlockWrapper(context4) {
                    var options7 = arguments.length <= 1 || arguments[1] === undefined ? {
                    } : arguments[1];
                    options7.data = _base.createFrame(options7.data);
                    options7.data['partial-block'] = currentPartialBlock;
                    return fn(context4, options7);
                };
                if (fn.partials) {
                    options6.partials = Utils.extend({
                    }, options6.partials, fn.partials);
                }
            })();
        }
        if (partial3 === undefined && partialBlock) {
            partial3 = partialBlock;
        }
        if (partial3 === undefined) {
            throw new _exception2['default']('The partial ' + options6.name + ' could not be found');
        } else if (partial3 instanceof Function) {
            return partial3(context3, options6);
        }
    }
    function noop2() {
        return '';
    }
    function initData(context3, data5) {
        if (!data5 || !('root' in data5)) {
            data5 = data5 ? _base.createFrame(data5) : {
            };
            data5.root = context3;
        }
        return data5;
    }
    function executeDecorators(fn, prog, container, depths, data5, blockParams) {
        if (fn.decorator) {
            var props = {
            };
            prog = fn.decorator(prog, props, container, depths && depths[0], data5, blockParams, depths);
            Utils.extend(prog, props);
        }
        return prog;
    }
    function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
        Object.keys(mergedHelpers).forEach(function(helperName) {
            var helper = mergedHelpers[helperName];
            mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
        });
    }
    function passLookupPropertyOption(helper, container) {
        var lookupProperty = container.lookupProperty;
        return _internalWrapHelper.wrapHelper(helper, function(options6) {
            return Utils.extend({
                lookupProperty: lookupProperty
            }, options6);
        });
    }
    return exports18;
}
var exports19 = {
}, _dewExec19 = false;
var _global1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew19() {
    if (_dewExec19) return exports19;
    _dewExec19 = true;
    exports19.__esModule = true;
    exports19['default'] = function(Handlebars) {
        var root = typeof _global1 !== 'undefined' ? _global1 : window, $Handlebars = root.Handlebars;
        Handlebars.noConflict = function() {
            if (root.Handlebars === Handlebars) {
                root.Handlebars = $Handlebars;
            }
            return Handlebars;
        };
    };
    exports19 = exports19['default'];
    return exports19;
}
var exports20 = {
}, _dewExec20 = false;
function dew20() {
    if (_dewExec20) return exports20;
    _dewExec20 = true;
    exports20.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {
            };
            if (obj != null) {
                for(var key6 in obj){
                    if (Object.prototype.hasOwnProperty.call(obj, key6)) newObj[key6] = obj[key6];
                }
            }
            newObj['default'] = obj;
            return newObj;
        }
    }
    var _handlebarsBase = dew15();
    var base = _interopRequireWildcard(_handlebarsBase);
    var _handlebarsSafeString = dew16();
    var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
    var _handlebarsException = dew1();
    var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
    var _handlebarsUtils = dew();
    var Utils = _interopRequireWildcard(_handlebarsUtils);
    var _handlebarsRuntime = dew18();
    var runtime = _interopRequireWildcard(_handlebarsRuntime);
    var _handlebarsNoConflict = dew19();
    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    function create() {
        var hb = new base.HandlebarsEnvironment();
        Utils.extend(hb, base);
        hb.SafeString = _handlebarsSafeString2['default'];
        hb.Exception = _handlebarsException2['default'];
        hb.Utils = Utils;
        hb.escapeExpression = Utils.escapeExpression;
        hb.VM = runtime;
        hb.template = function(spec) {
            return runtime.template(spec, hb);
        };
        return hb;
    }
    var inst = create();
    inst.create = create;
    _handlebarsNoConflict2['default'](inst);
    inst['default'] = inst;
    exports20['default'] = inst;
    exports20 = exports20['default'];
    return exports20;
}
var exports21 = {
}, _dewExec21 = false;
function dew21() {
    if (_dewExec21) return exports21;
    _dewExec21 = true;
    exports21.__esModule = true;
    var AST = {
        helpers: {
            helperExpression: function helperExpression(node) {
                return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
            },
            scopedId: function scopedId(path3) {
                return /^\.|this\b/.test(path3.original);
            },
            simpleId: function simpleId(path3) {
                return path3.parts.length === 1 && !AST.helpers.scopedId(path3) && !path3.depth;
            }
        }
    };
    exports21['default'] = AST;
    exports21 = exports21['default'];
    return exports21;
}
var exports22 = {
}, _dewExec22 = false;
function dew22() {
    if (_dewExec22) return exports22;
    _dewExec22 = true;
    exports22.__esModule = true;
    var handlebars = function() {
        var parser = {
            trace: function trace() {
            },
            yy: {
            },
            symbols_: {
                "error": 2,
                "root": 3,
                "program": 4,
                "EOF": 5,
                "program_repetition0": 6,
                "statement": 7,
                "mustache": 8,
                "block": 9,
                "rawBlock": 10,
                "partial": 11,
                "partialBlock": 12,
                "content": 13,
                "COMMENT": 14,
                "CONTENT": 15,
                "openRawBlock": 16,
                "rawBlock_repetition0": 17,
                "END_RAW_BLOCK": 18,
                "OPEN_RAW_BLOCK": 19,
                "helperName": 20,
                "openRawBlock_repetition0": 21,
                "openRawBlock_option0": 22,
                "CLOSE_RAW_BLOCK": 23,
                "openBlock": 24,
                "block_option0": 25,
                "closeBlock": 26,
                "openInverse": 27,
                "block_option1": 28,
                "OPEN_BLOCK": 29,
                "openBlock_repetition0": 30,
                "openBlock_option0": 31,
                "openBlock_option1": 32,
                "CLOSE": 33,
                "OPEN_INVERSE": 34,
                "openInverse_repetition0": 35,
                "openInverse_option0": 36,
                "openInverse_option1": 37,
                "openInverseChain": 38,
                "OPEN_INVERSE_CHAIN": 39,
                "openInverseChain_repetition0": 40,
                "openInverseChain_option0": 41,
                "openInverseChain_option1": 42,
                "inverseAndProgram": 43,
                "INVERSE": 44,
                "inverseChain": 45,
                "inverseChain_option0": 46,
                "OPEN_ENDBLOCK": 47,
                "OPEN": 48,
                "mustache_repetition0": 49,
                "mustache_option0": 50,
                "OPEN_UNESCAPED": 51,
                "mustache_repetition1": 52,
                "mustache_option1": 53,
                "CLOSE_UNESCAPED": 54,
                "OPEN_PARTIAL": 55,
                "partialName": 56,
                "partial_repetition0": 57,
                "partial_option0": 58,
                "openPartialBlock": 59,
                "OPEN_PARTIAL_BLOCK": 60,
                "openPartialBlock_repetition0": 61,
                "openPartialBlock_option0": 62,
                "param": 63,
                "sexpr": 64,
                "OPEN_SEXPR": 65,
                "sexpr_repetition0": 66,
                "sexpr_option0": 67,
                "CLOSE_SEXPR": 68,
                "hash": 69,
                "hash_repetition_plus0": 70,
                "hashSegment": 71,
                "ID": 72,
                "EQUALS": 73,
                "blockParams": 74,
                "OPEN_BLOCK_PARAMS": 75,
                "blockParams_repetition_plus0": 76,
                "CLOSE_BLOCK_PARAMS": 77,
                "path": 78,
                "dataName": 79,
                "STRING": 80,
                "NUMBER": 81,
                "BOOLEAN": 82,
                "UNDEFINED": 83,
                "NULL": 84,
                "DATA": 85,
                "pathSegments": 86,
                "SEP": 87,
                "$accept": 0,
                "$end": 1
            },
            terminals_: {
                2: "error",
                5: "EOF",
                14: "COMMENT",
                15: "CONTENT",
                18: "END_RAW_BLOCK",
                19: "OPEN_RAW_BLOCK",
                23: "CLOSE_RAW_BLOCK",
                29: "OPEN_BLOCK",
                33: "CLOSE",
                34: "OPEN_INVERSE",
                39: "OPEN_INVERSE_CHAIN",
                44: "INVERSE",
                47: "OPEN_ENDBLOCK",
                48: "OPEN",
                51: "OPEN_UNESCAPED",
                54: "CLOSE_UNESCAPED",
                55: "OPEN_PARTIAL",
                60: "OPEN_PARTIAL_BLOCK",
                65: "OPEN_SEXPR",
                68: "CLOSE_SEXPR",
                72: "ID",
                73: "EQUALS",
                75: "OPEN_BLOCK_PARAMS",
                77: "CLOSE_BLOCK_PARAMS",
                80: "STRING",
                81: "NUMBER",
                82: "BOOLEAN",
                83: "UNDEFINED",
                84: "NULL",
                85: "DATA",
                87: "SEP"
            },
            productions_: [
                0,
                [
                    3,
                    2
                ],
                [
                    4,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    7,
                    1
                ],
                [
                    13,
                    1
                ],
                [
                    10,
                    3
                ],
                [
                    16,
                    5
                ],
                [
                    9,
                    4
                ],
                [
                    9,
                    4
                ],
                [
                    24,
                    6
                ],
                [
                    27,
                    6
                ],
                [
                    38,
                    6
                ],
                [
                    43,
                    2
                ],
                [
                    45,
                    3
                ],
                [
                    45,
                    1
                ],
                [
                    26,
                    3
                ],
                [
                    8,
                    5
                ],
                [
                    8,
                    5
                ],
                [
                    11,
                    5
                ],
                [
                    12,
                    3
                ],
                [
                    59,
                    5
                ],
                [
                    63,
                    1
                ],
                [
                    63,
                    1
                ],
                [
                    64,
                    5
                ],
                [
                    69,
                    1
                ],
                [
                    71,
                    3
                ],
                [
                    74,
                    3
                ],
                [
                    20,
                    1
                ],
                [
                    20,
                    1
                ],
                [
                    20,
                    1
                ],
                [
                    20,
                    1
                ],
                [
                    20,
                    1
                ],
                [
                    20,
                    1
                ],
                [
                    20,
                    1
                ],
                [
                    56,
                    1
                ],
                [
                    56,
                    1
                ],
                [
                    79,
                    2
                ],
                [
                    78,
                    1
                ],
                [
                    86,
                    3
                ],
                [
                    86,
                    1
                ],
                [
                    6,
                    0
                ],
                [
                    6,
                    2
                ],
                [
                    17,
                    0
                ],
                [
                    17,
                    2
                ],
                [
                    21,
                    0
                ],
                [
                    21,
                    2
                ],
                [
                    22,
                    0
                ],
                [
                    22,
                    1
                ],
                [
                    25,
                    0
                ],
                [
                    25,
                    1
                ],
                [
                    28,
                    0
                ],
                [
                    28,
                    1
                ],
                [
                    30,
                    0
                ],
                [
                    30,
                    2
                ],
                [
                    31,
                    0
                ],
                [
                    31,
                    1
                ],
                [
                    32,
                    0
                ],
                [
                    32,
                    1
                ],
                [
                    35,
                    0
                ],
                [
                    35,
                    2
                ],
                [
                    36,
                    0
                ],
                [
                    36,
                    1
                ],
                [
                    37,
                    0
                ],
                [
                    37,
                    1
                ],
                [
                    40,
                    0
                ],
                [
                    40,
                    2
                ],
                [
                    41,
                    0
                ],
                [
                    41,
                    1
                ],
                [
                    42,
                    0
                ],
                [
                    42,
                    1
                ],
                [
                    46,
                    0
                ],
                [
                    46,
                    1
                ],
                [
                    49,
                    0
                ],
                [
                    49,
                    2
                ],
                [
                    50,
                    0
                ],
                [
                    50,
                    1
                ],
                [
                    52,
                    0
                ],
                [
                    52,
                    2
                ],
                [
                    53,
                    0
                ],
                [
                    53,
                    1
                ],
                [
                    57,
                    0
                ],
                [
                    57,
                    2
                ],
                [
                    58,
                    0
                ],
                [
                    58,
                    1
                ],
                [
                    61,
                    0
                ],
                [
                    61,
                    2
                ],
                [
                    62,
                    0
                ],
                [
                    62,
                    1
                ],
                [
                    66,
                    0
                ],
                [
                    66,
                    2
                ],
                [
                    67,
                    0
                ],
                [
                    67,
                    1
                ],
                [
                    70,
                    1
                ],
                [
                    70,
                    2
                ],
                [
                    76,
                    1
                ],
                [
                    76,
                    2
                ]
            ],
            performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
                var $0 = $$.length - 1;
                switch(yystate){
                    case 1:
                        return $$[$0 - 1];
                        break;
                    case 2:
                        this.$ = yy.prepareProgram($$[$0]);
                        break;
                    case 3:
                        this.$ = $$[$0];
                        break;
                    case 4:
                        this.$ = $$[$0];
                        break;
                    case 5:
                        this.$ = $$[$0];
                        break;
                    case 6:
                        this.$ = $$[$0];
                        break;
                    case 7:
                        this.$ = $$[$0];
                        break;
                    case 8:
                        this.$ = $$[$0];
                        break;
                    case 9:
                        this.$ = {
                            type: 'CommentStatement',
                            value: yy.stripComment($$[$0]),
                            strip: yy.stripFlags($$[$0], $$[$0]),
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 10:
                        this.$ = {
                            type: 'ContentStatement',
                            original: $$[$0],
                            value: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 11:
                        this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                        break;
                    case 12:
                        this.$ = {
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1]
                        };
                        break;
                    case 13:
                        this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                        break;
                    case 14:
                        this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                        break;
                    case 15:
                        this.$ = {
                            open: $$[$0 - 5],
                            path: $$[$0 - 4],
                            params: $$[$0 - 3],
                            hash: $$[$0 - 2],
                            blockParams: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 5], $$[$0])
                        };
                        break;
                    case 16:
                        this.$ = {
                            path: $$[$0 - 4],
                            params: $$[$0 - 3],
                            hash: $$[$0 - 2],
                            blockParams: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 5], $$[$0])
                        };
                        break;
                    case 17:
                        this.$ = {
                            path: $$[$0 - 4],
                            params: $$[$0 - 3],
                            hash: $$[$0 - 2],
                            blockParams: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 5], $$[$0])
                        };
                        break;
                    case 18:
                        this.$ = {
                            strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]),
                            program: $$[$0]
                        };
                        break;
                    case 19:
                        var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$), program = yy.prepareProgram([
                            inverse
                        ], $$[$0 - 1].loc);
                        program.chained = true;
                        this.$ = {
                            strip: $$[$0 - 2].strip,
                            program: program,
                            chain: true
                        };
                        break;
                    case 20:
                        this.$ = $$[$0];
                        break;
                    case 21:
                        this.$ = {
                            path: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 2], $$[$0])
                        };
                        break;
                    case 22:
                        this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                        break;
                    case 23:
                        this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                        break;
                    case 24:
                        this.$ = {
                            type: 'PartialStatement',
                            name: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            indent: '',
                            strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 25:
                        this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                        break;
                    case 26:
                        this.$ = {
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 4], $$[$0])
                        };
                        break;
                    case 27:
                        this.$ = $$[$0];
                        break;
                    case 28:
                        this.$ = $$[$0];
                        break;
                    case 29:
                        this.$ = {
                            type: 'SubExpression',
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 30:
                        this.$ = {
                            type: 'Hash',
                            pairs: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 31:
                        this.$ = {
                            type: 'HashPair',
                            key: yy.id($$[$0 - 2]),
                            value: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 32:
                        this.$ = yy.id($$[$0 - 1]);
                        break;
                    case 33:
                        this.$ = $$[$0];
                        break;
                    case 34:
                        this.$ = $$[$0];
                        break;
                    case 35:
                        this.$ = {
                            type: 'StringLiteral',
                            value: $$[$0],
                            original: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 36:
                        this.$ = {
                            type: 'NumberLiteral',
                            value: Number($$[$0]),
                            original: Number($$[$0]),
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 37:
                        this.$ = {
                            type: 'BooleanLiteral',
                            value: $$[$0] === 'true',
                            original: $$[$0] === 'true',
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 38:
                        this.$ = {
                            type: 'UndefinedLiteral',
                            original: undefined,
                            value: undefined,
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 39:
                        this.$ = {
                            type: 'NullLiteral',
                            original: null,
                            value: null,
                            loc: yy.locInfo(this._$)
                        };
                        break;
                    case 40:
                        this.$ = $$[$0];
                        break;
                    case 41:
                        this.$ = $$[$0];
                        break;
                    case 42:
                        this.$ = yy.preparePath(true, $$[$0], this._$);
                        break;
                    case 43:
                        this.$ = yy.preparePath(false, $$[$0], this._$);
                        break;
                    case 44:
                        $$[$0 - 2].push({
                            part: yy.id($$[$0]),
                            original: $$[$0],
                            separator: $$[$0 - 1]
                        });
                        this.$ = $$[$0 - 2];
                        break;
                    case 45:
                        this.$ = [
                            {
                                part: yy.id($$[$0]),
                                original: $$[$0]
                            }
                        ];
                        break;
                    case 46:
                        this.$ = [];
                        break;
                    case 47:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 48:
                        this.$ = [];
                        break;
                    case 49:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 50:
                        this.$ = [];
                        break;
                    case 51:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 58:
                        this.$ = [];
                        break;
                    case 59:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 64:
                        this.$ = [];
                        break;
                    case 65:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 70:
                        this.$ = [];
                        break;
                    case 71:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 78:
                        this.$ = [];
                        break;
                    case 79:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 82:
                        this.$ = [];
                        break;
                    case 83:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 86:
                        this.$ = [];
                        break;
                    case 87:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 90:
                        this.$ = [];
                        break;
                    case 91:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 94:
                        this.$ = [];
                        break;
                    case 95:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 98:
                        this.$ = [
                            $$[$0]
                        ];
                        break;
                    case 99:
                        $$[$0 - 1].push($$[$0]);
                        break;
                    case 100:
                        this.$ = [
                            $$[$0]
                        ];
                        break;
                    case 101:
                        $$[$0 - 1].push($$[$0]);
                        break;
                }
            },
            table: [
                {
                    3: 1,
                    4: 2,
                    5: [
                        2,
                        46
                    ],
                    6: 3,
                    14: [
                        2,
                        46
                    ],
                    15: [
                        2,
                        46
                    ],
                    19: [
                        2,
                        46
                    ],
                    29: [
                        2,
                        46
                    ],
                    34: [
                        2,
                        46
                    ],
                    48: [
                        2,
                        46
                    ],
                    51: [
                        2,
                        46
                    ],
                    55: [
                        2,
                        46
                    ],
                    60: [
                        2,
                        46
                    ]
                },
                {
                    1: [
                        3
                    ]
                },
                {
                    5: [
                        1,
                        4
                    ]
                },
                {
                    5: [
                        2,
                        2
                    ],
                    7: 5,
                    8: 6,
                    9: 7,
                    10: 8,
                    11: 9,
                    12: 10,
                    13: 11,
                    14: [
                        1,
                        12
                    ],
                    15: [
                        1,
                        20
                    ],
                    16: 17,
                    19: [
                        1,
                        23
                    ],
                    24: 15,
                    27: 16,
                    29: [
                        1,
                        21
                    ],
                    34: [
                        1,
                        22
                    ],
                    39: [
                        2,
                        2
                    ],
                    44: [
                        2,
                        2
                    ],
                    47: [
                        2,
                        2
                    ],
                    48: [
                        1,
                        13
                    ],
                    51: [
                        1,
                        14
                    ],
                    55: [
                        1,
                        18
                    ],
                    59: 19,
                    60: [
                        1,
                        24
                    ]
                },
                {
                    1: [
                        2,
                        1
                    ]
                },
                {
                    5: [
                        2,
                        47
                    ],
                    14: [
                        2,
                        47
                    ],
                    15: [
                        2,
                        47
                    ],
                    19: [
                        2,
                        47
                    ],
                    29: [
                        2,
                        47
                    ],
                    34: [
                        2,
                        47
                    ],
                    39: [
                        2,
                        47
                    ],
                    44: [
                        2,
                        47
                    ],
                    47: [
                        2,
                        47
                    ],
                    48: [
                        2,
                        47
                    ],
                    51: [
                        2,
                        47
                    ],
                    55: [
                        2,
                        47
                    ],
                    60: [
                        2,
                        47
                    ]
                },
                {
                    5: [
                        2,
                        3
                    ],
                    14: [
                        2,
                        3
                    ],
                    15: [
                        2,
                        3
                    ],
                    19: [
                        2,
                        3
                    ],
                    29: [
                        2,
                        3
                    ],
                    34: [
                        2,
                        3
                    ],
                    39: [
                        2,
                        3
                    ],
                    44: [
                        2,
                        3
                    ],
                    47: [
                        2,
                        3
                    ],
                    48: [
                        2,
                        3
                    ],
                    51: [
                        2,
                        3
                    ],
                    55: [
                        2,
                        3
                    ],
                    60: [
                        2,
                        3
                    ]
                },
                {
                    5: [
                        2,
                        4
                    ],
                    14: [
                        2,
                        4
                    ],
                    15: [
                        2,
                        4
                    ],
                    19: [
                        2,
                        4
                    ],
                    29: [
                        2,
                        4
                    ],
                    34: [
                        2,
                        4
                    ],
                    39: [
                        2,
                        4
                    ],
                    44: [
                        2,
                        4
                    ],
                    47: [
                        2,
                        4
                    ],
                    48: [
                        2,
                        4
                    ],
                    51: [
                        2,
                        4
                    ],
                    55: [
                        2,
                        4
                    ],
                    60: [
                        2,
                        4
                    ]
                },
                {
                    5: [
                        2,
                        5
                    ],
                    14: [
                        2,
                        5
                    ],
                    15: [
                        2,
                        5
                    ],
                    19: [
                        2,
                        5
                    ],
                    29: [
                        2,
                        5
                    ],
                    34: [
                        2,
                        5
                    ],
                    39: [
                        2,
                        5
                    ],
                    44: [
                        2,
                        5
                    ],
                    47: [
                        2,
                        5
                    ],
                    48: [
                        2,
                        5
                    ],
                    51: [
                        2,
                        5
                    ],
                    55: [
                        2,
                        5
                    ],
                    60: [
                        2,
                        5
                    ]
                },
                {
                    5: [
                        2,
                        6
                    ],
                    14: [
                        2,
                        6
                    ],
                    15: [
                        2,
                        6
                    ],
                    19: [
                        2,
                        6
                    ],
                    29: [
                        2,
                        6
                    ],
                    34: [
                        2,
                        6
                    ],
                    39: [
                        2,
                        6
                    ],
                    44: [
                        2,
                        6
                    ],
                    47: [
                        2,
                        6
                    ],
                    48: [
                        2,
                        6
                    ],
                    51: [
                        2,
                        6
                    ],
                    55: [
                        2,
                        6
                    ],
                    60: [
                        2,
                        6
                    ]
                },
                {
                    5: [
                        2,
                        7
                    ],
                    14: [
                        2,
                        7
                    ],
                    15: [
                        2,
                        7
                    ],
                    19: [
                        2,
                        7
                    ],
                    29: [
                        2,
                        7
                    ],
                    34: [
                        2,
                        7
                    ],
                    39: [
                        2,
                        7
                    ],
                    44: [
                        2,
                        7
                    ],
                    47: [
                        2,
                        7
                    ],
                    48: [
                        2,
                        7
                    ],
                    51: [
                        2,
                        7
                    ],
                    55: [
                        2,
                        7
                    ],
                    60: [
                        2,
                        7
                    ]
                },
                {
                    5: [
                        2,
                        8
                    ],
                    14: [
                        2,
                        8
                    ],
                    15: [
                        2,
                        8
                    ],
                    19: [
                        2,
                        8
                    ],
                    29: [
                        2,
                        8
                    ],
                    34: [
                        2,
                        8
                    ],
                    39: [
                        2,
                        8
                    ],
                    44: [
                        2,
                        8
                    ],
                    47: [
                        2,
                        8
                    ],
                    48: [
                        2,
                        8
                    ],
                    51: [
                        2,
                        8
                    ],
                    55: [
                        2,
                        8
                    ],
                    60: [
                        2,
                        8
                    ]
                },
                {
                    5: [
                        2,
                        9
                    ],
                    14: [
                        2,
                        9
                    ],
                    15: [
                        2,
                        9
                    ],
                    19: [
                        2,
                        9
                    ],
                    29: [
                        2,
                        9
                    ],
                    34: [
                        2,
                        9
                    ],
                    39: [
                        2,
                        9
                    ],
                    44: [
                        2,
                        9
                    ],
                    47: [
                        2,
                        9
                    ],
                    48: [
                        2,
                        9
                    ],
                    51: [
                        2,
                        9
                    ],
                    55: [
                        2,
                        9
                    ],
                    60: [
                        2,
                        9
                    ]
                },
                {
                    20: 25,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 36,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    4: 37,
                    6: 3,
                    14: [
                        2,
                        46
                    ],
                    15: [
                        2,
                        46
                    ],
                    19: [
                        2,
                        46
                    ],
                    29: [
                        2,
                        46
                    ],
                    34: [
                        2,
                        46
                    ],
                    39: [
                        2,
                        46
                    ],
                    44: [
                        2,
                        46
                    ],
                    47: [
                        2,
                        46
                    ],
                    48: [
                        2,
                        46
                    ],
                    51: [
                        2,
                        46
                    ],
                    55: [
                        2,
                        46
                    ],
                    60: [
                        2,
                        46
                    ]
                },
                {
                    4: 38,
                    6: 3,
                    14: [
                        2,
                        46
                    ],
                    15: [
                        2,
                        46
                    ],
                    19: [
                        2,
                        46
                    ],
                    29: [
                        2,
                        46
                    ],
                    34: [
                        2,
                        46
                    ],
                    44: [
                        2,
                        46
                    ],
                    47: [
                        2,
                        46
                    ],
                    48: [
                        2,
                        46
                    ],
                    51: [
                        2,
                        46
                    ],
                    55: [
                        2,
                        46
                    ],
                    60: [
                        2,
                        46
                    ]
                },
                {
                    15: [
                        2,
                        48
                    ],
                    17: 39,
                    18: [
                        2,
                        48
                    ]
                },
                {
                    20: 41,
                    56: 40,
                    64: 42,
                    65: [
                        1,
                        43
                    ],
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    4: 44,
                    6: 3,
                    14: [
                        2,
                        46
                    ],
                    15: [
                        2,
                        46
                    ],
                    19: [
                        2,
                        46
                    ],
                    29: [
                        2,
                        46
                    ],
                    34: [
                        2,
                        46
                    ],
                    47: [
                        2,
                        46
                    ],
                    48: [
                        2,
                        46
                    ],
                    51: [
                        2,
                        46
                    ],
                    55: [
                        2,
                        46
                    ],
                    60: [
                        2,
                        46
                    ]
                },
                {
                    5: [
                        2,
                        10
                    ],
                    14: [
                        2,
                        10
                    ],
                    15: [
                        2,
                        10
                    ],
                    18: [
                        2,
                        10
                    ],
                    19: [
                        2,
                        10
                    ],
                    29: [
                        2,
                        10
                    ],
                    34: [
                        2,
                        10
                    ],
                    39: [
                        2,
                        10
                    ],
                    44: [
                        2,
                        10
                    ],
                    47: [
                        2,
                        10
                    ],
                    48: [
                        2,
                        10
                    ],
                    51: [
                        2,
                        10
                    ],
                    55: [
                        2,
                        10
                    ],
                    60: [
                        2,
                        10
                    ]
                },
                {
                    20: 45,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 46,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 47,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 41,
                    56: 48,
                    64: 42,
                    65: [
                        1,
                        43
                    ],
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    33: [
                        2,
                        78
                    ],
                    49: 49,
                    65: [
                        2,
                        78
                    ],
                    72: [
                        2,
                        78
                    ],
                    80: [
                        2,
                        78
                    ],
                    81: [
                        2,
                        78
                    ],
                    82: [
                        2,
                        78
                    ],
                    83: [
                        2,
                        78
                    ],
                    84: [
                        2,
                        78
                    ],
                    85: [
                        2,
                        78
                    ]
                },
                {
                    23: [
                        2,
                        33
                    ],
                    33: [
                        2,
                        33
                    ],
                    54: [
                        2,
                        33
                    ],
                    65: [
                        2,
                        33
                    ],
                    68: [
                        2,
                        33
                    ],
                    72: [
                        2,
                        33
                    ],
                    75: [
                        2,
                        33
                    ],
                    80: [
                        2,
                        33
                    ],
                    81: [
                        2,
                        33
                    ],
                    82: [
                        2,
                        33
                    ],
                    83: [
                        2,
                        33
                    ],
                    84: [
                        2,
                        33
                    ],
                    85: [
                        2,
                        33
                    ]
                },
                {
                    23: [
                        2,
                        34
                    ],
                    33: [
                        2,
                        34
                    ],
                    54: [
                        2,
                        34
                    ],
                    65: [
                        2,
                        34
                    ],
                    68: [
                        2,
                        34
                    ],
                    72: [
                        2,
                        34
                    ],
                    75: [
                        2,
                        34
                    ],
                    80: [
                        2,
                        34
                    ],
                    81: [
                        2,
                        34
                    ],
                    82: [
                        2,
                        34
                    ],
                    83: [
                        2,
                        34
                    ],
                    84: [
                        2,
                        34
                    ],
                    85: [
                        2,
                        34
                    ]
                },
                {
                    23: [
                        2,
                        35
                    ],
                    33: [
                        2,
                        35
                    ],
                    54: [
                        2,
                        35
                    ],
                    65: [
                        2,
                        35
                    ],
                    68: [
                        2,
                        35
                    ],
                    72: [
                        2,
                        35
                    ],
                    75: [
                        2,
                        35
                    ],
                    80: [
                        2,
                        35
                    ],
                    81: [
                        2,
                        35
                    ],
                    82: [
                        2,
                        35
                    ],
                    83: [
                        2,
                        35
                    ],
                    84: [
                        2,
                        35
                    ],
                    85: [
                        2,
                        35
                    ]
                },
                {
                    23: [
                        2,
                        36
                    ],
                    33: [
                        2,
                        36
                    ],
                    54: [
                        2,
                        36
                    ],
                    65: [
                        2,
                        36
                    ],
                    68: [
                        2,
                        36
                    ],
                    72: [
                        2,
                        36
                    ],
                    75: [
                        2,
                        36
                    ],
                    80: [
                        2,
                        36
                    ],
                    81: [
                        2,
                        36
                    ],
                    82: [
                        2,
                        36
                    ],
                    83: [
                        2,
                        36
                    ],
                    84: [
                        2,
                        36
                    ],
                    85: [
                        2,
                        36
                    ]
                },
                {
                    23: [
                        2,
                        37
                    ],
                    33: [
                        2,
                        37
                    ],
                    54: [
                        2,
                        37
                    ],
                    65: [
                        2,
                        37
                    ],
                    68: [
                        2,
                        37
                    ],
                    72: [
                        2,
                        37
                    ],
                    75: [
                        2,
                        37
                    ],
                    80: [
                        2,
                        37
                    ],
                    81: [
                        2,
                        37
                    ],
                    82: [
                        2,
                        37
                    ],
                    83: [
                        2,
                        37
                    ],
                    84: [
                        2,
                        37
                    ],
                    85: [
                        2,
                        37
                    ]
                },
                {
                    23: [
                        2,
                        38
                    ],
                    33: [
                        2,
                        38
                    ],
                    54: [
                        2,
                        38
                    ],
                    65: [
                        2,
                        38
                    ],
                    68: [
                        2,
                        38
                    ],
                    72: [
                        2,
                        38
                    ],
                    75: [
                        2,
                        38
                    ],
                    80: [
                        2,
                        38
                    ],
                    81: [
                        2,
                        38
                    ],
                    82: [
                        2,
                        38
                    ],
                    83: [
                        2,
                        38
                    ],
                    84: [
                        2,
                        38
                    ],
                    85: [
                        2,
                        38
                    ]
                },
                {
                    23: [
                        2,
                        39
                    ],
                    33: [
                        2,
                        39
                    ],
                    54: [
                        2,
                        39
                    ],
                    65: [
                        2,
                        39
                    ],
                    68: [
                        2,
                        39
                    ],
                    72: [
                        2,
                        39
                    ],
                    75: [
                        2,
                        39
                    ],
                    80: [
                        2,
                        39
                    ],
                    81: [
                        2,
                        39
                    ],
                    82: [
                        2,
                        39
                    ],
                    83: [
                        2,
                        39
                    ],
                    84: [
                        2,
                        39
                    ],
                    85: [
                        2,
                        39
                    ]
                },
                {
                    23: [
                        2,
                        43
                    ],
                    33: [
                        2,
                        43
                    ],
                    54: [
                        2,
                        43
                    ],
                    65: [
                        2,
                        43
                    ],
                    68: [
                        2,
                        43
                    ],
                    72: [
                        2,
                        43
                    ],
                    75: [
                        2,
                        43
                    ],
                    80: [
                        2,
                        43
                    ],
                    81: [
                        2,
                        43
                    ],
                    82: [
                        2,
                        43
                    ],
                    83: [
                        2,
                        43
                    ],
                    84: [
                        2,
                        43
                    ],
                    85: [
                        2,
                        43
                    ],
                    87: [
                        1,
                        50
                    ]
                },
                {
                    72: [
                        1,
                        35
                    ],
                    86: 51
                },
                {
                    23: [
                        2,
                        45
                    ],
                    33: [
                        2,
                        45
                    ],
                    54: [
                        2,
                        45
                    ],
                    65: [
                        2,
                        45
                    ],
                    68: [
                        2,
                        45
                    ],
                    72: [
                        2,
                        45
                    ],
                    75: [
                        2,
                        45
                    ],
                    80: [
                        2,
                        45
                    ],
                    81: [
                        2,
                        45
                    ],
                    82: [
                        2,
                        45
                    ],
                    83: [
                        2,
                        45
                    ],
                    84: [
                        2,
                        45
                    ],
                    85: [
                        2,
                        45
                    ],
                    87: [
                        2,
                        45
                    ]
                },
                {
                    52: 52,
                    54: [
                        2,
                        82
                    ],
                    65: [
                        2,
                        82
                    ],
                    72: [
                        2,
                        82
                    ],
                    80: [
                        2,
                        82
                    ],
                    81: [
                        2,
                        82
                    ],
                    82: [
                        2,
                        82
                    ],
                    83: [
                        2,
                        82
                    ],
                    84: [
                        2,
                        82
                    ],
                    85: [
                        2,
                        82
                    ]
                },
                {
                    25: 53,
                    38: 55,
                    39: [
                        1,
                        57
                    ],
                    43: 56,
                    44: [
                        1,
                        58
                    ],
                    45: 54,
                    47: [
                        2,
                        54
                    ]
                },
                {
                    28: 59,
                    43: 60,
                    44: [
                        1,
                        58
                    ],
                    47: [
                        2,
                        56
                    ]
                },
                {
                    13: 62,
                    15: [
                        1,
                        20
                    ],
                    18: [
                        1,
                        61
                    ]
                },
                {
                    33: [
                        2,
                        86
                    ],
                    57: 63,
                    65: [
                        2,
                        86
                    ],
                    72: [
                        2,
                        86
                    ],
                    80: [
                        2,
                        86
                    ],
                    81: [
                        2,
                        86
                    ],
                    82: [
                        2,
                        86
                    ],
                    83: [
                        2,
                        86
                    ],
                    84: [
                        2,
                        86
                    ],
                    85: [
                        2,
                        86
                    ]
                },
                {
                    33: [
                        2,
                        40
                    ],
                    65: [
                        2,
                        40
                    ],
                    72: [
                        2,
                        40
                    ],
                    80: [
                        2,
                        40
                    ],
                    81: [
                        2,
                        40
                    ],
                    82: [
                        2,
                        40
                    ],
                    83: [
                        2,
                        40
                    ],
                    84: [
                        2,
                        40
                    ],
                    85: [
                        2,
                        40
                    ]
                },
                {
                    33: [
                        2,
                        41
                    ],
                    65: [
                        2,
                        41
                    ],
                    72: [
                        2,
                        41
                    ],
                    80: [
                        2,
                        41
                    ],
                    81: [
                        2,
                        41
                    ],
                    82: [
                        2,
                        41
                    ],
                    83: [
                        2,
                        41
                    ],
                    84: [
                        2,
                        41
                    ],
                    85: [
                        2,
                        41
                    ]
                },
                {
                    20: 64,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    26: 65,
                    47: [
                        1,
                        66
                    ]
                },
                {
                    30: 67,
                    33: [
                        2,
                        58
                    ],
                    65: [
                        2,
                        58
                    ],
                    72: [
                        2,
                        58
                    ],
                    75: [
                        2,
                        58
                    ],
                    80: [
                        2,
                        58
                    ],
                    81: [
                        2,
                        58
                    ],
                    82: [
                        2,
                        58
                    ],
                    83: [
                        2,
                        58
                    ],
                    84: [
                        2,
                        58
                    ],
                    85: [
                        2,
                        58
                    ]
                },
                {
                    33: [
                        2,
                        64
                    ],
                    35: 68,
                    65: [
                        2,
                        64
                    ],
                    72: [
                        2,
                        64
                    ],
                    75: [
                        2,
                        64
                    ],
                    80: [
                        2,
                        64
                    ],
                    81: [
                        2,
                        64
                    ],
                    82: [
                        2,
                        64
                    ],
                    83: [
                        2,
                        64
                    ],
                    84: [
                        2,
                        64
                    ],
                    85: [
                        2,
                        64
                    ]
                },
                {
                    21: 69,
                    23: [
                        2,
                        50
                    ],
                    65: [
                        2,
                        50
                    ],
                    72: [
                        2,
                        50
                    ],
                    80: [
                        2,
                        50
                    ],
                    81: [
                        2,
                        50
                    ],
                    82: [
                        2,
                        50
                    ],
                    83: [
                        2,
                        50
                    ],
                    84: [
                        2,
                        50
                    ],
                    85: [
                        2,
                        50
                    ]
                },
                {
                    33: [
                        2,
                        90
                    ],
                    61: 70,
                    65: [
                        2,
                        90
                    ],
                    72: [
                        2,
                        90
                    ],
                    80: [
                        2,
                        90
                    ],
                    81: [
                        2,
                        90
                    ],
                    82: [
                        2,
                        90
                    ],
                    83: [
                        2,
                        90
                    ],
                    84: [
                        2,
                        90
                    ],
                    85: [
                        2,
                        90
                    ]
                },
                {
                    20: 74,
                    33: [
                        2,
                        80
                    ],
                    50: 71,
                    63: 72,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 73,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    72: [
                        1,
                        79
                    ]
                },
                {
                    23: [
                        2,
                        42
                    ],
                    33: [
                        2,
                        42
                    ],
                    54: [
                        2,
                        42
                    ],
                    65: [
                        2,
                        42
                    ],
                    68: [
                        2,
                        42
                    ],
                    72: [
                        2,
                        42
                    ],
                    75: [
                        2,
                        42
                    ],
                    80: [
                        2,
                        42
                    ],
                    81: [
                        2,
                        42
                    ],
                    82: [
                        2,
                        42
                    ],
                    83: [
                        2,
                        42
                    ],
                    84: [
                        2,
                        42
                    ],
                    85: [
                        2,
                        42
                    ],
                    87: [
                        1,
                        50
                    ]
                },
                {
                    20: 74,
                    53: 80,
                    54: [
                        2,
                        84
                    ],
                    63: 81,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 82,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    26: 83,
                    47: [
                        1,
                        66
                    ]
                },
                {
                    47: [
                        2,
                        55
                    ]
                },
                {
                    4: 84,
                    6: 3,
                    14: [
                        2,
                        46
                    ],
                    15: [
                        2,
                        46
                    ],
                    19: [
                        2,
                        46
                    ],
                    29: [
                        2,
                        46
                    ],
                    34: [
                        2,
                        46
                    ],
                    39: [
                        2,
                        46
                    ],
                    44: [
                        2,
                        46
                    ],
                    47: [
                        2,
                        46
                    ],
                    48: [
                        2,
                        46
                    ],
                    51: [
                        2,
                        46
                    ],
                    55: [
                        2,
                        46
                    ],
                    60: [
                        2,
                        46
                    ]
                },
                {
                    47: [
                        2,
                        20
                    ]
                },
                {
                    20: 85,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    4: 86,
                    6: 3,
                    14: [
                        2,
                        46
                    ],
                    15: [
                        2,
                        46
                    ],
                    19: [
                        2,
                        46
                    ],
                    29: [
                        2,
                        46
                    ],
                    34: [
                        2,
                        46
                    ],
                    47: [
                        2,
                        46
                    ],
                    48: [
                        2,
                        46
                    ],
                    51: [
                        2,
                        46
                    ],
                    55: [
                        2,
                        46
                    ],
                    60: [
                        2,
                        46
                    ]
                },
                {
                    26: 87,
                    47: [
                        1,
                        66
                    ]
                },
                {
                    47: [
                        2,
                        57
                    ]
                },
                {
                    5: [
                        2,
                        11
                    ],
                    14: [
                        2,
                        11
                    ],
                    15: [
                        2,
                        11
                    ],
                    19: [
                        2,
                        11
                    ],
                    29: [
                        2,
                        11
                    ],
                    34: [
                        2,
                        11
                    ],
                    39: [
                        2,
                        11
                    ],
                    44: [
                        2,
                        11
                    ],
                    47: [
                        2,
                        11
                    ],
                    48: [
                        2,
                        11
                    ],
                    51: [
                        2,
                        11
                    ],
                    55: [
                        2,
                        11
                    ],
                    60: [
                        2,
                        11
                    ]
                },
                {
                    15: [
                        2,
                        49
                    ],
                    18: [
                        2,
                        49
                    ]
                },
                {
                    20: 74,
                    33: [
                        2,
                        88
                    ],
                    58: 88,
                    63: 89,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 90,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    65: [
                        2,
                        94
                    ],
                    66: 91,
                    68: [
                        2,
                        94
                    ],
                    72: [
                        2,
                        94
                    ],
                    80: [
                        2,
                        94
                    ],
                    81: [
                        2,
                        94
                    ],
                    82: [
                        2,
                        94
                    ],
                    83: [
                        2,
                        94
                    ],
                    84: [
                        2,
                        94
                    ],
                    85: [
                        2,
                        94
                    ]
                },
                {
                    5: [
                        2,
                        25
                    ],
                    14: [
                        2,
                        25
                    ],
                    15: [
                        2,
                        25
                    ],
                    19: [
                        2,
                        25
                    ],
                    29: [
                        2,
                        25
                    ],
                    34: [
                        2,
                        25
                    ],
                    39: [
                        2,
                        25
                    ],
                    44: [
                        2,
                        25
                    ],
                    47: [
                        2,
                        25
                    ],
                    48: [
                        2,
                        25
                    ],
                    51: [
                        2,
                        25
                    ],
                    55: [
                        2,
                        25
                    ],
                    60: [
                        2,
                        25
                    ]
                },
                {
                    20: 92,
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 74,
                    31: 93,
                    33: [
                        2,
                        60
                    ],
                    63: 94,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 95,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    75: [
                        2,
                        60
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 74,
                    33: [
                        2,
                        66
                    ],
                    36: 96,
                    63: 97,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 98,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    75: [
                        2,
                        66
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 74,
                    22: 99,
                    23: [
                        2,
                        52
                    ],
                    63: 100,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 101,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    20: 74,
                    33: [
                        2,
                        92
                    ],
                    62: 102,
                    63: 103,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 104,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    33: [
                        1,
                        105
                    ]
                },
                {
                    33: [
                        2,
                        79
                    ],
                    65: [
                        2,
                        79
                    ],
                    72: [
                        2,
                        79
                    ],
                    80: [
                        2,
                        79
                    ],
                    81: [
                        2,
                        79
                    ],
                    82: [
                        2,
                        79
                    ],
                    83: [
                        2,
                        79
                    ],
                    84: [
                        2,
                        79
                    ],
                    85: [
                        2,
                        79
                    ]
                },
                {
                    33: [
                        2,
                        81
                    ]
                },
                {
                    23: [
                        2,
                        27
                    ],
                    33: [
                        2,
                        27
                    ],
                    54: [
                        2,
                        27
                    ],
                    65: [
                        2,
                        27
                    ],
                    68: [
                        2,
                        27
                    ],
                    72: [
                        2,
                        27
                    ],
                    75: [
                        2,
                        27
                    ],
                    80: [
                        2,
                        27
                    ],
                    81: [
                        2,
                        27
                    ],
                    82: [
                        2,
                        27
                    ],
                    83: [
                        2,
                        27
                    ],
                    84: [
                        2,
                        27
                    ],
                    85: [
                        2,
                        27
                    ]
                },
                {
                    23: [
                        2,
                        28
                    ],
                    33: [
                        2,
                        28
                    ],
                    54: [
                        2,
                        28
                    ],
                    65: [
                        2,
                        28
                    ],
                    68: [
                        2,
                        28
                    ],
                    72: [
                        2,
                        28
                    ],
                    75: [
                        2,
                        28
                    ],
                    80: [
                        2,
                        28
                    ],
                    81: [
                        2,
                        28
                    ],
                    82: [
                        2,
                        28
                    ],
                    83: [
                        2,
                        28
                    ],
                    84: [
                        2,
                        28
                    ],
                    85: [
                        2,
                        28
                    ]
                },
                {
                    23: [
                        2,
                        30
                    ],
                    33: [
                        2,
                        30
                    ],
                    54: [
                        2,
                        30
                    ],
                    68: [
                        2,
                        30
                    ],
                    71: 106,
                    72: [
                        1,
                        107
                    ],
                    75: [
                        2,
                        30
                    ]
                },
                {
                    23: [
                        2,
                        98
                    ],
                    33: [
                        2,
                        98
                    ],
                    54: [
                        2,
                        98
                    ],
                    68: [
                        2,
                        98
                    ],
                    72: [
                        2,
                        98
                    ],
                    75: [
                        2,
                        98
                    ]
                },
                {
                    23: [
                        2,
                        45
                    ],
                    33: [
                        2,
                        45
                    ],
                    54: [
                        2,
                        45
                    ],
                    65: [
                        2,
                        45
                    ],
                    68: [
                        2,
                        45
                    ],
                    72: [
                        2,
                        45
                    ],
                    73: [
                        1,
                        108
                    ],
                    75: [
                        2,
                        45
                    ],
                    80: [
                        2,
                        45
                    ],
                    81: [
                        2,
                        45
                    ],
                    82: [
                        2,
                        45
                    ],
                    83: [
                        2,
                        45
                    ],
                    84: [
                        2,
                        45
                    ],
                    85: [
                        2,
                        45
                    ],
                    87: [
                        2,
                        45
                    ]
                },
                {
                    23: [
                        2,
                        44
                    ],
                    33: [
                        2,
                        44
                    ],
                    54: [
                        2,
                        44
                    ],
                    65: [
                        2,
                        44
                    ],
                    68: [
                        2,
                        44
                    ],
                    72: [
                        2,
                        44
                    ],
                    75: [
                        2,
                        44
                    ],
                    80: [
                        2,
                        44
                    ],
                    81: [
                        2,
                        44
                    ],
                    82: [
                        2,
                        44
                    ],
                    83: [
                        2,
                        44
                    ],
                    84: [
                        2,
                        44
                    ],
                    85: [
                        2,
                        44
                    ],
                    87: [
                        2,
                        44
                    ]
                },
                {
                    54: [
                        1,
                        109
                    ]
                },
                {
                    54: [
                        2,
                        83
                    ],
                    65: [
                        2,
                        83
                    ],
                    72: [
                        2,
                        83
                    ],
                    80: [
                        2,
                        83
                    ],
                    81: [
                        2,
                        83
                    ],
                    82: [
                        2,
                        83
                    ],
                    83: [
                        2,
                        83
                    ],
                    84: [
                        2,
                        83
                    ],
                    85: [
                        2,
                        83
                    ]
                },
                {
                    54: [
                        2,
                        85
                    ]
                },
                {
                    5: [
                        2,
                        13
                    ],
                    14: [
                        2,
                        13
                    ],
                    15: [
                        2,
                        13
                    ],
                    19: [
                        2,
                        13
                    ],
                    29: [
                        2,
                        13
                    ],
                    34: [
                        2,
                        13
                    ],
                    39: [
                        2,
                        13
                    ],
                    44: [
                        2,
                        13
                    ],
                    47: [
                        2,
                        13
                    ],
                    48: [
                        2,
                        13
                    ],
                    51: [
                        2,
                        13
                    ],
                    55: [
                        2,
                        13
                    ],
                    60: [
                        2,
                        13
                    ]
                },
                {
                    38: 55,
                    39: [
                        1,
                        57
                    ],
                    43: 56,
                    44: [
                        1,
                        58
                    ],
                    45: 111,
                    46: 110,
                    47: [
                        2,
                        76
                    ]
                },
                {
                    33: [
                        2,
                        70
                    ],
                    40: 112,
                    65: [
                        2,
                        70
                    ],
                    72: [
                        2,
                        70
                    ],
                    75: [
                        2,
                        70
                    ],
                    80: [
                        2,
                        70
                    ],
                    81: [
                        2,
                        70
                    ],
                    82: [
                        2,
                        70
                    ],
                    83: [
                        2,
                        70
                    ],
                    84: [
                        2,
                        70
                    ],
                    85: [
                        2,
                        70
                    ]
                },
                {
                    47: [
                        2,
                        18
                    ]
                },
                {
                    5: [
                        2,
                        14
                    ],
                    14: [
                        2,
                        14
                    ],
                    15: [
                        2,
                        14
                    ],
                    19: [
                        2,
                        14
                    ],
                    29: [
                        2,
                        14
                    ],
                    34: [
                        2,
                        14
                    ],
                    39: [
                        2,
                        14
                    ],
                    44: [
                        2,
                        14
                    ],
                    47: [
                        2,
                        14
                    ],
                    48: [
                        2,
                        14
                    ],
                    51: [
                        2,
                        14
                    ],
                    55: [
                        2,
                        14
                    ],
                    60: [
                        2,
                        14
                    ]
                },
                {
                    33: [
                        1,
                        113
                    ]
                },
                {
                    33: [
                        2,
                        87
                    ],
                    65: [
                        2,
                        87
                    ],
                    72: [
                        2,
                        87
                    ],
                    80: [
                        2,
                        87
                    ],
                    81: [
                        2,
                        87
                    ],
                    82: [
                        2,
                        87
                    ],
                    83: [
                        2,
                        87
                    ],
                    84: [
                        2,
                        87
                    ],
                    85: [
                        2,
                        87
                    ]
                },
                {
                    33: [
                        2,
                        89
                    ]
                },
                {
                    20: 74,
                    63: 115,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    67: 114,
                    68: [
                        2,
                        96
                    ],
                    69: 116,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    33: [
                        1,
                        117
                    ]
                },
                {
                    32: 118,
                    33: [
                        2,
                        62
                    ],
                    74: 119,
                    75: [
                        1,
                        120
                    ]
                },
                {
                    33: [
                        2,
                        59
                    ],
                    65: [
                        2,
                        59
                    ],
                    72: [
                        2,
                        59
                    ],
                    75: [
                        2,
                        59
                    ],
                    80: [
                        2,
                        59
                    ],
                    81: [
                        2,
                        59
                    ],
                    82: [
                        2,
                        59
                    ],
                    83: [
                        2,
                        59
                    ],
                    84: [
                        2,
                        59
                    ],
                    85: [
                        2,
                        59
                    ]
                },
                {
                    33: [
                        2,
                        61
                    ],
                    75: [
                        2,
                        61
                    ]
                },
                {
                    33: [
                        2,
                        68
                    ],
                    37: 121,
                    74: 122,
                    75: [
                        1,
                        120
                    ]
                },
                {
                    33: [
                        2,
                        65
                    ],
                    65: [
                        2,
                        65
                    ],
                    72: [
                        2,
                        65
                    ],
                    75: [
                        2,
                        65
                    ],
                    80: [
                        2,
                        65
                    ],
                    81: [
                        2,
                        65
                    ],
                    82: [
                        2,
                        65
                    ],
                    83: [
                        2,
                        65
                    ],
                    84: [
                        2,
                        65
                    ],
                    85: [
                        2,
                        65
                    ]
                },
                {
                    33: [
                        2,
                        67
                    ],
                    75: [
                        2,
                        67
                    ]
                },
                {
                    23: [
                        1,
                        123
                    ]
                },
                {
                    23: [
                        2,
                        51
                    ],
                    65: [
                        2,
                        51
                    ],
                    72: [
                        2,
                        51
                    ],
                    80: [
                        2,
                        51
                    ],
                    81: [
                        2,
                        51
                    ],
                    82: [
                        2,
                        51
                    ],
                    83: [
                        2,
                        51
                    ],
                    84: [
                        2,
                        51
                    ],
                    85: [
                        2,
                        51
                    ]
                },
                {
                    23: [
                        2,
                        53
                    ]
                },
                {
                    33: [
                        1,
                        124
                    ]
                },
                {
                    33: [
                        2,
                        91
                    ],
                    65: [
                        2,
                        91
                    ],
                    72: [
                        2,
                        91
                    ],
                    80: [
                        2,
                        91
                    ],
                    81: [
                        2,
                        91
                    ],
                    82: [
                        2,
                        91
                    ],
                    83: [
                        2,
                        91
                    ],
                    84: [
                        2,
                        91
                    ],
                    85: [
                        2,
                        91
                    ]
                },
                {
                    33: [
                        2,
                        93
                    ]
                },
                {
                    5: [
                        2,
                        22
                    ],
                    14: [
                        2,
                        22
                    ],
                    15: [
                        2,
                        22
                    ],
                    19: [
                        2,
                        22
                    ],
                    29: [
                        2,
                        22
                    ],
                    34: [
                        2,
                        22
                    ],
                    39: [
                        2,
                        22
                    ],
                    44: [
                        2,
                        22
                    ],
                    47: [
                        2,
                        22
                    ],
                    48: [
                        2,
                        22
                    ],
                    51: [
                        2,
                        22
                    ],
                    55: [
                        2,
                        22
                    ],
                    60: [
                        2,
                        22
                    ]
                },
                {
                    23: [
                        2,
                        99
                    ],
                    33: [
                        2,
                        99
                    ],
                    54: [
                        2,
                        99
                    ],
                    68: [
                        2,
                        99
                    ],
                    72: [
                        2,
                        99
                    ],
                    75: [
                        2,
                        99
                    ]
                },
                {
                    73: [
                        1,
                        108
                    ]
                },
                {
                    20: 74,
                    63: 125,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    72: [
                        1,
                        35
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    5: [
                        2,
                        23
                    ],
                    14: [
                        2,
                        23
                    ],
                    15: [
                        2,
                        23
                    ],
                    19: [
                        2,
                        23
                    ],
                    29: [
                        2,
                        23
                    ],
                    34: [
                        2,
                        23
                    ],
                    39: [
                        2,
                        23
                    ],
                    44: [
                        2,
                        23
                    ],
                    47: [
                        2,
                        23
                    ],
                    48: [
                        2,
                        23
                    ],
                    51: [
                        2,
                        23
                    ],
                    55: [
                        2,
                        23
                    ],
                    60: [
                        2,
                        23
                    ]
                },
                {
                    47: [
                        2,
                        19
                    ]
                },
                {
                    47: [
                        2,
                        77
                    ]
                },
                {
                    20: 74,
                    33: [
                        2,
                        72
                    ],
                    41: 126,
                    63: 127,
                    64: 75,
                    65: [
                        1,
                        43
                    ],
                    69: 128,
                    70: 76,
                    71: 77,
                    72: [
                        1,
                        78
                    ],
                    75: [
                        2,
                        72
                    ],
                    78: 26,
                    79: 27,
                    80: [
                        1,
                        28
                    ],
                    81: [
                        1,
                        29
                    ],
                    82: [
                        1,
                        30
                    ],
                    83: [
                        1,
                        31
                    ],
                    84: [
                        1,
                        32
                    ],
                    85: [
                        1,
                        34
                    ],
                    86: 33
                },
                {
                    5: [
                        2,
                        24
                    ],
                    14: [
                        2,
                        24
                    ],
                    15: [
                        2,
                        24
                    ],
                    19: [
                        2,
                        24
                    ],
                    29: [
                        2,
                        24
                    ],
                    34: [
                        2,
                        24
                    ],
                    39: [
                        2,
                        24
                    ],
                    44: [
                        2,
                        24
                    ],
                    47: [
                        2,
                        24
                    ],
                    48: [
                        2,
                        24
                    ],
                    51: [
                        2,
                        24
                    ],
                    55: [
                        2,
                        24
                    ],
                    60: [
                        2,
                        24
                    ]
                },
                {
                    68: [
                        1,
                        129
                    ]
                },
                {
                    65: [
                        2,
                        95
                    ],
                    68: [
                        2,
                        95
                    ],
                    72: [
                        2,
                        95
                    ],
                    80: [
                        2,
                        95
                    ],
                    81: [
                        2,
                        95
                    ],
                    82: [
                        2,
                        95
                    ],
                    83: [
                        2,
                        95
                    ],
                    84: [
                        2,
                        95
                    ],
                    85: [
                        2,
                        95
                    ]
                },
                {
                    68: [
                        2,
                        97
                    ]
                },
                {
                    5: [
                        2,
                        21
                    ],
                    14: [
                        2,
                        21
                    ],
                    15: [
                        2,
                        21
                    ],
                    19: [
                        2,
                        21
                    ],
                    29: [
                        2,
                        21
                    ],
                    34: [
                        2,
                        21
                    ],
                    39: [
                        2,
                        21
                    ],
                    44: [
                        2,
                        21
                    ],
                    47: [
                        2,
                        21
                    ],
                    48: [
                        2,
                        21
                    ],
                    51: [
                        2,
                        21
                    ],
                    55: [
                        2,
                        21
                    ],
                    60: [
                        2,
                        21
                    ]
                },
                {
                    33: [
                        1,
                        130
                    ]
                },
                {
                    33: [
                        2,
                        63
                    ]
                },
                {
                    72: [
                        1,
                        132
                    ],
                    76: 131
                },
                {
                    33: [
                        1,
                        133
                    ]
                },
                {
                    33: [
                        2,
                        69
                    ]
                },
                {
                    15: [
                        2,
                        12
                    ],
                    18: [
                        2,
                        12
                    ]
                },
                {
                    14: [
                        2,
                        26
                    ],
                    15: [
                        2,
                        26
                    ],
                    19: [
                        2,
                        26
                    ],
                    29: [
                        2,
                        26
                    ],
                    34: [
                        2,
                        26
                    ],
                    47: [
                        2,
                        26
                    ],
                    48: [
                        2,
                        26
                    ],
                    51: [
                        2,
                        26
                    ],
                    55: [
                        2,
                        26
                    ],
                    60: [
                        2,
                        26
                    ]
                },
                {
                    23: [
                        2,
                        31
                    ],
                    33: [
                        2,
                        31
                    ],
                    54: [
                        2,
                        31
                    ],
                    68: [
                        2,
                        31
                    ],
                    72: [
                        2,
                        31
                    ],
                    75: [
                        2,
                        31
                    ]
                },
                {
                    33: [
                        2,
                        74
                    ],
                    42: 134,
                    74: 135,
                    75: [
                        1,
                        120
                    ]
                },
                {
                    33: [
                        2,
                        71
                    ],
                    65: [
                        2,
                        71
                    ],
                    72: [
                        2,
                        71
                    ],
                    75: [
                        2,
                        71
                    ],
                    80: [
                        2,
                        71
                    ],
                    81: [
                        2,
                        71
                    ],
                    82: [
                        2,
                        71
                    ],
                    83: [
                        2,
                        71
                    ],
                    84: [
                        2,
                        71
                    ],
                    85: [
                        2,
                        71
                    ]
                },
                {
                    33: [
                        2,
                        73
                    ],
                    75: [
                        2,
                        73
                    ]
                },
                {
                    23: [
                        2,
                        29
                    ],
                    33: [
                        2,
                        29
                    ],
                    54: [
                        2,
                        29
                    ],
                    65: [
                        2,
                        29
                    ],
                    68: [
                        2,
                        29
                    ],
                    72: [
                        2,
                        29
                    ],
                    75: [
                        2,
                        29
                    ],
                    80: [
                        2,
                        29
                    ],
                    81: [
                        2,
                        29
                    ],
                    82: [
                        2,
                        29
                    ],
                    83: [
                        2,
                        29
                    ],
                    84: [
                        2,
                        29
                    ],
                    85: [
                        2,
                        29
                    ]
                },
                {
                    14: [
                        2,
                        15
                    ],
                    15: [
                        2,
                        15
                    ],
                    19: [
                        2,
                        15
                    ],
                    29: [
                        2,
                        15
                    ],
                    34: [
                        2,
                        15
                    ],
                    39: [
                        2,
                        15
                    ],
                    44: [
                        2,
                        15
                    ],
                    47: [
                        2,
                        15
                    ],
                    48: [
                        2,
                        15
                    ],
                    51: [
                        2,
                        15
                    ],
                    55: [
                        2,
                        15
                    ],
                    60: [
                        2,
                        15
                    ]
                },
                {
                    72: [
                        1,
                        137
                    ],
                    77: [
                        1,
                        136
                    ]
                },
                {
                    72: [
                        2,
                        100
                    ],
                    77: [
                        2,
                        100
                    ]
                },
                {
                    14: [
                        2,
                        16
                    ],
                    15: [
                        2,
                        16
                    ],
                    19: [
                        2,
                        16
                    ],
                    29: [
                        2,
                        16
                    ],
                    34: [
                        2,
                        16
                    ],
                    44: [
                        2,
                        16
                    ],
                    47: [
                        2,
                        16
                    ],
                    48: [
                        2,
                        16
                    ],
                    51: [
                        2,
                        16
                    ],
                    55: [
                        2,
                        16
                    ],
                    60: [
                        2,
                        16
                    ]
                },
                {
                    33: [
                        1,
                        138
                    ]
                },
                {
                    33: [
                        2,
                        75
                    ]
                },
                {
                    33: [
                        2,
                        32
                    ]
                },
                {
                    72: [
                        2,
                        101
                    ],
                    77: [
                        2,
                        101
                    ]
                },
                {
                    14: [
                        2,
                        17
                    ],
                    15: [
                        2,
                        17
                    ],
                    19: [
                        2,
                        17
                    ],
                    29: [
                        2,
                        17
                    ],
                    34: [
                        2,
                        17
                    ],
                    39: [
                        2,
                        17
                    ],
                    44: [
                        2,
                        17
                    ],
                    47: [
                        2,
                        17
                    ],
                    48: [
                        2,
                        17
                    ],
                    51: [
                        2,
                        17
                    ],
                    55: [
                        2,
                        17
                    ],
                    60: [
                        2,
                        17
                    ]
                }
            ],
            defaultActions: {
                4: [
                    2,
                    1
                ],
                54: [
                    2,
                    55
                ],
                56: [
                    2,
                    20
                ],
                60: [
                    2,
                    57
                ],
                73: [
                    2,
                    81
                ],
                82: [
                    2,
                    85
                ],
                86: [
                    2,
                    18
                ],
                90: [
                    2,
                    89
                ],
                101: [
                    2,
                    53
                ],
                104: [
                    2,
                    93
                ],
                110: [
                    2,
                    19
                ],
                111: [
                    2,
                    77
                ],
                116: [
                    2,
                    97
                ],
                119: [
                    2,
                    63
                ],
                122: [
                    2,
                    69
                ],
                135: [
                    2,
                    75
                ],
                136: [
                    2,
                    32
                ]
            },
            parseError: function parseError(str1, hash) {
                throw new Error(str1);
            },
            parse: function parse5(input) {
                var self = this, stack = [
                    0
                ], vstack = [
                    null
                ], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
                this.lexer.setInput(input);
                this.lexer.yy = this.yy;
                this.yy.lexer = this.lexer;
                this.yy.parser = this;
                if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {
                };
                var yyloc = this.lexer.yylloc;
                lstack.push(yyloc);
                var ranges1 = this.lexer.options && this.lexer.options.ranges;
                if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
                function popStack(n) {
                    stack.length = stack.length - 2 * n;
                    vstack.length = vstack.length - n;
                    lstack.length = lstack.length - n;
                }
                function lex() {
                    var token;
                    token = self.lexer.lex() || 1;
                    if (typeof token !== "number") {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                }
                var symbol, preErrorSymbol, state3, action, a, r2, yyval = {
                }, p2, len, newState, expected;
                while(true){
                    state3 = stack[stack.length - 1];
                    if (this.defaultActions[state3]) {
                        action = this.defaultActions[state3];
                    } else {
                        if (symbol === null || typeof symbol == "undefined") {
                            symbol = lex();
                        }
                        action = table[state3] && table[state3][symbol];
                    }
                    if (typeof action === "undefined" || !action.length || !action[0]) {
                        var errStr = "";
                        if (!recovering) {
                            expected = [];
                            for(p2 in table[state3])if (this.terminals_[p2] && p2 > 2) {
                                expected.push("'" + this.terminals_[p2] + "'");
                            }
                            if (this.lexer.showPosition) {
                                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                            } else {
                                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                            }
                            this.parseError(errStr, {
                                text: this.lexer.match,
                                token: this.terminals_[symbol] || symbol,
                                line: this.lexer.yylineno,
                                loc: yyloc,
                                expected: expected
                            });
                        }
                    }
                    if (action[0] instanceof Array && action.length > 1) {
                        throw new Error("Parse Error: multiple actions possible at state: " + state3 + ", token: " + symbol);
                    }
                    switch(action[0]){
                        case 1:
                            stack.push(symbol);
                            vstack.push(this.lexer.yytext);
                            lstack.push(this.lexer.yylloc);
                            stack.push(action[1]);
                            symbol = null;
                            if (!preErrorSymbol) {
                                yyleng = this.lexer.yyleng;
                                yytext = this.lexer.yytext;
                                yylineno = this.lexer.yylineno;
                                yyloc = this.lexer.yylloc;
                                if (recovering > 0) recovering--;
                            } else {
                                symbol = preErrorSymbol;
                                preErrorSymbol = null;
                            }
                            break;
                        case 2:
                            len = this.productions_[action[1]][1];
                            yyval.$ = vstack[vstack.length - len];
                            yyval._$ = {
                                first_line: lstack[lstack.length - (len || 1)].first_line,
                                last_line: lstack[lstack.length - 1].last_line,
                                first_column: lstack[lstack.length - (len || 1)].first_column,
                                last_column: lstack[lstack.length - 1].last_column
                            };
                            if (ranges1) {
                                yyval._$.range = [
                                    lstack[lstack.length - (len || 1)].range[0],
                                    lstack[lstack.length - 1].range[1]
                                ];
                            }
                            r2 = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                            if (typeof r2 !== "undefined") {
                                return r2;
                            }
                            if (len) {
                                stack = stack.slice(0, -1 * len * 2);
                                vstack = vstack.slice(0, -1 * len);
                                lstack = lstack.slice(0, -1 * len);
                            }
                            stack.push(this.productions_[action[1]][0]);
                            vstack.push(yyval.$);
                            lstack.push(yyval._$);
                            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                            stack.push(newState);
                            break;
                        case 3:
                            return true;
                    }
                }
                return true;
            }
        };
        var lexer1 = function() {
            var lexer2 = {
                EOF: 1,
                parseError: function parseError(str1, hash) {
                    if (this.yy.parser) {
                        this.yy.parser.parseError(str1, hash);
                    } else {
                        throw new Error(str1);
                    }
                },
                setInput: function setInput(input) {
                    this._input = input;
                    this._more = this._less = this.done = false;
                    this.yylineno = this.yyleng = 0;
                    this.yytext = this.matched = this.match = '';
                    this.conditionStack = [
                        'INITIAL'
                    ];
                    this.yylloc = {
                        first_line: 1,
                        first_column: 0,
                        last_line: 1,
                        last_column: 0
                    };
                    if (this.options.ranges) this.yylloc.range = [
                        0,
                        0
                    ];
                    this.offset = 0;
                    return this;
                },
                input: function input() {
                    var ch = this._input[0];
                    this.yytext += ch;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch;
                    this.matched += ch;
                    var lines = ch.match(/(?:\r\n?|\n).*/g);
                    if (lines) {
                        this.yylineno++;
                        this.yylloc.last_line++;
                    } else {
                        this.yylloc.last_column++;
                    }
                    if (this.options.ranges) this.yylloc.range[1]++;
                    this._input = this._input.slice(1);
                    return ch;
                },
                unput: function unput(ch) {
                    var len = ch.length;
                    var lines = ch.split(/(?:\r\n?|\n)/g);
                    this._input = ch + this._input;
                    this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                    this.offset -= len;
                    var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                    this.match = this.match.substr(0, this.match.length - 1);
                    this.matched = this.matched.substr(0, this.matched.length - 1);
                    if (lines.length - 1) this.yylineno -= lines.length - 1;
                    var r2 = this.yylloc.range;
                    this.yylloc = {
                        first_line: this.yylloc.first_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.first_column,
                        last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                    };
                    if (this.options.ranges) {
                        this.yylloc.range = [
                            r2[0],
                            r2[0] + this.yyleng - len
                        ];
                    }
                    return this;
                },
                more: function more() {
                    this._more = true;
                    return this;
                },
                less: function less(n) {
                    this.unput(this.match.slice(n));
                },
                pastInput: function pastInput() {
                    var past = this.matched.substr(0, this.matched.length - this.match.length);
                    return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
                },
                upcomingInput: function upcomingInput() {
                    var next = this.match;
                    if (next.length < 20) {
                        next += this._input.substr(0, 20 - next.length);
                    }
                    return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
                },
                showPosition: function showPosition() {
                    var pre = this.pastInput();
                    var c = new Array(pre.length + 1).join("-");
                    return pre + this.upcomingInput() + "\n" + c + "^";
                },
                next: function next() {
                    if (this.done) {
                        return this.EOF;
                    }
                    if (!this._input) this.done = true;
                    var token, match, tempMatch, index, col, lines;
                    if (!this._more) {
                        this.yytext = '';
                        this.match = '';
                    }
                    var rules = this._currentRules();
                    for(var i = 0; i < rules.length; i++){
                        tempMatch = this._input.match(this.rules[rules[i]]);
                        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                            match = tempMatch;
                            index = i;
                            if (!this.options.flex) break;
                        }
                    }
                    if (match) {
                        lines = match[0].match(/(?:\r\n?|\n).*/g);
                        if (lines) this.yylineno += lines.length;
                        this.yylloc = {
                            first_line: this.yylloc.last_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.last_column,
                            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                        };
                        this.yytext += match[0];
                        this.match += match[0];
                        this.matches = match;
                        this.yyleng = this.yytext.length;
                        if (this.options.ranges) {
                            this.yylloc.range = [
                                this.offset,
                                this.offset += this.yyleng
                            ];
                        }
                        this._more = false;
                        this._input = this._input.slice(match[0].length);
                        this.matched += match[0];
                        token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                        if (this.done && this._input) this.done = false;
                        if (token) return token;
                        else return;
                    }
                    if (this._input === "") {
                        return this.EOF;
                    } else {
                        return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                            text: "",
                            token: null,
                            line: this.yylineno
                        });
                    }
                },
                lex: function lex() {
                    var r2 = this.next();
                    if (typeof r2 !== 'undefined') {
                        return r2;
                    } else {
                        return this.lex();
                    }
                },
                begin: function begin(condition) {
                    this.conditionStack.push(condition);
                },
                popState: function popState() {
                    return this.conditionStack.pop();
                },
                _currentRules: function _currentRules() {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                },
                topState: function topState() {
                    return this.conditionStack[this.conditionStack.length - 2];
                },
                pushState: function begin1(condition) {
                    this.begin(condition);
                }
            };
            lexer2.options = {
            };
            lexer2.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                function strip(start, end) {
                    return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
                }
                var YYSTATE = YY_START;
                switch($avoiding_name_collisions){
                    case 0:
                        if (yy_.yytext.slice(-2) === "\\\\") {
                            strip(0, 1);
                            this.begin("mu");
                        } else if (yy_.yytext.slice(-1) === "\\") {
                            strip(0, 1);
                            this.begin("emu");
                        } else {
                            this.begin("mu");
                        }
                        if (yy_.yytext) return 15;
                        break;
                    case 1:
                        return 15;
                        break;
                    case 2:
                        this.popState();
                        return 15;
                        break;
                    case 3:
                        this.begin('raw');
                        return 15;
                        break;
                    case 4:
                        this.popState();
                        if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                            return 15;
                        } else {
                            strip(5, 9);
                            return 'END_RAW_BLOCK';
                        }
                        break;
                    case 5:
                        return 15;
                        break;
                    case 6:
                        this.popState();
                        return 14;
                        break;
                    case 7:
                        return 65;
                        break;
                    case 8:
                        return 68;
                        break;
                    case 9:
                        return 19;
                        break;
                    case 10:
                        this.popState();
                        this.begin('raw');
                        return 23;
                        break;
                    case 11:
                        return 55;
                        break;
                    case 12:
                        return 60;
                        break;
                    case 13:
                        return 29;
                        break;
                    case 14:
                        return 47;
                        break;
                    case 15:
                        this.popState();
                        return 44;
                        break;
                    case 16:
                        this.popState();
                        return 44;
                        break;
                    case 17:
                        return 34;
                        break;
                    case 18:
                        return 39;
                        break;
                    case 19:
                        return 51;
                        break;
                    case 20:
                        return 48;
                        break;
                    case 21:
                        this.unput(yy_.yytext);
                        this.popState();
                        this.begin('com');
                        break;
                    case 22:
                        this.popState();
                        return 14;
                        break;
                    case 23:
                        return 48;
                        break;
                    case 24:
                        return 73;
                        break;
                    case 25:
                        return 72;
                        break;
                    case 26:
                        return 72;
                        break;
                    case 27:
                        return 87;
                        break;
                    case 28: break;
                    case 29:
                        this.popState();
                        return 54;
                        break;
                    case 30:
                        this.popState();
                        return 33;
                        break;
                    case 31:
                        yy_.yytext = strip(1, 2).replace(/\\"/g, '"');
                        return 80;
                        break;
                    case 32:
                        yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
                        return 80;
                        break;
                    case 33:
                        return 85;
                        break;
                    case 34:
                        return 82;
                        break;
                    case 35:
                        return 82;
                        break;
                    case 36:
                        return 83;
                        break;
                    case 37:
                        return 84;
                        break;
                    case 38:
                        return 81;
                        break;
                    case 39:
                        return 75;
                        break;
                    case 40:
                        return 77;
                        break;
                    case 41:
                        return 72;
                        break;
                    case 42:
                        yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');
                        return 72;
                        break;
                    case 43:
                        return 'INVALID';
                        break;
                    case 44:
                        return 5;
                        break;
                }
            };
            lexer2.rules = [
                /^(?:[^\x00]*?(?=(\{\{)))/,
                /^(?:[^\x00]+)/,
                /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,
                /^(?:\{\{\{\{(?=[^\/]))/,
                /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,
                /^(?:[^\x00]+?(?=(\{\{\{\{)))/,
                /^(?:[\s\S]*?--(~)?\}\})/,
                /^(?:\()/,
                /^(?:\))/,
                /^(?:\{\{\{\{)/,
                /^(?:\}\}\}\})/,
                /^(?:\{\{(~)?>)/,
                /^(?:\{\{(~)?#>)/,
                /^(?:\{\{(~)?#\*?)/,
                /^(?:\{\{(~)?\/)/,
                /^(?:\{\{(~)?\^\s*(~)?\}\})/,
                /^(?:\{\{(~)?\s*else\s*(~)?\}\})/,
                /^(?:\{\{(~)?\^)/,
                /^(?:\{\{(~)?\s*else\b)/,
                /^(?:\{\{(~)?\{)/,
                /^(?:\{\{(~)?&)/,
                /^(?:\{\{(~)?!--)/,
                /^(?:\{\{(~)?![\s\S]*?\}\})/,
                /^(?:\{\{(~)?\*?)/,
                /^(?:=)/,
                /^(?:\.\.)/,
                /^(?:\.(?=([=~}\s\/.)|])))/,
                /^(?:[\/.])/,
                /^(?:\s+)/,
                /^(?:\}(~)?\}\})/,
                /^(?:(~)?\}\})/,
                /^(?:"(\\["]|[^"])*")/,
                /^(?:'(\\[']|[^'])*')/,
                /^(?:@)/,
                /^(?:true(?=([~}\s)])))/,
                /^(?:false(?=([~}\s)])))/,
                /^(?:undefined(?=([~}\s)])))/,
                /^(?:null(?=([~}\s)])))/,
                /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,
                /^(?:as\s+\|)/,
                /^(?:\|)/,
                /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,
                /^(?:\[(\\\]|[^\]])*\])/,
                /^(?:.)/,
                /^(?:$)/
            ];
            lexer2.conditions = {
                "mu": {
                    "rules": [
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44
                    ],
                    "inclusive": false
                },
                "emu": {
                    "rules": [
                        2
                    ],
                    "inclusive": false
                },
                "com": {
                    "rules": [
                        6
                    ],
                    "inclusive": false
                },
                "raw": {
                    "rules": [
                        3,
                        4,
                        5
                    ],
                    "inclusive": false
                },
                "INITIAL": {
                    "rules": [
                        0,
                        1,
                        44
                    ],
                    "inclusive": true
                }
            };
            return lexer2;
        }();
        parser.lexer = lexer1;
        function Parser() {
            this.yy = {
            };
        }
        Parser.prototype = parser;
        parser.Parser = Parser;
        return new Parser();
    }();
    exports22["default"] = handlebars;
    exports22 = exports22["default"];
    return exports22;
}
var exports23 = {
}, _dewExec23 = false;
function dew23() {
    if (_dewExec23) return exports23;
    _dewExec23 = true;
    exports23.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    function Visitor() {
        this.parents = [];
    }
    Visitor.prototype = {
        constructor: Visitor,
        mutating: false,
        acceptKey: function acceptKey(node, name3) {
            var value4 = this.accept(node[name3]);
            if (this.mutating) {
                if (value4 && !Visitor.prototype[value4.type]) {
                    throw new _exception2['default']('Unexpected node type "' + value4.type + '" found when accepting ' + name3 + ' on ' + node.type);
                }
                node[name3] = value4;
            }
        },
        acceptRequired: function acceptRequired(node, name3) {
            this.acceptKey(node, name3);
            if (!node[name3]) {
                throw new _exception2['default'](node.type + ' requires ' + name3);
            }
        },
        acceptArray: function acceptArray(array) {
            for(var i = 0, l = array.length; i < l; i++){
                this.acceptKey(array, i);
                if (!array[i]) {
                    array.splice(i, 1);
                    i--;
                    l--;
                }
            }
        },
        accept: function accept(object) {
            if (!object) {
                return;
            }
            if (!this[object.type]) {
                throw new _exception2['default']('Unknown type: ' + object.type, object);
            }
            if (this.current) {
                this.parents.unshift(this.current);
            }
            this.current = object;
            var ret2 = this[object.type](object);
            this.current = this.parents.shift();
            if (!this.mutating || ret2) {
                return ret2;
            } else if (ret2 !== false) {
                return object;
            }
        },
        Program: function Program(program) {
            this.acceptArray(program.body);
        },
        MustacheStatement: visitSubExpression,
        Decorator: visitSubExpression,
        BlockStatement: visitBlock,
        DecoratorBlock: visitBlock,
        PartialStatement: visitPartial,
        PartialBlockStatement: function PartialBlockStatement(partial3) {
            visitPartial.call(this, partial3);
            this.acceptKey(partial3, 'program');
        },
        ContentStatement: function ContentStatement() {
        },
        CommentStatement: function CommentStatement() {
        },
        SubExpression: visitSubExpression,
        PathExpression: function PathExpression() {
        },
        StringLiteral: function StringLiteral() {
        },
        NumberLiteral: function NumberLiteral() {
        },
        BooleanLiteral: function BooleanLiteral() {
        },
        UndefinedLiteral: function UndefinedLiteral() {
        },
        NullLiteral: function NullLiteral() {
        },
        Hash: function Hash(hash) {
            this.acceptArray(hash.pairs);
        },
        HashPair: function HashPair(pair) {
            this.acceptRequired(pair, 'value');
        }
    };
    function visitSubExpression(mustache) {
        this.acceptRequired(mustache, 'path');
        this.acceptArray(mustache.params);
        this.acceptKey(mustache, 'hash');
    }
    function visitBlock(block) {
        visitSubExpression.call(this, block);
        this.acceptKey(block, 'program');
        this.acceptKey(block, 'inverse');
    }
    function visitPartial(partial3) {
        this.acceptRequired(partial3, 'name');
        this.acceptArray(partial3.params);
        this.acceptKey(partial3, 'hash');
    }
    exports23['default'] = Visitor;
    exports23 = exports23['default'];
    return exports23;
}
var exports24 = {
}, _dewExec24 = false;
function dew24() {
    if (_dewExec24) return exports24;
    _dewExec24 = true;
    exports24.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _visitor = dew23();
    var _visitor2 = _interopRequireDefault(_visitor);
    function WhitespaceControl() {
        var options6 = arguments.length <= 0 || arguments[0] === undefined ? {
        } : arguments[0];
        this.options = options6;
    }
    WhitespaceControl.prototype = new _visitor2['default']();
    WhitespaceControl.prototype.Program = function(program) {
        var doStandalone = !this.options.ignoreStandalone;
        var isRoot = !this.isRootSeen;
        this.isRootSeen = true;
        var body1 = program.body;
        for(var i = 0, l = body1.length; i < l; i++){
            var current = body1[i], strip = this.accept(current);
            if (!strip) {
                continue;
            }
            var _isPrevWhitespace = isPrevWhitespace(body1, i, isRoot), _isNextWhitespace = isNextWhitespace(body1, i, isRoot), openStandalone = strip.openStandalone && _isPrevWhitespace, closeStandalone = strip.closeStandalone && _isNextWhitespace, inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
            if (strip.close) {
                omitRight(body1, i, true);
            }
            if (strip.open) {
                omitLeft(body1, i, true);
            }
            if (doStandalone && inlineStandalone) {
                omitRight(body1, i);
                if (omitLeft(body1, i)) {
                    if (current.type === 'PartialStatement') {
                        current.indent = /([ \t]+$)/.exec(body1[i - 1].original)[1];
                    }
                }
            }
            if (doStandalone && openStandalone) {
                omitRight((current.program || current.inverse).body);
                omitLeft(body1, i);
            }
            if (doStandalone && closeStandalone) {
                omitRight(body1, i);
                omitLeft((current.inverse || current.program).body);
            }
        }
        return program;
    };
    WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
        this.accept(block.program);
        this.accept(block.inverse);
        var program = block.program || block.inverse, inverse = block.program && block.inverse, firstInverse = inverse, lastInverse = inverse;
        if (inverse && inverse.chained) {
            firstInverse = inverse.body[0].program;
            while(lastInverse.chained){
                lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
            }
        }
        var strip = {
            open: block.openStrip.open,
            close: block.closeStrip.close,
            openStandalone: isNextWhitespace(program.body),
            closeStandalone: isPrevWhitespace((firstInverse || program).body)
        };
        if (block.openStrip.close) {
            omitRight(program.body, null, true);
        }
        if (inverse) {
            var inverseStrip = block.inverseStrip;
            if (inverseStrip.open) {
                omitLeft(program.body, null, true);
            }
            if (inverseStrip.close) {
                omitRight(firstInverse.body, null, true);
            }
            if (block.closeStrip.open) {
                omitLeft(lastInverse.body, null, true);
            }
            if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
                omitLeft(program.body);
                omitRight(firstInverse.body);
            }
        } else if (block.closeStrip.open) {
            omitLeft(program.body, null, true);
        }
        return strip;
    };
    WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache) {
        return mustache.strip;
    };
    WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
        var strip = node.strip || {
        };
        return {
            inlineStandalone: true,
            open: strip.open,
            close: strip.close
        };
    };
    function isPrevWhitespace(body1, i, isRoot) {
        if (i === undefined) {
            i = body1.length;
        }
        var prev = body1[i - 1], sibling = body1[i - 2];
        if (!prev) {
            return isRoot;
        }
        if (prev.type === 'ContentStatement') {
            return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
        }
    }
    function isNextWhitespace(body1, i, isRoot) {
        if (i === undefined) {
            i = -1;
        }
        var next = body1[i + 1], sibling = body1[i + 2];
        if (!next) {
            return isRoot;
        }
        if (next.type === 'ContentStatement') {
            return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
        }
    }
    function omitRight(body1, i, multiple) {
        var current = body1[i == null ? 0 : i + 1];
        if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
            return;
        }
        var original = current.value;
        current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
        current.rightStripped = current.value !== original;
    }
    function omitLeft(body1, i, multiple) {
        var current = body1[i == null ? body1.length - 1 : i - 1];
        if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
            return;
        }
        var original = current.value;
        current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
        current.leftStripped = current.value !== original;
        return current.leftStripped;
    }
    exports24['default'] = WhitespaceControl;
    exports24 = exports24['default'];
    return exports24;
}
var exports25 = {
}, _dewExec25 = false;
function dew25() {
    if (_dewExec25) return exports25;
    _dewExec25 = true;
    exports25.__esModule = true;
    exports25.SourceLocation = SourceLocation;
    exports25.id = id2;
    exports25.stripFlags = stripFlags;
    exports25.stripComment = stripComment;
    exports25.preparePath = preparePath;
    exports25.prepareMustache = prepareMustache;
    exports25.prepareRawBlock = prepareRawBlock;
    exports25.prepareBlock = prepareBlock;
    exports25.prepareProgram = prepareProgram;
    exports25.preparePartialBlock = preparePartialBlock;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    function validateClose(open, close) {
        close = close.path ? close.path.original : close;
        if (open.path.original !== close) {
            var errorNode = {
                loc: open.path.loc
            };
            throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
        }
    }
    function SourceLocation(source, locInfo) {
        this.source = source;
        this.start = {
            line: locInfo.first_line,
            column: locInfo.first_column
        };
        this.end = {
            line: locInfo.last_line,
            column: locInfo.last_column
        };
    }
    function id2(token) {
        if (/^\[.*\]$/.test(token)) {
            return token.substring(1, token.length - 1);
        } else {
            return token;
        }
    }
    function stripFlags(open, close) {
        return {
            open: open.charAt(2) === '~',
            close: close.charAt(close.length - 3) === '~'
        };
    }
    function stripComment(comment) {
        return comment.replace(/^\{\{~?!-?-?/, '').replace(/-?-?~?\}\}$/, '');
    }
    function preparePath(data5, parts1, loc) {
        loc = this.locInfo(loc);
        var original = data5 ? '@' : '', dig = [], depth = 0;
        for(var i = 0, l = parts1.length; i < l; i++){
            var part = parts1[i].part, isLiteral = parts1[i].original !== part;
            original += (parts1[i].separator || '') + part;
            if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
                if (dig.length > 0) {
                    throw new _exception2['default']('Invalid path: ' + original, {
                        loc: loc
                    });
                } else if (part === '..') {
                    depth++;
                }
            } else {
                dig.push(part);
            }
        }
        return {
            type: 'PathExpression',
            data: data5,
            depth: depth,
            parts: dig,
            original: original,
            loc: loc
        };
    }
    function prepareMustache(path3, params, hash, open, strip, locInfo) {
        var escapeFlag = open.charAt(3) || open.charAt(2), escaped = escapeFlag !== '{' && escapeFlag !== '&';
        var decorator = /\*/.test(open);
        return {
            type: decorator ? 'Decorator' : 'MustacheStatement',
            path: path3,
            params: params,
            hash: hash,
            escaped: escaped,
            strip: strip,
            loc: this.locInfo(locInfo)
        };
    }
    function prepareRawBlock(openRawBlock, contents, close, locInfo) {
        validateClose(openRawBlock, close);
        locInfo = this.locInfo(locInfo);
        var program = {
            type: 'Program',
            body: contents,
            strip: {
            },
            loc: locInfo
        };
        return {
            type: 'BlockStatement',
            path: openRawBlock.path,
            params: openRawBlock.params,
            hash: openRawBlock.hash,
            program: program,
            openStrip: {
            },
            inverseStrip: {
            },
            closeStrip: {
            },
            loc: locInfo
        };
    }
    function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
        if (close && close.path) {
            validateClose(openBlock, close);
        }
        var decorator = /\*/.test(openBlock.open);
        program.blockParams = openBlock.blockParams;
        var inverse = undefined, inverseStrip = undefined;
        if (inverseAndProgram) {
            if (decorator) {
                throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
            }
            if (inverseAndProgram.chain) {
                inverseAndProgram.program.body[0].closeStrip = close.strip;
            }
            inverseStrip = inverseAndProgram.strip;
            inverse = inverseAndProgram.program;
        }
        if (inverted) {
            inverted = inverse;
            inverse = program;
            program = inverted;
        }
        return {
            type: decorator ? 'DecoratorBlock' : 'BlockStatement',
            path: openBlock.path,
            params: openBlock.params,
            hash: openBlock.hash,
            program: program,
            inverse: inverse,
            openStrip: openBlock.strip,
            inverseStrip: inverseStrip,
            closeStrip: close && close.strip,
            loc: this.locInfo(locInfo)
        };
    }
    function prepareProgram(statements, loc) {
        if (!loc && statements.length) {
            var firstLoc = statements[0].loc, lastLoc = statements[statements.length - 1].loc;
            if (firstLoc && lastLoc) {
                loc = {
                    source: firstLoc.source,
                    start: {
                        line: firstLoc.start.line,
                        column: firstLoc.start.column
                    },
                    end: {
                        line: lastLoc.end.line,
                        column: lastLoc.end.column
                    }
                };
            }
        }
        return {
            type: 'Program',
            body: statements,
            strip: {
            },
            loc: loc
        };
    }
    function preparePartialBlock(open, program, close, locInfo) {
        validateClose(open, close);
        return {
            type: 'PartialBlockStatement',
            name: open.path,
            params: open.params,
            hash: open.hash,
            program: program,
            openStrip: open.strip,
            closeStrip: close && close.strip,
            loc: this.locInfo(locInfo)
        };
    }
    return exports25;
}
var exports26 = {
}, _dewExec26 = false;
function dew26() {
    if (_dewExec26) return exports26;
    _dewExec26 = true;
    exports26.__esModule = true;
    exports26.parseWithoutProcessing = parseWithoutProcessing;
    exports26.parse = parse6;
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {
            };
            if (obj != null) {
                for(var key7 in obj){
                    if (Object.prototype.hasOwnProperty.call(obj, key7)) newObj[key7] = obj[key7];
                }
            }
            newObj['default'] = obj;
            return newObj;
        }
    }
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _parser = dew22();
    var _parser2 = _interopRequireDefault(_parser);
    var _whitespaceControl = dew24();
    var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);
    var _helpers = dew25();
    var Helpers = _interopRequireWildcard(_helpers);
    var _utils = dew();
    exports26.parser = _parser2['default'];
    var yy = {
    };
    _utils.extend(yy, Helpers);
    function parseWithoutProcessing(input, options6) {
        if (input.type === 'Program') {
            return input;
        }
        _parser2['default'].yy = yy;
        yy.locInfo = function(locInfo) {
            return new yy.SourceLocation(options6 && options6.srcName, locInfo);
        };
        var ast = _parser2['default'].parse(input);
        return ast;
    }
    function parse6(input, options6) {
        var ast = parseWithoutProcessing(input, options6);
        var strip = new _whitespaceControl2['default'](options6);
        return strip.accept(ast);
    }
    return exports26;
}
var exports27 = {
}, _dewExec27 = false;
function dew27() {
    if (_dewExec27) return exports27;
    _dewExec27 = true;
    exports27.__esModule = true;
    exports27.Compiler = Compiler;
    exports27.precompile = precompile;
    exports27.compile = compile2;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    var _utils = dew();
    var _ast = dew21();
    var _ast2 = _interopRequireDefault(_ast);
    var slice = [].slice;
    function Compiler() {
    }
    Compiler.prototype = {
        compiler: Compiler,
        equals: function equals1(other) {
            var len = this.opcodes.length;
            if (other.opcodes.length !== len) {
                return false;
            }
            for(var i = 0; i < len; i++){
                var opcode = this.opcodes[i], otherOpcode = other.opcodes[i];
                if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
                    return false;
                }
            }
            len = this.children.length;
            for(var i = 0; i < len; i++){
                if (!this.children[i].equals(other.children[i])) {
                    return false;
                }
            }
            return true;
        },
        guid: 0,
        compile: function compile2(program, options6) {
            this.sourceNode = [];
            this.opcodes = [];
            this.children = [];
            this.options = options6;
            this.stringParams = options6.stringParams;
            this.trackIds = options6.trackIds;
            options6.blockParams = options6.blockParams || [];
            options6.knownHelpers = _utils.extend(Object.create(null), {
                helperMissing: true,
                blockHelperMissing: true,
                each: true,
                'if': true,
                unless: true,
                'with': true,
                log: true,
                lookup: true
            }, options6.knownHelpers);
            return this.accept(program);
        },
        compileProgram: function compileProgram(program) {
            var childCompiler = new this.compiler(), result = childCompiler.compile(program, this.options), guid = this.guid++;
            this.usePartial = this.usePartial || result.usePartial;
            this.children[guid] = result;
            this.useDepths = this.useDepths || result.useDepths;
            return guid;
        },
        accept: function accept(node) {
            if (!this[node.type]) {
                throw new _exception2['default']('Unknown type: ' + node.type, node);
            }
            this.sourceNode.unshift(node);
            var ret2 = this[node.type](node);
            this.sourceNode.shift();
            return ret2;
        },
        Program: function Program(program) {
            this.options.blockParams.unshift(program.blockParams);
            var body1 = program.body, bodyLength = body1.length;
            for(var i = 0; i < bodyLength; i++){
                this.accept(body1[i]);
            }
            this.options.blockParams.shift();
            this.isSimple = bodyLength === 1;
            this.blockParams = program.blockParams ? program.blockParams.length : 0;
            return this;
        },
        BlockStatement: function BlockStatement(block) {
            transformLiteralToPath(block);
            var program = block.program, inverse = block.inverse;
            program = program && this.compileProgram(program);
            inverse = inverse && this.compileProgram(inverse);
            var type4 = this.classifySexpr(block);
            if (type4 === 'helper') {
                this.helperSexpr(block, program, inverse);
            } else if (type4 === 'simple') {
                this.simpleSexpr(block);
                this.opcode('pushProgram', program);
                this.opcode('pushProgram', inverse);
                this.opcode('emptyHash');
                this.opcode('blockValue', block.path.original);
            } else {
                this.ambiguousSexpr(block, program, inverse);
                this.opcode('pushProgram', program);
                this.opcode('pushProgram', inverse);
                this.opcode('emptyHash');
                this.opcode('ambiguousBlockValue');
            }
            this.opcode('append');
        },
        DecoratorBlock: function DecoratorBlock(decorator) {
            var program = decorator.program && this.compileProgram(decorator.program);
            var params = this.setupFullMustacheParams(decorator, program, undefined), path3 = decorator.path;
            this.useDecorators = true;
            this.opcode('registerDecorator', params.length, path3.original);
        },
        PartialStatement: function PartialStatement(partial3) {
            this.usePartial = true;
            var program = partial3.program;
            if (program) {
                program = this.compileProgram(partial3.program);
            }
            var params = partial3.params;
            if (params.length > 1) {
                throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial3);
            } else if (!params.length) {
                if (this.options.explicitPartialContext) {
                    this.opcode('pushLiteral', 'undefined');
                } else {
                    params.push({
                        type: 'PathExpression',
                        parts: [],
                        depth: 0
                    });
                }
            }
            var partialName = partial3.name.original, isDynamic = partial3.name.type === 'SubExpression';
            if (isDynamic) {
                this.accept(partial3.name);
            }
            this.setupFullMustacheParams(partial3, program, undefined, true);
            var indent = partial3.indent || '';
            if (this.options.preventIndent && indent) {
                this.opcode('appendContent', indent);
                indent = '';
            }
            this.opcode('invokePartial', isDynamic, partialName, indent);
            this.opcode('append');
        },
        PartialBlockStatement: function PartialBlockStatement(partialBlock) {
            this.PartialStatement(partialBlock);
        },
        MustacheStatement: function MustacheStatement(mustache) {
            this.SubExpression(mustache);
            if (mustache.escaped && !this.options.noEscape) {
                this.opcode('appendEscaped');
            } else {
                this.opcode('append');
            }
        },
        Decorator: function Decorator(decorator) {
            this.DecoratorBlock(decorator);
        },
        ContentStatement: function ContentStatement(content) {
            if (content.value) {
                this.opcode('appendContent', content.value);
            }
        },
        CommentStatement: function CommentStatement() {
        },
        SubExpression: function SubExpression(sexpr) {
            transformLiteralToPath(sexpr);
            var type4 = this.classifySexpr(sexpr);
            if (type4 === 'simple') {
                this.simpleSexpr(sexpr);
            } else if (type4 === 'helper') {
                this.helperSexpr(sexpr);
            } else {
                this.ambiguousSexpr(sexpr);
            }
        },
        ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
            var path3 = sexpr.path, name3 = path3.parts[0], isBlock = program != null || inverse != null;
            this.opcode('getContext', path3.depth);
            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);
            path3.strict = true;
            this.accept(path3);
            this.opcode('invokeAmbiguous', name3, isBlock);
        },
        simpleSexpr: function simpleSexpr(sexpr) {
            var path3 = sexpr.path;
            path3.strict = true;
            this.accept(path3);
            this.opcode('resolvePossibleLambda');
        },
        helperSexpr: function helperSexpr(sexpr, program, inverse) {
            var params = this.setupFullMustacheParams(sexpr, program, inverse), path3 = sexpr.path, name3 = path3.parts[0];
            if (this.options.knownHelpers[name3]) {
                this.opcode('invokeKnownHelper', params.length, name3);
            } else if (this.options.knownHelpersOnly) {
                throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name3, sexpr);
            } else {
                path3.strict = true;
                path3.falsy = true;
                this.accept(path3);
                this.opcode('invokeHelper', params.length, path3.original, _ast2['default'].helpers.simpleId(path3));
            }
        },
        PathExpression: function PathExpression(path3) {
            this.addDepth(path3.depth);
            this.opcode('getContext', path3.depth);
            var name3 = path3.parts[0], scoped = _ast2['default'].helpers.scopedId(path3), blockParamId = !path3.depth && !scoped && this.blockParamIndex(name3);
            if (blockParamId) {
                this.opcode('lookupBlockParam', blockParamId, path3.parts);
            } else if (!name3) {
                this.opcode('pushContext');
            } else if (path3.data) {
                this.options.data = true;
                this.opcode('lookupData', path3.depth, path3.parts, path3.strict);
            } else {
                this.opcode('lookupOnContext', path3.parts, path3.falsy, path3.strict, scoped);
            }
        },
        StringLiteral: function StringLiteral(string) {
            this.opcode('pushString', string.value);
        },
        NumberLiteral: function NumberLiteral(number) {
            this.opcode('pushLiteral', number.value);
        },
        BooleanLiteral: function BooleanLiteral(bool) {
            this.opcode('pushLiteral', bool.value);
        },
        UndefinedLiteral: function UndefinedLiteral() {
            this.opcode('pushLiteral', 'undefined');
        },
        NullLiteral: function NullLiteral() {
            this.opcode('pushLiteral', 'null');
        },
        Hash: function Hash(hash) {
            var pairs = hash.pairs, i = 0, l = pairs.length;
            this.opcode('pushHash');
            for(; i < l; i++){
                this.pushParam(pairs[i].value);
            }
            while(i--){
                this.opcode('assignToHash', pairs[i].key);
            }
            this.opcode('popHash');
        },
        opcode: function opcode(name3) {
            this.opcodes.push({
                opcode: name3,
                args: slice.call(arguments, 1),
                loc: this.sourceNode[0].loc
            });
        },
        addDepth: function addDepth(depth) {
            if (!depth) {
                return;
            }
            this.useDepths = true;
        },
        classifySexpr: function classifySexpr(sexpr) {
            var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);
            var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
            var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);
            var isEligible = !isBlockParam && (isHelper || isSimple);
            if (isEligible && !isHelper) {
                var _name = sexpr.path.parts[0], options6 = this.options;
                if (options6.knownHelpers[_name]) {
                    isHelper = true;
                } else if (options6.knownHelpersOnly) {
                    isEligible = false;
                }
            }
            if (isHelper) {
                return 'helper';
            } else if (isEligible) {
                return 'ambiguous';
            } else {
                return 'simple';
            }
        },
        pushParams: function pushParams(params) {
            for(var i = 0, l = params.length; i < l; i++){
                this.pushParam(params[i]);
            }
        },
        pushParam: function pushParam(val) {
            var value4 = val.value != null ? val.value : val.original || '';
            if (this.stringParams) {
                if (value4.replace) {
                    value4 = value4.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
                }
                if (val.depth) {
                    this.addDepth(val.depth);
                }
                this.opcode('getContext', val.depth || 0);
                this.opcode('pushStringParam', value4, val.type);
                if (val.type === 'SubExpression') {
                    this.accept(val);
                }
            } else {
                if (this.trackIds) {
                    var blockParamIndex = undefined;
                    if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
                        blockParamIndex = this.blockParamIndex(val.parts[0]);
                    }
                    if (blockParamIndex) {
                        var blockParamChild = val.parts.slice(1).join('.');
                        this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
                    } else {
                        value4 = val.original || value4;
                        if (value4.replace) {
                            value4 = value4.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
                        }
                        this.opcode('pushId', val.type, value4);
                    }
                }
                this.accept(val);
            }
        },
        setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
            var params = sexpr.params;
            this.pushParams(params);
            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);
            if (sexpr.hash) {
                this.accept(sexpr.hash);
            } else {
                this.opcode('emptyHash', omitEmpty);
            }
            return params;
        },
        blockParamIndex: function blockParamIndex(name3) {
            for(var depth = 0, len = this.options.blockParams.length; depth < len; depth++){
                var blockParams = this.options.blockParams[depth], param = blockParams && _utils.indexOf(blockParams, name3);
                if (blockParams && param >= 0) {
                    return [
                        depth,
                        param
                    ];
                }
            }
        }
    };
    function precompile(input, options7, env) {
        if (input == null || typeof input !== 'string' && input.type !== 'Program') {
            throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
        }
        options7 = options7 || {
        };
        if (!('data' in options7)) {
            options7.data = true;
        }
        if (options7.compat) {
            options7.useDepths = true;
        }
        var ast = env.parse(input, options7), environment = new env.Compiler().compile(ast, options7);
        return new env.JavaScriptCompiler().compile(environment, options7);
    }
    function compile2(input, options7, env) {
        if (options7 === undefined) options7 = {
        };
        if (input == null || typeof input !== 'string' && input.type !== 'Program') {
            throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
        }
        options7 = _utils.extend({
        }, options7);
        if (!('data' in options7)) {
            options7.data = true;
        }
        if (options7.compat) {
            options7.useDepths = true;
        }
        var compiled = undefined;
        function compileInput() {
            var ast = env.parse(input, options7), environment = new env.Compiler().compile(ast, options7), templateSpec = new env.JavaScriptCompiler().compile(environment, options7, undefined, true);
            return env.template(templateSpec);
        }
        function ret2(context3, execOptions) {
            if (!compiled) {
                compiled = compileInput();
            }
            return compiled.call(this, context3, execOptions);
        }
        ret2._setup = function(setupOptions) {
            if (!compiled) {
                compiled = compileInput();
            }
            return compiled._setup(setupOptions);
        };
        ret2._child = function(i, data5, blockParams, depths) {
            if (!compiled) {
                compiled = compileInput();
            }
            return compiled._child(i, data5, blockParams, depths);
        };
        return ret2;
    }
    function argEquals(a, b) {
        if (a === b) {
            return true;
        }
        if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
            for(var i = 0; i < a.length; i++){
                if (!argEquals(a[i], b[i])) {
                    return false;
                }
            }
            return true;
        }
    }
    function transformLiteralToPath(sexpr) {
        if (!sexpr.path.parts) {
            var literal = sexpr.path;
            sexpr.path = {
                type: 'PathExpression',
                data: false,
                depth: 0,
                parts: [
                    literal.original + ''
                ],
                original: literal.original + '',
                loc: literal.loc
            };
        }
    }
    return exports27;
}
var exports28 = {
}, _dewExec28 = false;
function dew28() {
    if (_dewExec28) return exports28;
    _dewExec28 = true;
    var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
    exports28.encode = function(number) {
        if (0 <= number && number < intToCharMap.length) {
            return intToCharMap[number];
        }
        throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports28.decode = function(charCode) {
        var bigA = 65;
        var bigZ = 90;
        var littleA = 97;
        var littleZ = 122;
        var zero = 48;
        var nine = 57;
        var plus = 43;
        var slash = 47;
        var littleOffset = 26;
        var numberOffset = 52;
        if (bigA <= charCode && charCode <= bigZ) {
            return charCode - bigA;
        }
        if (littleA <= charCode && charCode <= littleZ) {
            return charCode - littleA + littleOffset;
        }
        if (zero <= charCode && charCode <= nine) {
            return charCode - zero + numberOffset;
        }
        if (charCode == plus) {
            return 62;
        }
        if (charCode == slash) {
            return 63;
        }
        return -1;
    };
    return exports28;
}
var exports29 = {
}, _dewExec29 = false;
function dew29() {
    if (_dewExec29) return exports29;
    _dewExec29 = true;
    var base64 = dew28();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
    }
    exports29.encode = function base64VLQ_encode(aValue) {
        var encoded = "";
        var digit;
        var vlq = toVLQSigned(aValue);
        do {
            digit = vlq & VLQ_BASE_MASK;
            vlq >>>= VLQ_BASE_SHIFT;
            if (vlq > 0) {
                digit |= VLQ_CONTINUATION_BIT;
            }
            encoded += base64.encode(digit);
        }while (vlq > 0)
        return encoded;
    };
    exports29.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
        var strLen = aStr.length;
        var result = 0;
        var shift = 0;
        var continuation, digit;
        do {
            if (aIndex >= strLen) {
                throw new Error("Expected more digits in base 64 VLQ value.");
            }
            digit = base64.decode(aStr.charCodeAt(aIndex++));
            if (digit === -1) {
                throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
            }
            continuation = !!(digit & VLQ_CONTINUATION_BIT);
            digit &= VLQ_BASE_MASK;
            result = result + (digit << shift);
            shift += VLQ_BASE_SHIFT;
        }while (continuation)
        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aIndex;
    };
    return exports29;
}
var exports30 = {
}, _dewExec30 = false;
function dew30() {
    if (_dewExec30) return exports30;
    _dewExec30 = true;
    function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
            return aArgs[aName];
        } else if (arguments.length === 3) {
            return aDefaultValue;
        } else {
            throw new Error('"' + aName + '" is a required argument.');
        }
    }
    exports30.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
        var match = aUrl.match(urlRegexp);
        if (!match) {
            return null;
        }
        return {
            scheme: match[1],
            auth: match[2],
            host: match[3],
            port: match[4],
            path: match[5]
        };
    }
    exports30.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
        var url1 = '';
        if (aParsedUrl.scheme) {
            url1 += aParsedUrl.scheme + ':';
        }
        url1 += '//';
        if (aParsedUrl.auth) {
            url1 += aParsedUrl.auth + '@';
        }
        if (aParsedUrl.host) {
            url1 += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
            url1 += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
            url1 += aParsedUrl.path;
        }
        return url1;
    }
    exports30.urlGenerate = urlGenerate;
    function normalize4(aPath) {
        var path3 = aPath;
        var url1 = urlParse(aPath);
        if (url1) {
            if (!url1.path) {
                return aPath;
            }
            path3 = url1.path;
        }
        var isAbsolute3 = exports30.isAbsolute(path3);
        var parts1 = path3.split(/\/+/);
        for(var part, up = 0, i = parts1.length - 1; i >= 0; i--){
            part = parts1[i];
            if (part === '.') {
                parts1.splice(i, 1);
            } else if (part === '..') {
                up++;
            } else if (up > 0) {
                if (part === '') {
                    parts1.splice(i + 1, up);
                    up = 0;
                } else {
                    parts1.splice(i, 2);
                    up--;
                }
            }
        }
        path3 = parts1.join('/');
        if (path3 === '') {
            path3 = isAbsolute3 ? '/' : '.';
        }
        if (url1) {
            url1.path = path3;
            return urlGenerate(url1);
        }
        return path3;
    }
    exports30.normalize = normalize4;
    function join3(aRoot, aPath) {
        if (aRoot === "") {
            aRoot = ".";
        }
        if (aPath === "") {
            aPath = ".";
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
            aRoot = aRootUrl.path || '/';
        }
        if (aPathUrl && !aPathUrl.scheme) {
            if (aRootUrl) {
                aPathUrl.scheme = aRootUrl.scheme;
            }
            return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
            return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
            aRootUrl.host = aPath;
            return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === '/' ? aPath : normalize4(aRoot.replace(/\/+$/, '') + '/' + aPath);
        if (aRootUrl) {
            aRootUrl.path = joined;
            return urlGenerate(aRootUrl);
        }
        return joined;
    }
    exports30.join = join3;
    exports30.isAbsolute = function(aPath) {
        return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
    };
    function relative3(aRoot, aPath) {
        if (aRoot === "") {
            aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, '');
        var level = 0;
        while(aPath.indexOf(aRoot + '/') !== 0){
            var index = aRoot.lastIndexOf("/");
            if (index < 0) {
                return aPath;
            }
            aRoot = aRoot.slice(0, index);
            if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                return aPath;
            }
            ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports30.relative = relative3;
    var supportsNullProto = function() {
        var obj = Object.create(null);
        return !('__proto__' in obj);
    }();
    function identity(s1) {
        return s1;
    }
    function toSetString(aStr) {
        if (isProtoString(aStr)) {
            return '$' + aStr;
        }
        return aStr;
    }
    exports30.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
        if (isProtoString(aStr)) {
            return aStr.slice(1);
        }
        return aStr;
    }
    exports30.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s1) {
        if (!s1) {
            return false;
        }
        var length = s1.length;
        if (length < 9) {
            return false;
        }
        if (s1.charCodeAt(length - 1) !== 95 || s1.charCodeAt(length - 2) !== 95 || s1.charCodeAt(length - 3) !== 111 || s1.charCodeAt(length - 4) !== 116 || s1.charCodeAt(length - 5) !== 111 || s1.charCodeAt(length - 6) !== 114 || s1.charCodeAt(length - 7) !== 112 || s1.charCodeAt(length - 8) !== 95 || s1.charCodeAt(length - 9) !== 95) {
            return false;
        }
        for(var i = length - 10; i >= 0; i--){
            if (s1.charCodeAt(i) !== 36) {
                return false;
            }
        }
        return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
            return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
            return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
    }
    exports30.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
            return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
            return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
    }
    exports30.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
            return 0;
        }
        if (aStr1 === null) {
            return 1;
        }
        if (aStr2 === null) {
            return -1;
        }
        if (aStr1 > aStr2) {
            return 1;
        }
        return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
            return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
            return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
    }
    exports30.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str1) {
        return JSON.parse(str1.replace(/^\)]}'[^\n]*\n/, ''));
    }
    exports30.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || '';
        if (sourceRoot) {
            if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
                sourceRoot += '/';
            }
            sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
            var parsed = urlParse(sourceMapURL);
            if (!parsed) {
                throw new Error("sourceMapURL could not be parsed");
            }
            if (parsed.path) {
                var index = parsed.path.lastIndexOf('/');
                if (index >= 0) {
                    parsed.path = parsed.path.substring(0, index + 1);
                }
            }
            sourceURL = join3(urlGenerate(parsed), sourceURL);
        }
        return normalize4(sourceURL);
    }
    exports30.computeSourceURL = computeSourceURL;
    return exports30;
}
var exports31 = {
}, _dewExec31 = false;
var _global2 = typeof self !== "undefined" ? self : global;
function dew31() {
    if (_dewExec31) return exports31;
    _dewExec31 = true;
    var util = dew30();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
        (this || _global2)._array = [];
        (this || _global2)._set = hasNativeMap ? new Map() : Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set = new ArraySet();
        for(var i = 0, len = aArray.length; i < len; i++){
            set.add(aArray[i], aAllowDuplicates);
        }
        return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
        return hasNativeMap ? (this || _global2)._set.size : Object.getOwnPropertyNames((this || _global2)._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
        var isDuplicate = hasNativeMap ? this.has(aStr) : has.call((this || _global2)._set, sStr);
        var idx = (this || _global2)._array.length;
        if (!isDuplicate || aAllowDuplicates) {
            (this || _global2)._array.push(aStr);
        }
        if (!isDuplicate) {
            if (hasNativeMap) {
                (this || _global2)._set.set(aStr, idx);
            } else {
                (this || _global2)._set[sStr] = idx;
            }
        }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
        if (hasNativeMap) {
            return (this || _global2)._set.has(aStr);
        } else {
            var sStr = util.toSetString(aStr);
            return has.call((this || _global2)._set, sStr);
        }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        if (hasNativeMap) {
            var idx = (this || _global2)._set.get(aStr);
            if (idx >= 0) {
                return idx;
            }
        } else {
            var sStr = util.toSetString(aStr);
            if (has.call((this || _global2)._set, sStr)) {
                return (this || _global2)._set[sStr];
            }
        }
        throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < (this || _global2)._array.length) {
            return (this || _global2)._array[aIdx];
        }
        throw new Error('No element indexed by ' + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
        return (this || _global2)._array.slice();
    };
    exports31.ArraySet = ArraySet;
    return exports31;
}
var exports32 = {
}, _dewExec32 = false;
var _global3 = typeof self !== "undefined" ? self : global;
function dew32() {
    if (_dewExec32) return exports32;
    _dewExec32 = true;
    var util = dew30();
    function generatedPositionAfter(mappingA, mappingB) {
        var lineA = mappingA.generatedLine;
        var lineB = mappingB.generatedLine;
        var columnA = mappingA.generatedColumn;
        var columnB = mappingB.generatedColumn;
        return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
        (this || _global3)._array = [];
        (this || _global3)._sorted = true;
        (this || _global3)._last = {
            generatedLine: -1,
            generatedColumn: 0
        };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
        (this || _global3)._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
        if (generatedPositionAfter((this || _global3)._last, aMapping)) {
            (this || _global3)._last = aMapping;
            (this || _global3)._array.push(aMapping);
        } else {
            (this || _global3)._sorted = false;
            (this || _global3)._array.push(aMapping);
        }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
        if (!(this || _global3)._sorted) {
            (this || _global3)._array.sort(util.compareByGeneratedPositionsInflated);
            (this || _global3)._sorted = true;
        }
        return (this || _global3)._array;
    };
    exports32.MappingList = MappingList;
    return exports32;
}
var exports33 = {
}, _dewExec33 = false;
var _global4 = typeof self !== "undefined" ? self : global;
function dew33() {
    if (_dewExec33) return exports33;
    _dewExec33 = true;
    var base64VLQ = dew29();
    var util = dew30();
    var ArraySet = dew31().ArraySet;
    var MappingList = dew32().MappingList;
    function SourceMapGenerator(aArgs) {
        if (!aArgs) {
            aArgs = {
            };
        }
        (this || _global4)._file = util.getArg(aArgs, 'file', null);
        (this || _global4)._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
        (this || _global4)._skipValidation = util.getArg(aArgs, 'skipValidation', false);
        (this || _global4)._sources = new ArraySet();
        (this || _global4)._names = new ArraySet();
        (this || _global4)._mappings = new MappingList();
        (this || _global4)._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
            file: aSourceMapConsumer.file,
            sourceRoot: sourceRoot
        });
        aSourceMapConsumer.eachMapping(function(mapping) {
            var newMapping = {
                generated: {
                    line: mapping.generatedLine,
                    column: mapping.generatedColumn
                }
            };
            if (mapping.source != null) {
                newMapping.source = mapping.source;
                if (sourceRoot != null) {
                    newMapping.source = util.relative(sourceRoot, newMapping.source);
                }
                newMapping.original = {
                    line: mapping.originalLine,
                    column: mapping.originalColumn
                };
                if (mapping.name != null) {
                    newMapping.name = mapping.name;
                }
            }
            generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
            var sourceRelative = sourceFile;
            if (sourceRoot !== null) {
                sourceRelative = util.relative(sourceRoot, sourceFile);
            }
            if (!generator._sources.has(sourceRelative)) {
                generator._sources.add(sourceRelative);
            }
            var content = aSourceMapConsumer.sourceContentFor(sourceFile);
            if (content != null) {
                generator.setSourceContent(sourceFile, content);
            }
        });
        return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
        var generated = util.getArg(aArgs, 'generated');
        var original = util.getArg(aArgs, 'original', null);
        var source = util.getArg(aArgs, 'source', null);
        var name3 = util.getArg(aArgs, 'name', null);
        if (!(this || _global4)._skipValidation) {
            this._validateMapping(generated, original, source, name3);
        }
        if (source != null) {
            source = String(source);
            if (!(this || _global4)._sources.has(source)) {
                (this || _global4)._sources.add(source);
            }
        }
        if (name3 != null) {
            name3 = String(name3);
            if (!(this || _global4)._names.has(name3)) {
                (this || _global4)._names.add(name3);
            }
        }
        (this || _global4)._mappings.add({
            generatedLine: generated.line,
            generatedColumn: generated.column,
            originalLine: original != null && original.line,
            originalColumn: original != null && original.column,
            source: source,
            name: name3
        });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if ((this || _global4)._sourceRoot != null) {
            source = util.relative((this || _global4)._sourceRoot, source);
        }
        if (aSourceContent != null) {
            if (!(this || _global4)._sourcesContents) {
                (this || _global4)._sourcesContents = Object.create(null);
            }
            (this || _global4)._sourcesContents[util.toSetString(source)] = aSourceContent;
        } else if ((this || _global4)._sourcesContents) {
            delete (this || _global4)._sourcesContents[util.toSetString(source)];
            if (Object.keys((this || _global4)._sourcesContents).length === 0) {
                (this || _global4)._sourcesContents = null;
            }
        }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        if (aSourceFile == null) {
            if (aSourceMapConsumer.file == null) {
                throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
            }
            sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = (this || _global4)._sourceRoot;
        if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
        }
        var newSources = new ArraySet();
        var newNames = new ArraySet();
        (this || _global4)._mappings.unsortedForEach(function(mapping) {
            if (mapping.source === sourceFile && mapping.originalLine != null) {
                var original = aSourceMapConsumer.originalPositionFor({
                    line: mapping.originalLine,
                    column: mapping.originalColumn
                });
                if (original.source != null) {
                    mapping.source = original.source;
                    if (aSourceMapPath != null) {
                        mapping.source = util.join(aSourceMapPath, mapping.source);
                    }
                    if (sourceRoot != null) {
                        mapping.source = util.relative(sourceRoot, mapping.source);
                    }
                    mapping.originalLine = original.line;
                    mapping.originalColumn = original.column;
                    if (original.name != null) {
                        mapping.name = original.name;
                    }
                }
            }
            var source = mapping.source;
            if (source != null && !newSources.has(source)) {
                newSources.add(source);
            }
            var name3 = mapping.name;
            if (name3 != null && !newNames.has(name3)) {
                newNames.add(name3);
            }
        }, this || _global4);
        (this || _global4)._sources = newSources;
        (this || _global4)._names = newNames;
        aSourceMapConsumer.sources.forEach(function(sourceFile1) {
            var content = aSourceMapConsumer.sourceContentFor(sourceFile1);
            if (content != null) {
                if (aSourceMapPath != null) {
                    sourceFile1 = util.join(aSourceMapPath, sourceFile1);
                }
                if (sourceRoot != null) {
                    sourceFile1 = util.relative(sourceRoot, sourceFile1);
                }
                this.setSourceContent(sourceFile1, content);
            }
        }, this || _global4);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
        if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
            throw new Error('original.line and original.column are not numbers -- you probably meant to omit ' + 'the original mapping entirely and only map the generated position. If so, pass ' + 'null for the original mapping instead of an object with empty or null values.');
        }
        if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
            return;
        } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
            return;
        } else {
            throw new Error('Invalid mapping: ' + JSON.stringify({
                generated: aGenerated,
                source: aSource,
                original: aOriginal,
                name: aName
            }));
        }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = '';
        var next;
        var mapping;
        var nameIdx;
        var sourceIdx;
        var mappings = (this || _global4)._mappings.toArray();
        for(var i = 0, len = mappings.length; i < len; i++){
            mapping = mappings[i];
            next = '';
            if (mapping.generatedLine !== previousGeneratedLine) {
                previousGeneratedColumn = 0;
                while(mapping.generatedLine !== previousGeneratedLine){
                    next += ';';
                    previousGeneratedLine++;
                }
            } else {
                if (i > 0) {
                    if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                        continue;
                    }
                    next += ',';
                }
            }
            next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
            previousGeneratedColumn = mapping.generatedColumn;
            if (mapping.source != null) {
                sourceIdx = (this || _global4)._sources.indexOf(mapping.source);
                next += base64VLQ.encode(sourceIdx - previousSource);
                previousSource = sourceIdx;
                next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
                previousOriginalLine = mapping.originalLine - 1;
                next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
                previousOriginalColumn = mapping.originalColumn;
                if (mapping.name != null) {
                    nameIdx = (this || _global4)._names.indexOf(mapping.name);
                    next += base64VLQ.encode(nameIdx - previousName);
                    previousName = nameIdx;
                }
            }
            result += next;
        }
        return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function(source) {
            if (!(this || _global4)._sourcesContents) {
                return null;
            }
            if (aSourceRoot != null) {
                source = util.relative(aSourceRoot, source);
            }
            var key8 = util.toSetString(source);
            return Object.prototype.hasOwnProperty.call((this || _global4)._sourcesContents, key8) ? (this || _global4)._sourcesContents[key8] : null;
        }, this || _global4);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
        var map = {
            version: (this || _global4)._version,
            sources: (this || _global4)._sources.toArray(),
            names: (this || _global4)._names.toArray(),
            mappings: this._serializeMappings()
        };
        if ((this || _global4)._file != null) {
            map.file = (this || _global4)._file;
        }
        if ((this || _global4)._sourceRoot != null) {
            map.sourceRoot = (this || _global4)._sourceRoot;
        }
        if ((this || _global4)._sourcesContents) {
            map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }
        return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
    };
    exports33.SourceMapGenerator = SourceMapGenerator;
    return exports33;
}
var exports34 = {
}, _dewExec34 = false;
function dew34() {
    if (_dewExec34) return exports34;
    _dewExec34 = true;
    exports34.GREATEST_LOWER_BOUND = 1;
    exports34.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
            return mid;
        } else if (cmp > 0) {
            if (aHigh - mid > 1) {
                return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
            }
            if (aBias == exports34.LEAST_UPPER_BOUND) {
                return aHigh < aHaystack.length ? aHigh : -1;
            } else {
                return mid;
            }
        } else {
            if (mid - aLow > 1) {
                return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
            }
            if (aBias == exports34.LEAST_UPPER_BOUND) {
                return mid;
            } else {
                return aLow < 0 ? -1 : aLow;
            }
        }
    }
    exports34.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
            return -1;
        }
        var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports34.GREATEST_LOWER_BOUND);
        if (index < 0) {
            return -1;
        }
        while(index - 1 >= 0){
            if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
                break;
            }
            --index;
        }
        return index;
    };
    return exports34;
}
var exports35 = {
}, _dewExec35 = false;
function dew35() {
    if (_dewExec35) return exports35;
    _dewExec35 = true;
    function swap(ary, x, y) {
        var temp = ary[x];
        ary[x] = ary[y];
        ary[y] = temp;
    }
    function randomIntInRange(low, high) {
        return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p2, r2) {
        if (p2 < r2) {
            var pivotIndex = randomIntInRange(p2, r2);
            var i = p2 - 1;
            swap(ary, pivotIndex, r2);
            var pivot = ary[r2];
            for(var j = p2; j < r2; j++){
                if (comparator(ary[j], pivot) <= 0) {
                    i += 1;
                    swap(ary, i, j);
                }
            }
            swap(ary, i + 1, j);
            var q = i + 1;
            doQuickSort(ary, comparator, p2, q - 1);
            doQuickSort(ary, comparator, q + 1, r2);
        }
    }
    exports35.quickSort = function(ary, comparator) {
        doQuickSort(ary, comparator, 0, ary.length - 1);
    };
    return exports35;
}
var exports36 = {
}, _dewExec36 = false;
var _global5 = typeof self !== "undefined" ? self : global;
function dew36() {
    if (_dewExec36) return exports36;
    _dewExec36 = true;
    var util = dew30();
    var binarySearch = dew34();
    var ArraySet = dew31().ArraySet;
    var base64VLQ = dew29();
    var quickSort = dew35().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
            sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
        configurable: true,
        enumerable: true,
        get: function() {
            if (!(this || _global5).__generatedMappings) {
                this._parseMappings((this || _global5)._mappings, (this || _global5).sourceRoot);
            }
            return (this || _global5).__generatedMappings;
        }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
        configurable: true,
        enumerable: true,
        get: function() {
            if (!(this || _global5).__originalMappings) {
                this._parseMappings((this || _global5)._mappings, (this || _global5).sourceRoot);
            }
            return (this || _global5).__originalMappings;
        }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
        var c = aStr.charAt(index);
        return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context3 = aContext || null;
        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
        var mappings;
        switch(order){
            case SourceMapConsumer.GENERATED_ORDER:
                mappings = (this || _global5)._generatedMappings;
                break;
            case SourceMapConsumer.ORIGINAL_ORDER:
                mappings = (this || _global5)._originalMappings;
                break;
            default:
                throw new Error("Unknown order of iteration.");
        }
        var sourceRoot = (this || _global5).sourceRoot;
        mappings.map(function(mapping) {
            var source = mapping.source === null ? null : (this || _global5)._sources.at(mapping.source);
            source = util.computeSourceURL(sourceRoot, source, (this || _global5)._sourceMapURL);
            return {
                source: source,
                generatedLine: mapping.generatedLine,
                generatedColumn: mapping.generatedColumn,
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name: mapping.name === null ? null : (this || _global5)._names.at(mapping.name)
            };
        }, this || _global5).forEach(aCallback, context3);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line = util.getArg(aArgs, 'line');
        var needle = {
            source: util.getArg(aArgs, 'source'),
            originalLine: line,
            originalColumn: util.getArg(aArgs, 'column', 0)
        };
        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
            return [];
        }
        var mappings = [];
        var index = this._findMapping(needle, (this || _global5)._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
        if (index >= 0) {
            var mapping = (this || _global5)._originalMappings[index];
            if (aArgs.column === undefined) {
                var originalLine = mapping.originalLine;
                while(mapping && mapping.originalLine === originalLine){
                    mappings.push({
                        line: util.getArg(mapping, 'generatedLine', null),
                        column: util.getArg(mapping, 'generatedColumn', null),
                        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                    });
                    mapping = (this || _global5)._originalMappings[++index];
                }
            } else {
                var originalColumn = mapping.originalColumn;
                while(mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn){
                    mappings.push({
                        line: util.getArg(mapping, 'generatedLine', null),
                        column: util.getArg(mapping, 'generatedColumn', null),
                        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                    });
                    mapping = (this || _global5)._originalMappings[++index];
                }
            }
        }
        return mappings;
    };
    exports36.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
            sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version = util.getArg(sourceMap, 'version');
        var sources = util.getArg(sourceMap, 'sources');
        var names = util.getArg(sourceMap, 'names', []);
        var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
        var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
        var mappings = util.getArg(sourceMap, 'mappings');
        var file1 = util.getArg(sourceMap, 'file', null);
        if (version != (this || _global5)._version) {
            throw new Error('Unsupported version: ' + version);
        }
        if (sourceRoot) {
            sourceRoot = util.normalize(sourceRoot);
        }
        sources = sources.map(String).map(util.normalize).map(function(source) {
            return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
        });
        (this || _global5)._names = ArraySet.fromArray(names.map(String), true);
        (this || _global5)._sources = ArraySet.fromArray(sources, true);
        (this || _global5)._absoluteSources = (this || _global5)._sources.toArray().map(function(s1) {
            return util.computeSourceURL(sourceRoot, s1, aSourceMapURL);
        });
        (this || _global5).sourceRoot = sourceRoot;
        (this || _global5).sourcesContent = sourcesContent;
        (this || _global5)._mappings = mappings;
        (this || _global5)._sourceMapURL = aSourceMapURL;
        (this || _global5).file = file1;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
        var relativeSource = aSource;
        if ((this || _global5).sourceRoot != null) {
            relativeSource = util.relative((this || _global5).sourceRoot, relativeSource);
        }
        if ((this || _global5)._sources.has(relativeSource)) {
            return (this || _global5)._sources.indexOf(relativeSource);
        }
        var i;
        for(i = 0; i < (this || _global5)._absoluteSources.length; ++i){
            if ((this || _global5)._absoluteSources[i] == aSource) {
                return i;
            }
        }
        return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);
        var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
        smc.file = aSourceMap._file;
        smc._sourceMapURL = aSourceMapURL;
        smc._absoluteSources = smc._sources.toArray().map(function(s1) {
            return util.computeSourceURL(smc.sourceRoot, s1, aSourceMapURL);
        });
        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];
        for(var i = 0, length = generatedMappings.length; i < length; i++){
            var srcMapping = generatedMappings[i];
            var destMapping = new Mapping();
            destMapping.generatedLine = srcMapping.generatedLine;
            destMapping.generatedColumn = srcMapping.generatedColumn;
            if (srcMapping.source) {
                destMapping.source = sources.indexOf(srcMapping.source);
                destMapping.originalLine = srcMapping.originalLine;
                destMapping.originalColumn = srcMapping.originalColumn;
                if (srcMapping.name) {
                    destMapping.name = names.indexOf(srcMapping.name);
                }
                destOriginalMappings.push(destMapping);
            }
            destGeneratedMappings.push(destMapping);
        }
        quickSort(smc.__originalMappings, util.compareByOriginalPositions);
        return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
        get: function() {
            return (this || _global5)._absoluteSources.slice();
        }
    });
    function Mapping() {
        (this || _global5).generatedLine = 0;
        (this || _global5).generatedColumn = 0;
        (this || _global5).source = null;
        (this || _global5).originalLine = null;
        (this || _global5).originalColumn = null;
        (this || _global5).name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings1(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length = aStr.length;
        var index = 0;
        var cachedSegments = {
        };
        var temp = {
        };
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str1, segment, end, value4;
        while(index < length){
            if (aStr.charAt(index) === ';') {
                generatedLine++;
                index++;
                previousGeneratedColumn = 0;
            } else if (aStr.charAt(index) === ',') {
                index++;
            } else {
                mapping = new Mapping();
                mapping.generatedLine = generatedLine;
                for(end = index; end < length; end++){
                    if (this._charIsMappingSeparator(aStr, end)) {
                        break;
                    }
                }
                str1 = aStr.slice(index, end);
                segment = cachedSegments[str1];
                if (segment) {
                    index += str1.length;
                } else {
                    segment = [];
                    while(index < end){
                        base64VLQ.decode(aStr, index, temp);
                        value4 = temp.value;
                        index = temp.rest;
                        segment.push(value4);
                    }
                    if (segment.length === 2) {
                        throw new Error('Found a source, but no line and column');
                    }
                    if (segment.length === 3) {
                        throw new Error('Found a source and line, but no column');
                    }
                    cachedSegments[str1] = segment;
                }
                mapping.generatedColumn = previousGeneratedColumn + segment[0];
                previousGeneratedColumn = mapping.generatedColumn;
                if (segment.length > 1) {
                    mapping.source = previousSource + segment[1];
                    previousSource += segment[1];
                    mapping.originalLine = previousOriginalLine + segment[2];
                    previousOriginalLine = mapping.originalLine;
                    mapping.originalLine += 1;
                    mapping.originalColumn = previousOriginalColumn + segment[3];
                    previousOriginalColumn = mapping.originalColumn;
                    if (segment.length > 4) {
                        mapping.name = previousName + segment[4];
                        previousName += segment[4];
                    }
                }
                generatedMappings.push(mapping);
                if (typeof mapping.originalLine === 'number') {
                    originalMappings.push(mapping);
                }
            }
        }
        quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
        (this || _global5).__generatedMappings = generatedMappings;
        quickSort(originalMappings, util.compareByOriginalPositions);
        (this || _global5).__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
        if (aNeedle[aLineName] <= 0) {
            throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
            throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
        }
        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for(var index = 0; index < (this || _global5)._generatedMappings.length; ++index){
            var mapping = (this || _global5)._generatedMappings[index];
            if (index + 1 < (this || _global5)._generatedMappings.length) {
                var nextMapping = (this || _global5)._generatedMappings[index + 1];
                if (mapping.generatedLine === nextMapping.generatedLine) {
                    mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                    continue;
                }
            }
            mapping.lastGeneratedColumn = Infinity;
        }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
            generatedLine: util.getArg(aArgs, 'line'),
            generatedColumn: util.getArg(aArgs, 'column')
        };
        var index = this._findMapping(needle, (this || _global5)._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
        if (index >= 0) {
            var mapping = (this || _global5)._generatedMappings[index];
            if (mapping.generatedLine === needle.generatedLine) {
                var source = util.getArg(mapping, 'source', null);
                if (source !== null) {
                    source = (this || _global5)._sources.at(source);
                    source = util.computeSourceURL((this || _global5).sourceRoot, source, (this || _global5)._sourceMapURL);
                }
                var name3 = util.getArg(mapping, 'name', null);
                if (name3 !== null) {
                    name3 = (this || _global5)._names.at(name3);
                }
                return {
                    source: source,
                    line: util.getArg(mapping, 'originalLine', null),
                    column: util.getArg(mapping, 'originalColumn', null),
                    name: name3
                };
            }
        }
        return {
            source: null,
            line: null,
            column: null,
            name: null
        };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!(this || _global5).sourcesContent) {
            return false;
        }
        return (this || _global5).sourcesContent.length >= (this || _global5)._sources.size() && !(this || _global5).sourcesContent.some(function(sc1) {
            return sc1 == null;
        });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!(this || _global5).sourcesContent) {
            return null;
        }
        var index = this._findSourceIndex(aSource);
        if (index >= 0) {
            return (this || _global5).sourcesContent[index];
        }
        var relativeSource = aSource;
        if ((this || _global5).sourceRoot != null) {
            relativeSource = util.relative((this || _global5).sourceRoot, relativeSource);
        }
        var url1;
        if ((this || _global5).sourceRoot != null && (url1 = util.urlParse((this || _global5).sourceRoot))) {
            var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
            if (url1.scheme == "file" && (this || _global5)._sources.has(fileUriAbsPath)) {
                return (this || _global5).sourcesContent[(this || _global5)._sources.indexOf(fileUriAbsPath)];
            }
            if ((!url1.path || url1.path == "/") && (this || _global5)._sources.has("/" + relativeSource)) {
                return (this || _global5).sourcesContent[(this || _global5)._sources.indexOf("/" + relativeSource)];
            }
        }
        if (nullOnMissing) {
            return null;
        } else {
            throw new Error('"' + relativeSource + '" is not in the SourceMap.');
        }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util.getArg(aArgs, 'source');
        source = this._findSourceIndex(source);
        if (source < 0) {
            return {
                line: null,
                column: null,
                lastColumn: null
            };
        }
        var needle = {
            source: source,
            originalLine: util.getArg(aArgs, 'line'),
            originalColumn: util.getArg(aArgs, 'column')
        };
        var index = this._findMapping(needle, (this || _global5)._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
        if (index >= 0) {
            var mapping = (this || _global5)._originalMappings[index];
            if (mapping.source === needle.source) {
                return {
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                };
            }
        }
        return {
            line: null,
            column: null,
            lastColumn: null
        };
    };
    exports36.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
            sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version = util.getArg(sourceMap, 'version');
        var sections = util.getArg(sourceMap, 'sections');
        if (version != (this || _global5)._version) {
            throw new Error('Unsupported version: ' + version);
        }
        (this || _global5)._sources = new ArraySet();
        (this || _global5)._names = new ArraySet();
        var lastOffset = {
            line: -1,
            column: 0
        };
        (this || _global5)._sections = sections.map(function(s1) {
            if (s1.url) {
                throw new Error('Support for url field in sections not implemented.');
            }
            var offset = util.getArg(s1, 'offset');
            var offsetLine = util.getArg(offset, 'line');
            var offsetColumn = util.getArg(offset, 'column');
            if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
                throw new Error('Section offsets must be ordered and non-overlapping.');
            }
            lastOffset = offset;
            return {
                generatedOffset: {
                    generatedLine: offsetLine + 1,
                    generatedColumn: offsetColumn + 1
                },
                consumer: new SourceMapConsumer(util.getArg(s1, 'map'), aSourceMapURL)
            };
        });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
        get: function() {
            var sources = [];
            for(var i = 0; i < (this || _global5)._sections.length; i++){
                for(var j = 0; j < (this || _global5)._sections[i].consumer.sources.length; j++){
                    sources.push((this || _global5)._sections[i].consumer.sources[j]);
                }
            }
            return sources;
        }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
            generatedLine: util.getArg(aArgs, 'line'),
            generatedColumn: util.getArg(aArgs, 'column')
        };
        var sectionIndex = binarySearch.search(needle, (this || _global5)._sections, function(needle1, section) {
            var cmp = needle1.generatedLine - section.generatedOffset.generatedLine;
            if (cmp) {
                return cmp;
            }
            return needle1.generatedColumn - section.generatedOffset.generatedColumn;
        });
        var section = (this || _global5)._sections[sectionIndex];
        if (!section) {
            return {
                source: null,
                line: null,
                column: null,
                name: null
            };
        }
        return section.consumer.originalPositionFor({
            line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
            column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            bias: aArgs.bias
        });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return (this || _global5)._sections.every(function(s1) {
            return s1.consumer.hasContentsOfAllSources();
        });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for(var i = 0; i < (this || _global5)._sections.length; i++){
            var section = (this || _global5)._sections[i];
            var content = section.consumer.sourceContentFor(aSource, true);
            if (content) {
                return content;
            }
        }
        if (nullOnMissing) {
            return null;
        } else {
            throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for(var i = 0; i < (this || _global5)._sections.length; i++){
            var section = (this || _global5)._sections[i];
            if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
                continue;
            }
            var generatedPosition = section.consumer.generatedPositionFor(aArgs);
            if (generatedPosition) {
                var ret2 = {
                    line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                    column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
                };
                return ret2;
            }
        }
        return {
            line: null,
            column: null
        };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        (this || _global5).__generatedMappings = [];
        (this || _global5).__originalMappings = [];
        for(var i = 0; i < (this || _global5)._sections.length; i++){
            var section = (this || _global5)._sections[i];
            var sectionMappings = section.consumer._generatedMappings;
            for(var j = 0; j < sectionMappings.length; j++){
                var mapping = sectionMappings[j];
                var source = section.consumer._sources.at(mapping.source);
                source = util.computeSourceURL(section.consumer.sourceRoot, source, (this || _global5)._sourceMapURL);
                (this || _global5)._sources.add(source);
                source = (this || _global5)._sources.indexOf(source);
                var name4 = null;
                if (mapping.name) {
                    name4 = section.consumer._names.at(mapping.name);
                    (this || _global5)._names.add(name4);
                    name4 = (this || _global5)._names.indexOf(name4);
                }
                var adjustedMapping = {
                    source: source,
                    generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                    generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                    originalLine: mapping.originalLine,
                    originalColumn: mapping.originalColumn,
                    name: name4
                };
                (this || _global5).__generatedMappings.push(adjustedMapping);
                if (typeof adjustedMapping.originalLine === 'number') {
                    (this || _global5).__originalMappings.push(adjustedMapping);
                }
            }
        }
        quickSort((this || _global5).__generatedMappings, util.compareByGeneratedPositionsDeflated);
        quickSort((this || _global5).__originalMappings, util.compareByOriginalPositions);
    };
    exports36.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
    return exports36;
}
var exports37 = {
}, _dewExec37 = false;
var _global6 = typeof self !== "undefined" ? self : global;
function dew37() {
    if (_dewExec37) return exports37;
    _dewExec37 = true;
    var SourceMapGenerator = dew33().SourceMapGenerator;
    var util = dew30();
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
        (this || _global6).children = [];
        (this || _global6).sourceContents = {
        };
        (this || _global6).line = aLine == null ? null : aLine;
        (this || _global6).column = aColumn == null ? null : aColumn;
        (this || _global6).source = aSource == null ? null : aSource;
        (this || _global6).name = aName == null ? null : aName;
        (this || _global6)[isSourceNode] = true;
        if (aChunks != null) this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        var node = new SourceNode();
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var remainingLinesIndex = 0;
        var shiftNextLine = function() {
            var lineContents = getNextLine();
            var newLine = getNextLine() || "";
            return lineContents + newLine;
            function getNextLine() {
                return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;
            }
        };
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
        var lastMapping = null;
        aSourceMapConsumer.eachMapping(function(mapping) {
            if (lastMapping !== null) {
                if (lastGeneratedLine < mapping.generatedLine) {
                    addMappingWithCode(lastMapping, shiftNextLine());
                    lastGeneratedLine++;
                    lastGeneratedColumn = 0;
                } else {
                    var nextLine = remainingLines[remainingLinesIndex] || '';
                    var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                    remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                    lastGeneratedColumn = mapping.generatedColumn;
                    addMappingWithCode(lastMapping, code);
                    lastMapping = mapping;
                    return;
                }
            }
            while(lastGeneratedLine < mapping.generatedLine){
                node.add(shiftNextLine());
                lastGeneratedLine++;
            }
            if (lastGeneratedColumn < mapping.generatedColumn) {
                var nextLine = remainingLines[remainingLinesIndex] || '';
                node.add(nextLine.substr(0, mapping.generatedColumn));
                remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
                lastGeneratedColumn = mapping.generatedColumn;
            }
            lastMapping = mapping;
        }, this || _global6);
        if (remainingLinesIndex < remainingLines.length) {
            if (lastMapping) {
                addMappingWithCode(lastMapping, shiftNextLine());
            }
            node.add(remainingLines.splice(remainingLinesIndex).join(""));
        }
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
            var content = aSourceMapConsumer.sourceContentFor(sourceFile);
            if (content != null) {
                if (aRelativePath != null) {
                    sourceFile = util.join(aRelativePath, sourceFile);
                }
                node.setSourceContent(sourceFile, content);
            }
        });
        return node;
        function addMappingWithCode(mapping, code) {
            if (mapping === null || mapping.source === undefined) {
                node.add(code);
            } else {
                var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
                node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
            }
        }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
        if (Array.isArray(aChunk)) {
            aChunk.forEach(function(chunk) {
                this.add(chunk);
            }, this || _global6);
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
            if (aChunk) {
                (this || _global6).children.push(aChunk);
            }
        } else {
            throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
        }
        return this || _global6;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
        if (Array.isArray(aChunk)) {
            for(var i = aChunk.length - 1; i >= 0; i--){
                this.prepend(aChunk[i]);
            }
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
            (this || _global6).children.unshift(aChunk);
        } else {
            throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
        }
        return this || _global6;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
        var chunk;
        for(var i = 0, len = (this || _global6).children.length; i < len; i++){
            chunk = (this || _global6).children[i];
            if (chunk[isSourceNode]) {
                chunk.walk(aFn);
            } else {
                if (chunk !== '') {
                    aFn(chunk, {
                        source: (this || _global6).source,
                        line: (this || _global6).line,
                        column: (this || _global6).column,
                        name: (this || _global6).name
                    });
                }
            }
        }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
        var newChildren;
        var i;
        var len = (this || _global6).children.length;
        if (len > 0) {
            newChildren = [];
            for(i = 0; i < len - 1; i++){
                newChildren.push((this || _global6).children[i]);
                newChildren.push(aSep);
            }
            newChildren.push((this || _global6).children[i]);
            (this || _global6).children = newChildren;
        }
        return this || _global6;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
        var lastChild = (this || _global6).children[(this || _global6).children.length - 1];
        if (lastChild[isSourceNode]) {
            lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === 'string') {
            (this || _global6).children[(this || _global6).children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
            (this || _global6).children.push(''.replace(aPattern, aReplacement));
        }
        return this || _global6;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        (this || _global6).sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
        for(var i = 0, len = (this || _global6).children.length; i < len; i++){
            if ((this || _global6).children[i][isSourceNode]) {
                (this || _global6).children[i].walkSourceContents(aFn);
            }
        }
        var sources = Object.keys((this || _global6).sourceContents);
        for(var i = 0, len = sources.length; i < len; i++){
            aFn(util.fromSetString(sources[i]), (this || _global6).sourceContents[sources[i]]);
        }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
        var str1 = "";
        this.walk(function(chunk) {
            str1 += chunk;
        });
        return str1;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
        var generated = {
            code: "",
            line: 1,
            column: 0
        };
        var map = new SourceMapGenerator(aArgs);
        var sourceMappingActive = false;
        var lastOriginalSource = null;
        var lastOriginalLine = null;
        var lastOriginalColumn = null;
        var lastOriginalName = null;
        this.walk(function(chunk, original) {
            generated.code += chunk;
            if (original.source !== null && original.line !== null && original.column !== null) {
                if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
                    map.addMapping({
                        source: original.source,
                        original: {
                            line: original.line,
                            column: original.column
                        },
                        generated: {
                            line: generated.line,
                            column: generated.column
                        },
                        name: original.name
                    });
                }
                lastOriginalSource = original.source;
                lastOriginalLine = original.line;
                lastOriginalColumn = original.column;
                lastOriginalName = original.name;
                sourceMappingActive = true;
            } else if (sourceMappingActive) {
                map.addMapping({
                    generated: {
                        line: generated.line,
                        column: generated.column
                    }
                });
                lastOriginalSource = null;
                sourceMappingActive = false;
            }
            for(var idx = 0, length = chunk.length; idx < length; idx++){
                if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                    generated.line++;
                    generated.column = 0;
                    if (idx + 1 === length) {
                        lastOriginalSource = null;
                        sourceMappingActive = false;
                    } else if (sourceMappingActive) {
                        map.addMapping({
                            source: original.source,
                            original: {
                                line: original.line,
                                column: original.column
                            },
                            generated: {
                                line: generated.line,
                                column: generated.column
                            },
                            name: original.name
                        });
                    }
                } else {
                    generated.column++;
                }
            }
        });
        this.walkSourceContents(function(sourceFile, sourceContent) {
            map.setSourceContent(sourceFile, sourceContent);
        });
        return {
            code: generated.code,
            map: map
        };
    };
    exports37.SourceNode = SourceNode;
    return exports37;
}
var exports38 = {
}, _dewExec38 = false;
function dew38() {
    if (_dewExec38) return exports38;
    _dewExec38 = true;
    exports38.SourceMapGenerator = dew33().SourceMapGenerator;
    exports38.SourceMapConsumer = dew36().SourceMapConsumer;
    exports38.SourceNode = dew37().SourceNode;
    return exports38;
}
var exports39 = {
}, _dewExec39 = false;
function dew39() {
    if (_dewExec39) return exports39;
    _dewExec39 = true;
    exports39.__esModule = true;
    var _utils = dew();
    var SourceNode = undefined;
    try {
        if (typeof define !== 'function' || !define.amd) {
            var SourceMap = dew38();
            SourceNode = SourceMap.SourceNode;
        }
    } catch (err) {
    }
    if (!SourceNode) {
        SourceNode = function(line, column, srcFile, chunks) {
            this.src = '';
            if (chunks) {
                this.add(chunks);
            }
        };
        SourceNode.prototype = {
            add: function add(chunks) {
                if (_utils.isArray(chunks)) {
                    chunks = chunks.join('');
                }
                this.src += chunks;
            },
            prepend: function prepend(chunks) {
                if (_utils.isArray(chunks)) {
                    chunks = chunks.join('');
                }
                this.src = chunks + this.src;
            },
            toStringWithSourceMap: function toStringWithSourceMap() {
                return {
                    code: this.toString()
                };
            },
            toString: function toString() {
                return this.src;
            }
        };
    }
    function castChunk(chunk, codeGen, loc) {
        if (_utils.isArray(chunk)) {
            var ret3 = [];
            for(var i = 0, len = chunk.length; i < len; i++){
                ret3.push(codeGen.wrap(chunk[i], loc));
            }
            return ret3;
        } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
            return chunk + '';
        }
        return chunk;
    }
    function CodeGen(srcFile) {
        this.srcFile = srcFile;
        this.source = [];
    }
    CodeGen.prototype = {
        isEmpty: function isEmpty() {
            return !this.source.length;
        },
        prepend: function prepend(source, loc) {
            this.source.unshift(this.wrap(source, loc));
        },
        push: function push(source, loc) {
            this.source.push(this.wrap(source, loc));
        },
        merge: function merge() {
            var source = this.empty();
            this.each(function(line) {
                source.add([
                    '  ',
                    line,
                    '\n'
                ]);
            });
            return source;
        },
        each: function each(iter1) {
            for(var i = 0, len = this.source.length; i < len; i++){
                iter1(this.source[i]);
            }
        },
        empty: function empty() {
            var loc = this.currentLocation || {
                start: {
                }
            };
            return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
        },
        wrap: function wrap(chunk) {
            var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || {
                start: {
                }
            } : arguments[1];
            if (chunk instanceof SourceNode) {
                return chunk;
            }
            chunk = castChunk(chunk, this, loc);
            return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
        },
        functionCall: function functionCall(fn, type4, params) {
            params = this.generateList(params);
            return this.wrap([
                fn,
                type4 ? '.' + type4 + '(' : '(',
                params,
                ')'
            ]);
        },
        quotedString: function quotedString(str1) {
            return '"' + (str1 + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029') + '"';
        },
        objectLiteral: function objectLiteral(obj) {
            var _this = this;
            var pairs = [];
            Object.keys(obj).forEach(function(key8) {
                var value4 = castChunk(obj[key8], _this);
                if (value4 !== 'undefined') {
                    pairs.push([
                        _this.quotedString(key8),
                        ':',
                        value4
                    ]);
                }
            });
            var ret4 = this.generateList(pairs);
            ret4.prepend('{');
            ret4.add('}');
            return ret4;
        },
        generateList: function generateList(entries) {
            var ret4 = this.empty();
            for(var i = 0, len = entries.length; i < len; i++){
                if (i) {
                    ret4.add(',');
                }
                ret4.add(castChunk(entries[i], this));
            }
            return ret4;
        },
        generateArray: function generateArray(entries) {
            var ret4 = this.generateList(entries);
            ret4.prepend('[');
            ret4.add(']');
            return ret4;
        }
    };
    exports39['default'] = CodeGen;
    exports39 = exports39['default'];
    return exports39;
}
var exports40 = {
}, _dewExec40 = false;
function dew40() {
    if (_dewExec40) return exports40;
    _dewExec40 = true;
    exports40.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _base = dew15();
    var _exception = dew1();
    var _exception2 = _interopRequireDefault(_exception);
    var _utils = dew();
    var _codeGen = dew39();
    var _codeGen2 = _interopRequireDefault(_codeGen);
    function Literal(value4) {
        this.value = value4;
    }
    function JavaScriptCompiler() {
    }
    JavaScriptCompiler.prototype = {
        nameLookup: function nameLookup(parent, name5) {
            return this.internalNameLookup(parent, name5);
        },
        depthedLookup: function depthedLookup(name5) {
            return [
                this.aliasable('container.lookup'),
                '(depths, "',
                name5,
                '")'
            ];
        },
        compilerInfo: function compilerInfo() {
            var revision = _base.COMPILER_REVISION, versions = _base.REVISION_CHANGES[revision];
            return [
                revision,
                versions
            ];
        },
        appendToBuffer: function appendToBuffer(source, location, explicit) {
            if (!_utils.isArray(source)) {
                source = [
                    source
                ];
            }
            source = this.source.wrap(source, location);
            if (this.environment.isSimple) {
                return [
                    'return ',
                    source,
                    ';'
                ];
            } else if (explicit) {
                return [
                    'buffer += ',
                    source,
                    ';'
                ];
            } else {
                source.appendToBuffer = true;
                return source;
            }
        },
        initializeBuffer: function initializeBuffer() {
            return this.quotedString('');
        },
        internalNameLookup: function internalNameLookup(parent, name5) {
            this.lookupPropertyFunctionIsUsed = true;
            return [
                'lookupProperty(',
                parent,
                ',',
                JSON.stringify(name5),
                ')'
            ];
        },
        lookupPropertyFunctionIsUsed: false,
        compile: function compile2(environment, options7, context3, asObject) {
            this.environment = environment;
            this.options = options7;
            this.stringParams = this.options.stringParams;
            this.trackIds = this.options.trackIds;
            this.precompile = !asObject;
            this.name = this.environment.name;
            this.isChild = !!context3;
            this.context = context3 || {
                decorators: [],
                programs: [],
                environments: []
            };
            this.preamble();
            this.stackSlot = 0;
            this.stackVars = [];
            this.aliases = {
            };
            this.registers = {
                list: []
            };
            this.hashes = [];
            this.compileStack = [];
            this.inlineStack = [];
            this.blockParams = [];
            this.compileChildren(environment, options7);
            this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
            this.useBlockParams = this.useBlockParams || environment.useBlockParams;
            var opcodes = environment.opcodes, opcode = undefined, firstLoc = undefined, i = undefined, l = undefined;
            for(i = 0, l = opcodes.length; i < l; i++){
                opcode = opcodes[i];
                this.source.currentLocation = opcode.loc;
                firstLoc = firstLoc || opcode.loc;
                this[opcode.opcode].apply(this, opcode.args);
            }
            this.source.currentLocation = firstLoc;
            this.pushSource('');
            if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
                throw new _exception2['default']('Compile completed with content left on stack');
            }
            if (!this.decorators.isEmpty()) {
                this.useDecorators = true;
                this.decorators.prepend([
                    'var decorators = container.decorators, ',
                    this.lookupPropertyFunctionVarDeclaration(),
                    ';\n'
                ]);
                this.decorators.push('return fn;');
                if (asObject) {
                    this.decorators = Function.apply(this, [
                        'fn',
                        'props',
                        'container',
                        'depth0',
                        'data',
                        'blockParams',
                        'depths',
                        this.decorators.merge()
                    ]);
                } else {
                    this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
                    this.decorators.push('}\n');
                    this.decorators = this.decorators.merge();
                }
            } else {
                this.decorators = undefined;
            }
            var fn = this.createFunctionContext(asObject);
            if (!this.isChild) {
                var ret4 = {
                    compiler: this.compilerInfo(),
                    main: fn
                };
                if (this.decorators) {
                    ret4.main_d = this.decorators;
                    ret4.useDecorators = true;
                }
                var _context = this.context;
                var programs = _context.programs;
                var decorators = _context.decorators;
                for(i = 0, l = programs.length; i < l; i++){
                    if (programs[i]) {
                        ret4[i] = programs[i];
                        if (decorators[i]) {
                            ret4[i + '_d'] = decorators[i];
                            ret4.useDecorators = true;
                        }
                    }
                }
                if (this.environment.usePartial) {
                    ret4.usePartial = true;
                }
                if (this.options.data) {
                    ret4.useData = true;
                }
                if (this.useDepths) {
                    ret4.useDepths = true;
                }
                if (this.useBlockParams) {
                    ret4.useBlockParams = true;
                }
                if (this.options.compat) {
                    ret4.compat = true;
                }
                if (!asObject) {
                    ret4.compiler = JSON.stringify(ret4.compiler);
                    this.source.currentLocation = {
                        start: {
                            line: 1,
                            column: 0
                        }
                    };
                    ret4 = this.objectLiteral(ret4);
                    if (options7.srcName) {
                        ret4 = ret4.toStringWithSourceMap({
                            file: options7.destName
                        });
                        ret4.map = ret4.map && ret4.map.toString();
                    } else {
                        ret4 = ret4.toString();
                    }
                } else {
                    ret4.compilerOptions = this.options;
                }
                return ret4;
            } else {
                return fn;
            }
        },
        preamble: function preamble() {
            this.lastContext = 0;
            this.source = new _codeGen2['default'](this.options.srcName);
            this.decorators = new _codeGen2['default'](this.options.srcName);
        },
        createFunctionContext: function createFunctionContext(asObject) {
            var _this = this;
            var varDeclarations = '';
            var locals = this.stackVars.concat(this.registers.list);
            if (locals.length > 0) {
                varDeclarations += ', ' + locals.join(', ');
            }
            var aliasCount = 0;
            Object.keys(this.aliases).forEach(function(alias) {
                var node = _this.aliases[alias];
                if (node.children && node.referenceCount > 1) {
                    varDeclarations += ', alias' + ++aliasCount + '=' + alias;
                    node.children[0] = 'alias' + aliasCount;
                }
            });
            if (this.lookupPropertyFunctionIsUsed) {
                varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();
            }
            var params = [
                'container',
                'depth0',
                'helpers',
                'partials',
                'data'
            ];
            if (this.useBlockParams || this.useDepths) {
                params.push('blockParams');
            }
            if (this.useDepths) {
                params.push('depths');
            }
            var source = this.mergeSource(varDeclarations);
            if (asObject) {
                params.push(source);
                return Function.apply(this, params);
            } else {
                return this.source.wrap([
                    'function(',
                    params.join(','),
                    ') {\n  ',
                    source,
                    '}'
                ]);
            }
        },
        mergeSource: function mergeSource(varDeclarations) {
            var isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst = undefined, sourceSeen = undefined, bufferStart = undefined, bufferEnd = undefined;
            this.source.each(function(line) {
                if (line.appendToBuffer) {
                    if (bufferStart) {
                        line.prepend('  + ');
                    } else {
                        bufferStart = line;
                    }
                    bufferEnd = line;
                } else {
                    if (bufferStart) {
                        if (!sourceSeen) {
                            appendFirst = true;
                        } else {
                            bufferStart.prepend('buffer += ');
                        }
                        bufferEnd.add(';');
                        bufferStart = bufferEnd = undefined;
                    }
                    sourceSeen = true;
                    if (!isSimple) {
                        appendOnly = false;
                    }
                }
            });
            if (appendOnly) {
                if (bufferStart) {
                    bufferStart.prepend('return ');
                    bufferEnd.add(';');
                } else if (!sourceSeen) {
                    this.source.push('return "";');
                }
            } else {
                varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());
                if (bufferStart) {
                    bufferStart.prepend('return buffer + ');
                    bufferEnd.add(';');
                } else {
                    this.source.push('return buffer;');
                }
            }
            if (varDeclarations) {
                this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
            }
            return this.source.merge();
        },
        lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
            return '\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    '.trim();
        },
        blockValue: function blockValue(name5) {
            var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'), params = [
                this.contextName(0)
            ];
            this.setupHelperArgs(name5, 0, params);
            var blockName = this.popStack();
            params.splice(1, 0, blockName);
            this.push(this.source.functionCall(blockHelperMissing, 'call', params));
        },
        ambiguousBlockValue: function ambiguousBlockValue() {
            var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'), params = [
                this.contextName(0)
            ];
            this.setupHelperArgs('', 0, params, true);
            this.flushInline();
            var current = this.topStack();
            params.splice(1, 0, current);
            this.pushSource([
                'if (!',
                this.lastHelper,
                ') { ',
                current,
                ' = ',
                this.source.functionCall(blockHelperMissing, 'call', params),
                '}'
            ]);
        },
        appendContent: function appendContent(content) {
            if (this.pendingContent) {
                content = this.pendingContent + content;
            } else {
                this.pendingLocation = this.source.currentLocation;
            }
            this.pendingContent = content;
        },
        append: function append1() {
            if (this.isInline()) {
                this.replaceStack(function(current) {
                    return [
                        ' != null ? ',
                        current,
                        ' : ""'
                    ];
                });
                this.pushSource(this.appendToBuffer(this.popStack()));
            } else {
                var local = this.popStack();
                this.pushSource([
                    'if (',
                    local,
                    ' != null) { ',
                    this.appendToBuffer(local, undefined, true),
                    ' }'
                ]);
                if (this.environment.isSimple) {
                    this.pushSource([
                        'else { ',
                        this.appendToBuffer("''", undefined, true),
                        ' }'
                    ]);
                }
            }
        },
        appendEscaped: function appendEscaped() {
            this.pushSource(this.appendToBuffer([
                this.aliasable('container.escapeExpression'),
                '(',
                this.popStack(),
                ')'
            ]));
        },
        getContext: function getContext(depth) {
            this.lastContext = depth;
        },
        pushContext: function pushContext() {
            this.pushStackLiteral(this.contextName(this.lastContext));
        },
        lookupOnContext: function lookupOnContext(parts1, falsy, strict, scoped) {
            var i = 0;
            if (!scoped && this.options.compat && !this.lastContext) {
                this.push(this.depthedLookup(parts1[i++]));
            } else {
                this.pushContext();
            }
            this.resolvePath('context', parts1, i, falsy, strict);
        },
        lookupBlockParam: function lookupBlockParam(blockParamId, parts1) {
            this.useBlockParams = true;
            this.push([
                'blockParams[',
                blockParamId[0],
                '][',
                blockParamId[1],
                ']'
            ]);
            this.resolvePath('context', parts1, 1);
        },
        lookupData: function lookupData(depth, parts1, strict) {
            if (!depth) {
                this.pushStackLiteral('data');
            } else {
                this.pushStackLiteral('container.data(data, ' + depth + ')');
            }
            this.resolvePath('data', parts1, 0, true, strict);
        },
        resolvePath: function resolvePath1(type4, parts1, i, falsy, strict) {
            var _this2 = this;
            if (this.options.strict || this.options.assumeObjects) {
                this.push(strictLookup(this.options.strict && strict, this, parts1, type4));
                return;
            }
            var len = parts1.length;
            for(; i < len; i++){
                this.replaceStack(function(current) {
                    var lookup1 = _this2.nameLookup(current, parts1[i], type4);
                    if (!falsy) {
                        return [
                            ' != null ? ',
                            lookup1,
                            ' : ',
                            current
                        ];
                    } else {
                        return [
                            ' && ',
                            lookup1
                        ];
                    }
                });
            }
        },
        resolvePossibleLambda: function resolvePossibleLambda() {
            this.push([
                this.aliasable('container.lambda'),
                '(',
                this.popStack(),
                ', ',
                this.contextName(0),
                ')'
            ]);
        },
        pushStringParam: function pushStringParam(string, type4) {
            this.pushContext();
            this.pushString(type4);
            if (type4 !== 'SubExpression') {
                if (typeof string === 'string') {
                    this.pushString(string);
                } else {
                    this.pushStackLiteral(string);
                }
            }
        },
        emptyHash: function emptyHash(omitEmpty) {
            if (this.trackIds) {
                this.push('{}');
            }
            if (this.stringParams) {
                this.push('{}');
                this.push('{}');
            }
            this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
        },
        pushHash: function pushHash() {
            if (this.hash) {
                this.hashes.push(this.hash);
            }
            this.hash = {
                values: {
                },
                types: [],
                contexts: [],
                ids: []
            };
        },
        popHash: function popHash() {
            var hash = this.hash;
            this.hash = this.hashes.pop();
            if (this.trackIds) {
                this.push(this.objectLiteral(hash.ids));
            }
            if (this.stringParams) {
                this.push(this.objectLiteral(hash.contexts));
                this.push(this.objectLiteral(hash.types));
            }
            this.push(this.objectLiteral(hash.values));
        },
        pushString: function pushString(string) {
            this.pushStackLiteral(this.quotedString(string));
        },
        pushLiteral: function pushLiteral(value4) {
            this.pushStackLiteral(value4);
        },
        pushProgram: function pushProgram(guid) {
            if (guid != null) {
                this.pushStackLiteral(this.programExpression(guid));
            } else {
                this.pushStackLiteral(null);
            }
        },
        registerDecorator: function registerDecorator(paramSize, name5) {
            var foundDecorator = this.nameLookup('decorators', name5, 'decorator'), options7 = this.setupHelperArgs(name5, paramSize);
            this.decorators.push([
                'fn = ',
                this.decorators.functionCall(foundDecorator, '', [
                    'fn',
                    'props',
                    'container',
                    options7
                ]),
                ' || fn;'
            ]);
        },
        invokeHelper: function invokeHelper(paramSize, name5, isSimple) {
            var nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name5);
            var possibleFunctionCalls = [];
            if (isSimple) {
                possibleFunctionCalls.push(helper.name);
            }
            possibleFunctionCalls.push(nonHelper);
            if (!this.options.strict) {
                possibleFunctionCalls.push(this.aliasable('container.hooks.helperMissing'));
            }
            var functionLookupCode = [
                '(',
                this.itemsSeparatedBy(possibleFunctionCalls, '||'),
                ')'
            ];
            var functionCall = this.source.functionCall(functionLookupCode, 'call', helper.callParams);
            this.push(functionCall);
        },
        itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
            var result = [];
            result.push(items[0]);
            for(var i = 1; i < items.length; i++){
                result.push(separator, items[i]);
            }
            return result;
        },
        invokeKnownHelper: function invokeKnownHelper(paramSize, name5) {
            var helper = this.setupHelper(paramSize, name5);
            this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
        },
        invokeAmbiguous: function invokeAmbiguous(name5, helperCall) {
            this.useRegister('helper');
            var nonHelper = this.popStack();
            this.emptyHash();
            var helper = this.setupHelper(0, name5, helperCall);
            var helperName = this.lastHelper = this.nameLookup('helpers', name5, 'helper');
            var lookup1 = [
                '(',
                '(helper = ',
                helperName,
                ' || ',
                nonHelper,
                ')'
            ];
            if (!this.options.strict) {
                lookup1[0] = '(helper = ';
                lookup1.push(' != null ? helper : ', this.aliasable('container.hooks.helperMissing'));
            }
            this.push([
                '(',
                lookup1,
                helper.paramsInit ? [
                    '),(',
                    helper.paramsInit
                ] : [],
                '),',
                '(typeof helper === ',
                this.aliasable('"function"'),
                ' ? ',
                this.source.functionCall('helper', 'call', helper.callParams),
                ' : helper))'
            ]);
        },
        invokePartial: function invokePartial(isDynamic, name5, indent) {
            var params = [], options7 = this.setupParams(name5, 1, params);
            if (isDynamic) {
                name5 = this.popStack();
                delete options7.name;
            }
            if (indent) {
                options7.indent = JSON.stringify(indent);
            }
            options7.helpers = 'helpers';
            options7.partials = 'partials';
            options7.decorators = 'container.decorators';
            if (!isDynamic) {
                params.unshift(this.nameLookup('partials', name5, 'partial'));
            } else {
                params.unshift(name5);
            }
            if (this.options.compat) {
                options7.depths = 'depths';
            }
            options7 = this.objectLiteral(options7);
            params.push(options7);
            this.push(this.source.functionCall('container.invokePartial', '', params));
        },
        assignToHash: function assignToHash(key8) {
            var value4 = this.popStack(), context3 = undefined, type4 = undefined, id2 = undefined;
            if (this.trackIds) {
                id2 = this.popStack();
            }
            if (this.stringParams) {
                type4 = this.popStack();
                context3 = this.popStack();
            }
            var hash = this.hash;
            if (context3) {
                hash.contexts[key8] = context3;
            }
            if (type4) {
                hash.types[key8] = type4;
            }
            if (id2) {
                hash.ids[key8] = id2;
            }
            hash.values[key8] = value4;
        },
        pushId: function pushId(type4, name5, child) {
            if (type4 === 'BlockParam') {
                this.pushStackLiteral('blockParams[' + name5[0] + '].path[' + name5[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
            } else if (type4 === 'PathExpression') {
                this.pushString(name5);
            } else if (type4 === 'SubExpression') {
                this.pushStackLiteral('true');
            } else {
                this.pushStackLiteral('null');
            }
        },
        compiler: JavaScriptCompiler,
        compileChildren: function compileChildren(environment, options7) {
            var children = environment.children, child = undefined, compiler = undefined;
            for(var i = 0, l = children.length; i < l; i++){
                child = children[i];
                compiler = new this.compiler();
                var existing = this.matchExistingProgram(child);
                if (existing == null) {
                    this.context.programs.push('');
                    var index = this.context.programs.length;
                    child.index = index;
                    child.name = 'program' + index;
                    this.context.programs[index] = compiler.compile(child, options7, this.context, !this.precompile);
                    this.context.decorators[index] = compiler.decorators;
                    this.context.environments[index] = child;
                    this.useDepths = this.useDepths || compiler.useDepths;
                    this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
                    child.useDepths = this.useDepths;
                    child.useBlockParams = this.useBlockParams;
                } else {
                    child.index = existing.index;
                    child.name = 'program' + existing.index;
                    this.useDepths = this.useDepths || existing.useDepths;
                    this.useBlockParams = this.useBlockParams || existing.useBlockParams;
                }
            }
        },
        matchExistingProgram: function matchExistingProgram(child) {
            for(var i = 0, len = this.context.environments.length; i < len; i++){
                var environment = this.context.environments[i];
                if (environment && environment.equals(child)) {
                    return environment;
                }
            }
        },
        programExpression: function programExpression(guid) {
            var child = this.environment.children[guid], programParams = [
                child.index,
                'data',
                child.blockParams
            ];
            if (this.useBlockParams || this.useDepths) {
                programParams.push('blockParams');
            }
            if (this.useDepths) {
                programParams.push('depths');
            }
            return 'container.program(' + programParams.join(', ') + ')';
        },
        useRegister: function useRegister(name5) {
            if (!this.registers[name5]) {
                this.registers[name5] = true;
                this.registers.list.push(name5);
            }
        },
        push: function push(expr) {
            if (!(expr instanceof Literal)) {
                expr = this.source.wrap(expr);
            }
            this.inlineStack.push(expr);
            return expr;
        },
        pushStackLiteral: function pushStackLiteral(item) {
            this.push(new Literal(item));
        },
        pushSource: function pushSource(source) {
            if (this.pendingContent) {
                this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
                this.pendingContent = undefined;
            }
            if (source) {
                this.source.push(source);
            }
        },
        replaceStack: function replaceStack(callback) {
            var prefix = [
                '('
            ], stack = undefined, createdStack = undefined, usedLiteral = undefined;
            if (!this.isInline()) {
                throw new _exception2['default']('replaceStack on non-inline');
            }
            var top = this.popStack(true);
            if (top instanceof Literal) {
                stack = [
                    top.value
                ];
                prefix = [
                    '(',
                    stack
                ];
                usedLiteral = true;
            } else {
                createdStack = true;
                var _name = this.incrStack();
                prefix = [
                    '((',
                    this.push(_name),
                    ' = ',
                    top,
                    ')'
                ];
                stack = this.topStack();
            }
            var item = callback.call(this, stack);
            if (!usedLiteral) {
                this.popStack();
            }
            if (createdStack) {
                this.stackSlot--;
            }
            this.push(prefix.concat(item, ')'));
        },
        incrStack: function incrStack() {
            this.stackSlot++;
            if (this.stackSlot > this.stackVars.length) {
                this.stackVars.push('stack' + this.stackSlot);
            }
            return this.topStackName();
        },
        topStackName: function topStackName() {
            return 'stack' + this.stackSlot;
        },
        flushInline: function flushInline() {
            var inlineStack = this.inlineStack;
            this.inlineStack = [];
            for(var i = 0, len = inlineStack.length; i < len; i++){
                var entry = inlineStack[i];
                if (entry instanceof Literal) {
                    this.compileStack.push(entry);
                } else {
                    var stack = this.incrStack();
                    this.pushSource([
                        stack,
                        ' = ',
                        entry,
                        ';'
                    ]);
                    this.compileStack.push(stack);
                }
            }
        },
        isInline: function isInline() {
            return this.inlineStack.length;
        },
        popStack: function popStack(wrapped) {
            var inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();
            if (!wrapped && item instanceof Literal) {
                return item.value;
            } else {
                if (!inline) {
                    if (!this.stackSlot) {
                        throw new _exception2['default']('Invalid stack pop');
                    }
                    this.stackSlot--;
                }
                return item;
            }
        },
        topStack: function topStack() {
            var stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];
            if (item instanceof Literal) {
                return item.value;
            } else {
                return item;
            }
        },
        contextName: function contextName(context3) {
            if (this.useDepths && context3) {
                return 'depths[' + context3 + ']';
            } else {
                return 'depth' + context3;
            }
        },
        quotedString: function quotedString(str1) {
            return this.source.quotedString(str1);
        },
        objectLiteral: function objectLiteral(obj) {
            return this.source.objectLiteral(obj);
        },
        aliasable: function aliasable(name5) {
            var ret5 = this.aliases[name5];
            if (ret5) {
                ret5.referenceCount++;
                return ret5;
            }
            ret5 = this.aliases[name5] = this.source.wrap(name5);
            ret5.aliasable = true;
            ret5.referenceCount = 1;
            return ret5;
        },
        setupHelper: function setupHelper(paramSize, name5, blockHelper) {
            var params = [], paramsInit = this.setupHelperArgs(name5, paramSize, params, blockHelper);
            var foundHelper = this.nameLookup('helpers', name5, 'helper'), callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');
            return {
                params: params,
                paramsInit: paramsInit,
                name: foundHelper,
                callParams: [
                    callContext
                ].concat(params)
            };
        },
        setupParams: function setupParams(helper, paramSize, params) {
            var options7 = {
            }, contexts = [], types2 = [], ids = [], objectArgs = !params, param = undefined;
            if (objectArgs) {
                params = [];
            }
            options7.name = this.quotedString(helper);
            options7.hash = this.popStack();
            if (this.trackIds) {
                options7.hashIds = this.popStack();
            }
            if (this.stringParams) {
                options7.hashTypes = this.popStack();
                options7.hashContexts = this.popStack();
            }
            var inverse = this.popStack(), program = this.popStack();
            if (program || inverse) {
                options7.fn = program || 'container.noop';
                options7.inverse = inverse || 'container.noop';
            }
            var i = paramSize;
            while(i--){
                param = this.popStack();
                params[i] = param;
                if (this.trackIds) {
                    ids[i] = this.popStack();
                }
                if (this.stringParams) {
                    types2[i] = this.popStack();
                    contexts[i] = this.popStack();
                }
            }
            if (objectArgs) {
                options7.args = this.source.generateArray(params);
            }
            if (this.trackIds) {
                options7.ids = this.source.generateArray(ids);
            }
            if (this.stringParams) {
                options7.types = this.source.generateArray(types2);
                options7.contexts = this.source.generateArray(contexts);
            }
            if (this.options.data) {
                options7.data = 'data';
            }
            if (this.useBlockParams) {
                options7.blockParams = 'blockParams';
            }
            return options7;
        },
        setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister1) {
            var options7 = this.setupParams(helper, paramSize, params);
            options7.loc = JSON.stringify(this.source.currentLocation);
            options7 = this.objectLiteral(options7);
            if (useRegister1) {
                this.useRegister('options');
                params.push('options');
                return [
                    'options=',
                    options7
                ];
            } else if (params) {
                params.push(options7);
                return '';
            } else {
                return options7;
            }
        }
    };
    (function() {
        var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');
        var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {
        };
        for(var i = 0, l = reservedWords.length; i < l; i++){
            compilerWords[reservedWords[i]] = true;
        }
    })();
    JavaScriptCompiler.isValidJavaScriptVariableName = function(name5) {
        return !JavaScriptCompiler.RESERVED_WORDS[name5] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name5);
    };
    function strictLookup(requireTerminal, compiler, parts1, type4) {
        var stack = compiler.popStack(), i = 0, len = parts1.length;
        if (requireTerminal) {
            len--;
        }
        for(; i < len; i++){
            stack = compiler.nameLookup(stack, parts1[i], type4);
        }
        if (requireTerminal) {
            return [
                compiler.aliasable('container.strict'),
                '(',
                stack,
                ', ',
                compiler.quotedString(parts1[i]),
                ', ',
                JSON.stringify(compiler.source.currentLocation),
                ' )'
            ];
        } else {
            return stack;
        }
    }
    exports40['default'] = JavaScriptCompiler;
    exports40 = exports40['default'];
    return exports40;
}
var exports41 = {
}, _dewExec41 = false;
function dew41() {
    if (_dewExec41) return exports41;
    _dewExec41 = true;
    exports41.__esModule = true;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _handlebarsRuntime = dew20();
    var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
    var _handlebarsCompilerAst = dew21();
    var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);
    var _handlebarsCompilerBase = dew26();
    var _handlebarsCompilerCompiler = dew27();
    var _handlebarsCompilerJavascriptCompiler = dew40();
    var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);
    var _handlebarsCompilerVisitor = dew23();
    var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);
    var _handlebarsNoConflict = dew19();
    var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    var _create = _handlebarsRuntime2['default'].create;
    function create() {
        var hb = _create();
        hb.compile = function(input, options7) {
            return _handlebarsCompilerCompiler.compile(input, options7, hb);
        };
        hb.precompile = function(input, options7) {
            return _handlebarsCompilerCompiler.precompile(input, options7, hb);
        };
        hb.AST = _handlebarsCompilerAst2['default'];
        hb.Compiler = _handlebarsCompilerCompiler.Compiler;
        hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
        hb.Parser = _handlebarsCompilerBase.parser;
        hb.parse = _handlebarsCompilerBase.parse;
        hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;
        return hb;
    }
    var inst = create();
    inst.create = create;
    _handlebarsNoConflict2['default'](inst);
    inst.Visitor = _handlebarsCompilerVisitor2['default'];
    inst['default'] = inst;
    exports41['default'] = inst;
    exports41 = exports41['default'];
    return exports41;
}
var exports42 = {
}, _dewExec42 = false;
function dew42() {
    if (_dewExec42) return exports42;
    _dewExec42 = true;
    exports42.__esModule = true;
    exports42.print = print;
    exports42.PrintVisitor = PrintVisitor;
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            'default': obj
        };
    }
    var _visitor = dew23();
    var _visitor2 = _interopRequireDefault(_visitor);
    function print(ast) {
        return new PrintVisitor().accept(ast);
    }
    function PrintVisitor() {
        this.padding = 0;
    }
    PrintVisitor.prototype = new _visitor2['default']();
    PrintVisitor.prototype.pad = function(string) {
        var out = '';
        for(var i = 0, l = this.padding; i < l; i++){
            out += '  ';
        }
        out += string + '\n';
        return out;
    };
    PrintVisitor.prototype.Program = function(program) {
        var out = '', body1 = program.body, i = undefined, l = undefined;
        if (program.blockParams) {
            var blockParams = 'BLOCK PARAMS: [';
            for(i = 0, l = program.blockParams.length; i < l; i++){
                blockParams += ' ' + program.blockParams[i];
            }
            blockParams += ' ]';
            out += this.pad(blockParams);
        }
        for(i = 0, l = body1.length; i < l; i++){
            out += this.accept(body1[i]);
        }
        this.padding--;
        return out;
    };
    PrintVisitor.prototype.MustacheStatement = function(mustache) {
        return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');
    };
    PrintVisitor.prototype.Decorator = function(mustache) {
        return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');
    };
    PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function(block) {
        var out = '';
        out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
        this.padding++;
        out += this.pad(this.SubExpression(block));
        if (block.program) {
            out += this.pad('PROGRAM:');
            this.padding++;
            out += this.accept(block.program);
            this.padding--;
        }
        if (block.inverse) {
            if (block.program) {
                this.padding++;
            }
            out += this.pad('{{^}}');
            this.padding++;
            out += this.accept(block.inverse);
            this.padding--;
            if (block.program) {
                this.padding--;
            }
        }
        this.padding--;
        return out;
    };
    PrintVisitor.prototype.PartialStatement = function(partial3) {
        var content = 'PARTIAL:' + partial3.name.original;
        if (partial3.params[0]) {
            content += ' ' + this.accept(partial3.params[0]);
        }
        if (partial3.hash) {
            content += ' ' + this.accept(partial3.hash);
        }
        return this.pad('{{> ' + content + ' }}');
    };
    PrintVisitor.prototype.PartialBlockStatement = function(partial3) {
        var content = 'PARTIAL BLOCK:' + partial3.name.original;
        if (partial3.params[0]) {
            content += ' ' + this.accept(partial3.params[0]);
        }
        if (partial3.hash) {
            content += ' ' + this.accept(partial3.hash);
        }
        content += ' ' + this.pad('PROGRAM:');
        this.padding++;
        content += this.accept(partial3.program);
        this.padding--;
        return this.pad('{{> ' + content + ' }}');
    };
    PrintVisitor.prototype.ContentStatement = function(content) {
        return this.pad("CONTENT[ '" + content.value + "' ]");
    };
    PrintVisitor.prototype.CommentStatement = function(comment) {
        return this.pad("{{! '" + comment.value + "' }}");
    };
    PrintVisitor.prototype.SubExpression = function(sexpr) {
        var params = sexpr.params, paramStrings = [], hash = undefined;
        for(var i = 0, l = params.length; i < l; i++){
            paramStrings.push(this.accept(params[i]));
        }
        params = '[' + paramStrings.join(', ') + ']';
        hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';
        return this.accept(sexpr.path) + ' ' + params + hash;
    };
    PrintVisitor.prototype.PathExpression = function(id2) {
        var path3 = id2.parts.join('/');
        return (id2.data ? '@' : '') + 'PATH:' + path3;
    };
    PrintVisitor.prototype.StringLiteral = function(string) {
        return '"' + string.value + '"';
    };
    PrintVisitor.prototype.NumberLiteral = function(number) {
        return 'NUMBER{' + number.value + '}';
    };
    PrintVisitor.prototype.BooleanLiteral = function(bool) {
        return 'BOOLEAN{' + bool.value + '}';
    };
    PrintVisitor.prototype.UndefinedLiteral = function() {
        return 'UNDEFINED';
    };
    PrintVisitor.prototype.NullLiteral = function() {
        return 'NULL';
    };
    PrintVisitor.prototype.Hash = function(hash) {
        var pairs = hash.pairs, joinedPairs = [];
        for(var i = 0, l = pairs.length; i < l; i++){
            joinedPairs.push(this.accept(pairs[i]));
        }
        return 'HASH{' + joinedPairs.join(', ') + '}';
    };
    PrintVisitor.prototype.HashPair = function(pair) {
        return pair.key + '=' + this.accept(pair.value);
    };
    return exports42;
}
function unimplemented() {
    throw new Error("Node.js fs module is not supported by jspm core" + ("undefined" != typeof Deno ? ". Deno support here is tracking in https://github.com/jspm/jspm-core/issues/4, +1's are appreciated!" : " in the browser"));
}
var promises = {
    access: unimplemented,
    copyFile: unimplemented,
    open: unimplemented,
    opendir: unimplemented,
    rename: unimplemented,
    truncate: unimplemented,
    rmdir: unimplemented,
    mkdir: unimplemented,
    readdir: unimplemented,
    readlink: unimplemented,
    symlink: unimplemented,
    lstat: unimplemented,
    stat: unimplemented,
    link: unimplemented,
    unlink: unimplemented,
    chmod: unimplemented,
    lchmod: unimplemented,
    lchown: unimplemented,
    chown: unimplemented,
    utimes: unimplemented,
    realpath: unimplemented,
    mkdtemp: unimplemented,
    writeFile: unimplemented,
    appendFile: unimplemented,
    readFile: unimplemented
};
var fs = {
    appendFile: unimplemented,
    appendFileSync: unimplemented,
    access: unimplemented,
    accessSync: unimplemented,
    chown: unimplemented,
    chownSync: unimplemented,
    chmod: unimplemented,
    chmodSync: unimplemented,
    close: unimplemented,
    closeSync: unimplemented,
    copyFile: unimplemented,
    copyFileSync: unimplemented,
    createReadStream: unimplemented,
    createWriteStream: unimplemented,
    exists: unimplemented,
    existsSync: unimplemented,
    fchown: unimplemented,
    fchownSync: unimplemented,
    fchmod: unimplemented,
    fchmodSync: unimplemented,
    fdatasync: unimplemented,
    fdatasyncSync: unimplemented,
    fstat: unimplemented,
    fstatSync: unimplemented,
    fsync: unimplemented,
    fsyncSync: unimplemented,
    ftruncate: unimplemented,
    ftruncateSync: unimplemented,
    futimes: unimplemented,
    futimesSync: unimplemented,
    lchown: unimplemented,
    lchownSync: unimplemented,
    lchmod: unimplemented,
    lchmodSync: unimplemented,
    link: unimplemented,
    linkSync: unimplemented,
    lstat: unimplemented,
    lstatSync: unimplemented,
    mkdir: unimplemented,
    mkdirSync: unimplemented,
    mkdtemp: unimplemented,
    mkdtempSync: unimplemented,
    open: unimplemented,
    openSync: unimplemented,
    opendir: unimplemented,
    opendirSync: unimplemented,
    readdir: unimplemented,
    readdirSync: unimplemented,
    read: unimplemented,
    readSync: unimplemented,
    readFile: unimplemented,
    readFileSync: unimplemented,
    readlink: unimplemented,
    readlinkSync: unimplemented,
    realpath: unimplemented,
    realpathSync: unimplemented,
    rename: unimplemented,
    renameSync: unimplemented,
    rmdir: unimplemented,
    rmdirSync: unimplemented,
    stat: unimplemented,
    statSync: unimplemented,
    symlink: unimplemented,
    symlinkSync: unimplemented,
    truncate: unimplemented,
    truncateSync: unimplemented,
    unwatchFile: unimplemented,
    unlink: unimplemented,
    unlinkSync: unimplemented,
    utimes: unimplemented,
    utimesSync: unimplemented,
    watch: unimplemented,
    watchFile: unimplemented,
    writeFile: unimplemented,
    writeFileSync: unimplemented,
    write: unimplemented,
    writeSync: unimplemented,
    writev: unimplemented,
    writevSync: unimplemented,
    Dir: unimplemented,
    Dirent: unimplemented,
    Stats: unimplemented,
    ReadStream: unimplemented,
    WriteStream: unimplemented,
    FileReadStream: unimplemented,
    FileWriteStream: unimplemented,
    _toUnixTimestamp: unimplemented,
    F_OK: null,
    R_OK: null,
    W_OK: null,
    X_OK: null,
    constants: null,
    promises: promises
};
var exports43 = {
}, _dewExec43 = false;
function dew43() {
    if (_dewExec43) return exports43;
    _dewExec43 = true;
    var handlebars = dew41()['default'];
    var printer = dew42();
    handlebars.PrintVisitor = printer.PrintVisitor;
    handlebars.print = printer.print;
    exports43 = handlebars;
    function extension1(module, filename) {
        var fs1 = fs;
        var templateString = fs1.readFileSync(filename, 'utf8');
        module.exports = handlebars.compile(templateString);
    }
    if ({
    }) {
        ({
        })['.handlebars'] = extension1;
        ({
        })['.hbs'] = extension1;
    }
    return exports43;
}
const __default = dew43();
const osType1 = (()=>{
    if (globalThis.Deno != null) {
        return Deno.build.os;
    }
    const navigator = globalThis.navigator;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows1 = osType1 === "windows";
const CHAR_FORWARD_SLASH1 = 47;
function assertPath1(path3) {
    if (typeof path3 !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path3)}`);
    }
}
function isPosixPathSeparator1(code) {
    return code === 47;
}
function isPathSeparator1(code) {
    return isPosixPathSeparator1(code) || code === 92;
}
function isWindowsDeviceRoot1(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString1(path3, allowAboveRoot, separator, isPathSeparator2) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path3.length; i <= len; ++i){
        if (i < len) code = path3.charCodeAt(i);
        else if (isPathSeparator2(code)) break;
        else code = CHAR_FORWARD_SLASH1;
        if (isPathSeparator2(code)) {
            if (lastSlash === i - 1 || dots === 1) {
            } else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path3.slice(lastSlash + 1, i);
                else res = path3.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format1(sep3, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep3 + base;
}
class DenoStdInternalError1 extends Error {
    constructor(message4){
        super(message4);
        this.name = "DenoStdInternalError";
    }
}
function assert2(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError1(msg);
    }
}
const sep3 = "\\";
const delimiter3 = ";";
function resolve3(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path3;
        if (i >= 0) {
            path3 = pathSegments[i];
        } else if (!resolvedDevice) {
            if (globalThis.Deno == null) {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path3 = Deno.cwd();
        } else {
            if (globalThis.Deno == null) {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path3 = Deno.env.get(`=${resolvedDevice}`) || Deno.cwd();
            if (path3 === undefined || path3.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path3 = `${resolvedDevice}\\`;
            }
        }
        assertPath1(path3);
        const len = path3.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute3 = false;
        const code = path3.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator1(code)) {
                isAbsolute3 = true;
                if (isPathSeparator1(path3.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator1(path3.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path3.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator1(path3.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator1(path3.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path3.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path3.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot1(code)) {
                if (path3.charCodeAt(1) === 58) {
                    device = path3.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator1(path3.charCodeAt(2))) {
                            isAbsolute3 = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator1(code)) {
            rootEnd = 1;
            isAbsolute3 = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path3.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute3;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString1(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator1);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize4(path3) {
    assertPath1(path3);
    const len = path3.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute3 = false;
    const code = path3.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            isAbsolute3 = true;
            if (isPathSeparator1(path3.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path3.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path3.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path3.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path3.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path3.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path3.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path3.charCodeAt(1) === 58) {
                device = path3.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path3.charCodeAt(2))) {
                        isAbsolute3 = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString1(path3.slice(rootEnd), !isAbsolute3, "\\", isPathSeparator1);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute3) tail = ".";
    if (tail.length > 0 && isPathSeparator1(path3.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute3) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute3) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute3(path3) {
    assertPath1(path3);
    const len = path3.length;
    if (len === 0) return false;
    const code = path3.charCodeAt(0);
    if (isPathSeparator1(code)) {
        return true;
    } else if (isWindowsDeviceRoot1(code)) {
        if (len > 2 && path3.charCodeAt(1) === 58) {
            if (isPathSeparator1(path3.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join3(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path3 = paths[i];
        assertPath1(path3);
        if (path3.length > 0) {
            if (joined === undefined) joined = firstPart = path3;
            else joined += `\\${path3}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert2(firstPart != null);
    if (isPathSeparator1(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator1(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator1(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator1(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize4(joined);
}
function relative3(from, to) {
    assertPath1(from);
    assertPath1(to);
    if (from === to) return "";
    const fromOrig = resolve3(from);
    const toOrig = resolve3(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath3(path3) {
    if (typeof path3 !== "string") return path3;
    if (path3.length === 0) return "";
    const resolvedPath = resolve3(path3);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot1(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path3;
}
function dirname3(path3) {
    assertPath1(path3);
    const len = path3.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path3.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator1(path3.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path3.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path3.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path3.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path3;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path3.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator1(path3.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return path3;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator1(path3.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path3.slice(0, end);
}
function basename3(path3, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath1(path3);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (path3.length >= 2) {
        const drive = path3.charCodeAt(0);
        if (isWindowsDeviceRoot1(drive)) {
            if (path3.charCodeAt(1) === 58) start = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path3.length) {
        if (ext.length === path3.length && ext === path3) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path3.length - 1; i >= start; --i){
            const code = path3.charCodeAt(i);
            if (isPathSeparator1(code)) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path3.length;
        return path3.slice(start, end);
    } else {
        for(i = path3.length - 1; i >= start; --i){
            if (isPathSeparator1(path3.charCodeAt(i))) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path3.slice(start, end);
    }
}
function extname3(path3) {
    assertPath1(path3);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path3.length >= 2 && path3.charCodeAt(1) === 58 && isWindowsDeviceRoot1(path3.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path3.length - 1; i >= start; --i){
        const code = path3.charCodeAt(i);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path3.slice(startDot, end);
}
function format4(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format1("\\", pathObject);
}
function parse6(path3) {
    assertPath1(path3);
    const ret5 = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path3.length;
    if (len === 0) return ret5;
    let rootEnd = 0;
    let code = path3.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = 1;
            if (isPathSeparator1(path3.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path3.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path3.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path3.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path3.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path3.charCodeAt(2))) {
                        if (len === 3) {
                            ret5.root = ret5.dir = path3;
                            return ret5;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret5.root = ret5.dir = path3;
                    return ret5;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        ret5.root = ret5.dir = path3;
        return ret5;
    }
    if (rootEnd > 0) ret5.root = path3.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path3.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path3.charCodeAt(i);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret5.base = ret5.name = path3.slice(startPart, end);
        }
    } else {
        ret5.name = path3.slice(startPart, startDot);
        ret5.base = path3.slice(startPart, end);
        ret5.ext = path3.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret5.dir = path3.slice(0, startPart - 1);
    } else ret5.dir = ret5.root;
    return ret5;
}
function fromFileUrl3(url1) {
    url1 = url1 instanceof URL ? url1 : new URL(url1);
    if (url1.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path3 = decodeURIComponent(url1.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url1.hostname != "") {
        path3 = `\\\\${url1.hostname}${path3}`;
    }
    return path3;
}
function toFileUrl3(path3) {
    if (!isAbsolute3(path3)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path3.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\][^/\\]))?(.*)/);
    const url1 = new URL("file:///");
    url1.pathname = pathname.replace(/%/g, "%25");
    if (hostname != null) {
        url1.hostname = hostname;
        if (!url1.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url1;
}
const mod4 = function() {
    return {
        sep: sep3,
        delimiter: delimiter3,
        resolve: resolve3,
        normalize: normalize4,
        isAbsolute: isAbsolute3,
        join: join3,
        relative: relative3,
        toNamespacedPath: toNamespacedPath3,
        dirname: dirname3,
        basename: basename3,
        extname: extname3,
        format: format4,
        parse: parse6,
        fromFileUrl: fromFileUrl3,
        toFileUrl: toFileUrl3
    };
}();
const sep4 = "/";
const delimiter4 = ":";
function resolve4(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path3;
        if (i >= 0) path3 = pathSegments[i];
        else {
            if (globalThis.Deno == null) {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path3 = Deno.cwd();
        }
        assertPath1(path3);
        if (path3.length === 0) {
            continue;
        }
        resolvedPath = `${path3}/${resolvedPath}`;
        resolvedAbsolute = path3.charCodeAt(0) === CHAR_FORWARD_SLASH1;
    }
    resolvedPath = normalizeString1(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator1);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize5(path3) {
    assertPath1(path3);
    if (path3.length === 0) return ".";
    const isAbsolute4 = path3.charCodeAt(0) === 47;
    const trailingSeparator = path3.charCodeAt(path3.length - 1) === 47;
    path3 = normalizeString1(path3, !isAbsolute4, "/", isPosixPathSeparator1);
    if (path3.length === 0 && !isAbsolute4) path3 = ".";
    if (path3.length > 0 && trailingSeparator) path3 += "/";
    if (isAbsolute4) return `/${path3}`;
    return path3;
}
function isAbsolute4(path3) {
    assertPath1(path3);
    return path3.length > 0 && path3.charCodeAt(0) === 47;
}
function join4(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path3 = paths[i];
        assertPath1(path3);
        if (path3.length > 0) {
            if (!joined) joined = path3;
            else joined += `/${path3}`;
        }
    }
    if (!joined) return ".";
    return normalize5(joined);
}
function relative4(from, to) {
    assertPath1(from);
    assertPath1(to);
    if (from === to) return "";
    from = resolve4(from);
    to = resolve4(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 47) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath4(path3) {
    return path3;
}
function dirname4(path3) {
    assertPath1(path3);
    if (path3.length === 0) return ".";
    const hasRoot = path3.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i = path3.length - 1; i >= 1; --i){
        if (path3.charCodeAt(i) === 47) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path3.slice(0, end);
}
function basename4(path3, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath1(path3);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (ext !== undefined && ext.length > 0 && ext.length <= path3.length) {
        if (ext.length === path3.length && ext === path3) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path3.length - 1; i >= 0; --i){
            const code = path3.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path3.length;
        return path3.slice(start, end);
    } else {
        for(i = path3.length - 1; i >= 0; --i){
            if (path3.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path3.slice(start, end);
    }
}
function extname4(path3) {
    assertPath1(path3);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path3.length - 1; i >= 0; --i){
        const code = path3.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path3.slice(startDot, end);
}
function format5(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format1("/", pathObject);
}
function parse7(path3) {
    assertPath1(path3);
    const ret5 = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path3.length === 0) return ret5;
    const isAbsolute5 = path3.charCodeAt(0) === 47;
    let start;
    if (isAbsolute5) {
        ret5.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path3.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path3.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute5) {
                ret5.base = ret5.name = path3.slice(1, end);
            } else {
                ret5.base = ret5.name = path3.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute5) {
            ret5.name = path3.slice(1, startDot);
            ret5.base = path3.slice(1, end);
        } else {
            ret5.name = path3.slice(startPart, startDot);
            ret5.base = path3.slice(startPart, end);
        }
        ret5.ext = path3.slice(startDot, end);
    }
    if (startPart > 0) ret5.dir = path3.slice(0, startPart - 1);
    else if (isAbsolute5) ret5.dir = "/";
    return ret5;
}
function fromFileUrl4(url1) {
    url1 = url1 instanceof URL ? url1 : new URL(url1);
    if (url1.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url1.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl4(path3) {
    if (!isAbsolute4(path3)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url1 = new URL("file:///");
    url1.pathname = path3.replace(/%/g, "%25").replace(/\\/g, "%5C");
    return url1;
}
const mod5 = function() {
    return {
        sep: sep4,
        delimiter: delimiter4,
        resolve: resolve4,
        normalize: normalize5,
        isAbsolute: isAbsolute4,
        join: join4,
        relative: relative4,
        toNamespacedPath: toNamespacedPath4,
        dirname: dirname4,
        basename: basename4,
        extname: extname4,
        format: format5,
        parse: parse7,
        fromFileUrl: fromFileUrl4,
        toFileUrl: toFileUrl4
    };
}();
const path3 = isWindows1 ? mod4 : mod5;
const regExpEscapeChars = [
    "!",
    "$",
    "(",
    ")",
    "*",
    "+",
    ".",
    "=",
    "?",
    "[",
    "\\",
    "^",
    "{",
    "|"
];
const { basename: basename5 , delimiter: delimiter5 , dirname: dirname5 , extname: extname5 , format: format6 , fromFileUrl: fromFileUrl5 , isAbsolute: isAbsolute5 , join: join5 , normalize: normalize6 , parse: parse8 , relative: relative5 , resolve: resolve5 , sep: sep5 , toFileUrl: toFileUrl5 , toNamespacedPath: toNamespacedPath5 ,  } = path3;
const rangeEscapeChars = [
    "-",
    "\\",
    "]"
];
function globToRegExp(glob, { extended =true , globstar: globstarOption = true , os =osType1  } = {
}) {
    if (glob == "") {
        return /(?!)/;
    }
    const sep6 = os == "windows" ? "(?:\\\\|/)+" : "/+";
    const sepMaybe = os == "windows" ? "(?:\\\\|/)*" : "/*";
    const seps = os == "windows" ? [
        "\\",
        "/"
    ] : [
        "/"
    ];
    const globstar = os == "windows" ? "(?:[^\\\\/]*(?:\\\\|/|$)+)*" : "(?:[^/]*(?:/|$)+)*";
    const wildcard = os == "windows" ? "[^\\\\/]*" : "[^/]*";
    const escapePrefix = os == "windows" ? "`" : "\\";
    let newLength = glob.length;
    for(; newLength > 1 && seps.includes(glob[newLength - 1]); newLength--);
    glob = glob.slice(0, newLength);
    let regExpString = "";
    for(let j = 0; j < glob.length;){
        let segment = "";
        const groupStack = [];
        let inRange = false;
        let inEscape = false;
        let endsWithSep = false;
        let i = j;
        for(; i < glob.length && !seps.includes(glob[i]); i++){
            if (inEscape) {
                inEscape = false;
                const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;
                segment += escapeChars.includes(glob[i]) ? `\\${glob[i]}` : glob[i];
                continue;
            }
            if (glob[i] == escapePrefix) {
                inEscape = true;
                continue;
            }
            if (glob[i] == "[") {
                if (!inRange) {
                    inRange = true;
                    segment += "[";
                    if (glob[i + 1] == "!") {
                        i++;
                        segment += "^";
                    } else if (glob[i + 1] == "^") {
                        i++;
                        segment += "\\^";
                    }
                    continue;
                } else if (glob[i + 1] == ":") {
                    let k = i + 1;
                    let value4 = "";
                    while(glob[k + 1] != null && glob[k + 1] != ":"){
                        value4 += glob[k + 1];
                        k++;
                    }
                    if (glob[k + 1] == ":" && glob[k + 2] == "]") {
                        i = k + 2;
                        if (value4 == "alnum") segment += "\\dA-Za-z";
                        else if (value4 == "alpha") segment += "A-Za-z";
                        else if (value4 == "ascii") segment += "\x00-\x7F";
                        else if (value4 == "blank") segment += "\t ";
                        else if (value4 == "cntrl") segment += "\x00-\x1F\x7F";
                        else if (value4 == "digit") segment += "\\d";
                        else if (value4 == "graph") segment += "\x21-\x7E";
                        else if (value4 == "lower") segment += "a-z";
                        else if (value4 == "print") segment += "\x20-\x7E";
                        else if (value4 == "punct") {
                            segment += "!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_‘{|}~";
                        } else if (value4 == "space") segment += "\\s\v";
                        else if (value4 == "upper") segment += "A-Z";
                        else if (value4 == "word") segment += "\\w";
                        else if (value4 == "xdigit") segment += "\\dA-Fa-f";
                        continue;
                    }
                }
            }
            if (glob[i] == "]" && inRange) {
                inRange = false;
                segment += "]";
                continue;
            }
            if (inRange) {
                if (glob[i] == "\\") {
                    segment += `\\\\`;
                } else {
                    segment += glob[i];
                }
                continue;
            }
            if (glob[i] == ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] != "BRACE") {
                segment += ")";
                const type4 = groupStack.pop();
                if (type4 == "!") {
                    segment += wildcard;
                } else if (type4 != "@") {
                    segment += type4;
                }
                continue;
            }
            if (glob[i] == "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] != "BRACE") {
                segment += "|";
                continue;
            }
            if (glob[i] == "+" && extended && glob[i + 1] == "(") {
                i++;
                groupStack.push("+");
                segment += "(?:";
                continue;
            }
            if (glob[i] == "@" && extended && glob[i + 1] == "(") {
                i++;
                groupStack.push("@");
                segment += "(?:";
                continue;
            }
            if (glob[i] == "?") {
                if (extended && glob[i + 1] == "(") {
                    i++;
                    groupStack.push("?");
                    segment += "(?:";
                } else {
                    segment += ".";
                }
                continue;
            }
            if (glob[i] == "!" && extended && glob[i + 1] == "(") {
                i++;
                groupStack.push("!");
                segment += "(?!";
                continue;
            }
            if (glob[i] == "{") {
                groupStack.push("BRACE");
                segment += "(?:";
                continue;
            }
            if (glob[i] == "}" && groupStack[groupStack.length - 1] == "BRACE") {
                groupStack.pop();
                segment += ")";
                continue;
            }
            if (glob[i] == "," && groupStack[groupStack.length - 1] == "BRACE") {
                segment += "|";
                continue;
            }
            if (glob[i] == "*") {
                if (extended && glob[i + 1] == "(") {
                    i++;
                    groupStack.push("*");
                    segment += "(?:";
                } else {
                    const prevChar = glob[i - 1];
                    let numStars = 1;
                    while(glob[i + 1] == "*"){
                        i++;
                        numStars++;
                    }
                    const nextChar = glob[i + 1];
                    if (globstarOption && numStars == 2 && [
                        ...seps,
                        undefined
                    ].includes(prevChar) && [
                        ...seps,
                        undefined
                    ].includes(nextChar)) {
                        segment += globstar;
                        endsWithSep = true;
                    } else {
                        segment += wildcard;
                    }
                }
                continue;
            }
            segment += regExpEscapeChars.includes(glob[i]) ? `\\${glob[i]}` : glob[i];
        }
        if (groupStack.length > 0 || inRange || inEscape) {
            segment = "";
            for (const c of glob.slice(j, i)){
                segment += regExpEscapeChars.includes(c) ? `\\${c}` : c;
                endsWithSep = false;
            }
        }
        regExpString += segment;
        if (!endsWithSep) {
            regExpString += i < glob.length ? sep6 : sepMaybe;
            endsWithSep = true;
        }
        while(seps.includes(glob[i]))i++;
        if (!(i > j)) {
            throw new Error("Assertion failure: i > j (potential infinite loop)");
        }
        j = i;
    }
    regExpString = `^${regExpString}$`;
    return new RegExp(regExpString);
}
async function _createWalkEntry(path4) {
    path4 = normalize6(path4);
    const name5 = basename5(path4);
    const info = await Deno.stat(path4);
    return {
        path: path4,
        name: name5,
        isFile: info.isFile,
        isDirectory: info.isDirectory,
        isSymlink: info.isSymlink
    };
}
function include(path4, exts, match, skip) {
    if (exts && !exts.some((ext)=>path4.endsWith(ext)
    )) {
        return false;
    }
    if (match && !match.some((pattern)=>!!path4.match(pattern)
    )) {
        return false;
    }
    if (skip && skip.some((pattern)=>!!path4.match(pattern)
    )) {
        return false;
    }
    return true;
}
async function* walk(root, { maxDepth =Infinity , includeFiles =true , includeDirs =true , followSymlinks =false , exts =undefined , match =undefined , skip =undefined  } = {
}) {
    if (maxDepth < 0) {
        return;
    }
    if (includeDirs && include(root, exts, match, skip)) {
        yield await _createWalkEntry(root);
    }
    if (maxDepth < 1 || !include(root, undefined, undefined, skip)) {
        return;
    }
    for await (const entry of Deno.readDir(root)){
        assert2(entry.name != null);
        let path4 = join5(root, entry.name);
        if (entry.isSymlink) {
            if (followSymlinks) {
                path4 = await Deno.realPath(path4);
            } else {
                continue;
            }
        }
        if (entry.isFile) {
            if (includeFiles && include(path4, exts, match, skip)) {
                yield {
                    path: path4,
                    ...entry
                };
            }
        } else {
            yield* walk(path4, {
                maxDepth: maxDepth - 1,
                includeFiles,
                includeDirs,
                followSymlinks,
                exts,
                match,
                skip
            });
        }
    }
}
var EOL;
(function(EOL1) {
    EOL1["LF"] = "\n";
    EOL1["CRLF"] = "\r\n";
})(EOL || (EOL = {
}));
const { readFile  } = Deno;
const DEFAULT_HANDLEBARS_CONFIG = {
    baseDir: "views",
    extname: ".hbs",
    layoutsDir: "layouts/",
    partialsDir: "partials/",
    cachePartials: true,
    defaultLayout: "main",
    helpers: undefined,
    compilerOptions: undefined
};
function getNormalizePath(path4) {
    return normalize6(path4).replace(/\\/g, "/");
}
class Handlebars {
    config;
    #havePartialsBeenRegistered = false;
    constructor(config = DEFAULT_HANDLEBARS_CONFIG){
        this.config = config;
        this.config = {
            ...DEFAULT_HANDLEBARS_CONFIG,
            ...config
        };
        if (this.config.helpers) {
            const helperKeys = Object.keys(this.config.helpers);
            for(let i = 0; i < helperKeys.length; i++){
                const helperKey = helperKeys[i];
                __default.registerHelper(helperKey, this.config.helpers[helperKey]);
            }
        }
    }
    async renderView(view, context, layout) {
        if (!view) {
            console.warn("View is null");
            return "";
        }
        const config1 = this.config;
        if (!config1.cachePartials || !this.#havePartialsBeenRegistered) {
            await this.registerPartials();
        }
        const path4 = join5(config1.baseDir, view + config1.extname);
        const body1 = await this.render(path4, context);
        layout = layout || config1.defaultLayout;
        if (layout) {
            const layoutPath = join5(config1.baseDir, config1.layoutsDir, layout + config1.extname);
            return this.render(layoutPath, {
                ...context,
                body: body1
            });
        }
        return body1;
    }
    async render(path, context) {
        const source = new TextDecoder().decode(await readFile(path));
        const template = __default.compile(source, this.config.compilerOptions);
        return template(context);
    }
    async registerPartials() {
        const paths = await this.getTemplatesPath(join5(this.config.baseDir, this.config.partialsDir));
        if (paths) {
            for (const path4 of paths){
                const templateName = path4.replace(getNormalizePath(this.config.baseDir) + "/" + this.config.partialsDir, "").replace(new RegExp(this.config.extname + "$"), "");
                const source = new TextDecoder().decode(await readFile(path4));
                __default.registerPartial(templateName, source);
            }
        }
        this.#havePartialsBeenRegistered = true;
    }
    async getTemplatesPath(path) {
        const arr = [];
        for await (const w of walk(path, {
            match: [
                globToRegExp("**/*" + this.config.extname)
            ]
        })){
            if (w.isFile) {
                arr.push(getNormalizePath(w.path));
            }
        }
        return arr;
    }
}
const hbs = new Handlebars();
function use(path4, router) {
    router.get(path4, async (ctx)=>{
        ctx.response.body = await hbs.renderView("index", {
            title: "Oak"
        });
    });
}
function use1(path4, router) {
    router.get(path4, (ctx)=>{
        ctx.response.body = "Users Page";
    });
}
const HOSTNAME = "0.0.0.0";
const app3 = new Application();
const router = new Router();
use("/", router);
use1("/users", router);
router.get("/public/:path+", async (ctx)=>{
    console.log(ctx.params.path);
    await send(ctx, ctx.request.url.pathname, {
        root: Deno.cwd()
    });
});
app3.addEventListener("error", (err)=>{
    console.log(err);
});
app3.use(router.routes());
app3.use(router.allowedMethods());
console.log(`Now listening on http://0.0.0.0:3000`);
app3.listen({
    port: 3000,
    hostname: HOSTNAME
});
